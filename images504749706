<!doctype html>
<html lang="zh" data-ios="true" class="itcauecng" data-theme="light"><head><meta charSet="utf-8"/><title data-rh="true">CS186 2022 spring 个人笔记 - 知乎</title><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1"/><meta name="renderer" content="webkit"/><meta name="force-rendering" content="webkit"/><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/><meta name="google-site-verification" content="FTeR0c8arOPKh8c5DYh_9uu98_zJbaWw53J-Sch9MTg"/><meta data-rh="true" name="keywords" content="数据库设计"/><meta data-rh="true" name="description" content="Home project &amp;amp; source1+2. Introduction + SQL I &amp;amp; SQL II前两节主要介绍了数据库的相关应用, 讲了点sql语言, 课程的精华都在 notes里。所以这两节就不做笔记了。 3. Disk, Buffers, Files IDBMS的结构: …"/><meta data-rh="true" property="og:title" content="CS186 2022 spring 个人笔记"/><meta data-rh="true" property="og:url" content="https://zhuanlan.zhihu.com/p/504749706"/><meta data-rh="true" property="og:description" content="Home project &amp;amp; source1+2. Introduction + SQL I &amp;amp; SQL II前两节主要介绍了数据库的相关应用, 讲了点sql语言, 课程的精华都在 notes里。所以这两节就不做笔记了。 3. Disk, Buffers, Files IDBMS的结构: …"/><meta data-rh="true" property="og:image" content=""/><meta data-rh="true" property="og:type" content="article"/><meta data-rh="true" property="og:site_name" content="知乎专栏"/><link data-rh="true" rel="apple-touch-icon" href="https://static.zhihu.com/heifetz/assets/apple-touch-icon-152.81060cab.png"/><link data-rh="true" rel="apple-touch-icon" href="https://static.zhihu.com/heifetz/assets/apple-touch-icon-152.81060cab.png" sizes="152x152"/><link data-rh="true" rel="apple-touch-icon" href="https://static.zhihu.com/heifetz/assets/apple-touch-icon-120.d5793cac.png" sizes="120x120"/><link data-rh="true" rel="apple-touch-icon" href="https://static.zhihu.com/heifetz/assets/apple-touch-icon-76.7abf3393.png" sizes="76x76"/><link data-rh="true" rel="apple-touch-icon" href="https://static.zhihu.com/heifetz/assets/apple-touch-icon-60.362a8eac.png" sizes="60x60"/><link crossorigin="" rel="shortcut icon" type="image/x-icon" href="https://static.zhihu.com/heifetz/favicon.ico"/><link crossorigin="" rel="search" type="application/opensearchdescription+xml" href="https://static.zhihu.com/heifetz/search.xml" title="知乎"/><link rel="dns-prefetch" href="//static.zhimg.com"/><link rel="dns-prefetch" href="//pica.zhimg.com"/><link rel="dns-prefetch" href="//picx.zhimg.com"/><link rel="dns-prefetch" href="//pic1.zhimg.com"/><link rel="dns-prefetch" href="//pic2.zhimg.com"/><link rel="dns-prefetch" href="//pic3.zhimg.com"/><link rel="dns-prefetch" href="//pic4.zhimg.com"/><link rel="dns-prefetch" href="//static.zhihu.com"/><script nonce="76decdf8-f4a2-4fec-9e72-fb78ed4e014e" data-web-reporter-config="{&quot;platform&quot;:&quot;web&quot;,&quot;project&quot;:&quot;heifetz&quot;}">!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e=e||self).webReporter={})}(this,function(e){"use strict";var t={},n=!1,o=function(){var e,o,r,a,i;return n||(e=document.querySelector("script[data-web-reporter-config]"),o=e&&e.dataset.webReporterConfig||"{}",r=JSON.parse(o),a=r.platform,i=r.project,t={platform:a,project:i},n=!0),t};function r(e){return a(function(){return localStorage.getItem(e)})()}function a(e){return function(){try{return e.apply(void 0,arguments)}catch(e){}}}var i=a(function(e,t){var n={platform:"web",project:o().project,clientTimestamp:+new Date};!function(e,t,n){"1"===r("weber:logenabled")&&console.log("[web-reporter]%o",{type:e,base:t,data:n})}(e,n,t),function(e,t){var n=btoa(JSON.stringify(t));if("undefined"!=typeof Blob&&window.navigator&&window.navigator.sendBeacon){var o=new Blob([n],{type:"text/plain"});navigator.sendBeacon(e,o)}else{var r=new XMLHttpRequest;r.open("POST",e),r.withCredentials=!1,r.setRequestHeader("Content-Type","text/plain;charset=UTF-8"),r.send(n)}}(r("weber:api")||"https://apm.zhihu.com/collector/web_json",{type:e,base:n,data:t})});e.report=i,Object.defineProperty(e,"__esModule",{value:!0})});
</script><link href="https://static.zhihu.com/heifetz/2629.216a26f4.8f887a0bfb07084f6b88.css" crossorigin="" rel="stylesheet"/><link href="https://static.zhihu.com/heifetz/column.216a26f4.2585b378cc62b92b5244.css" crossorigin="" rel="stylesheet"/><script nonce="76decdf8-f4a2-4fec-9e72-fb78ed4e014e">!function(){"use strict";!function(e,n){var r=[];function t(e){return function(){r.push([e,arguments])}}n.Raven={captureException:t("captureException"),captureMessage:t("captureMessage"),captureBreadcrumb:t("captureBreadcrumb")};var a,o,c,i,s,u="undefined"!=typeof DOMError;function d(e){var n=e instanceof Error||e instanceof ErrorEvent||u&&e instanceof DOMError||e instanceof DOMException;Raven.captureException(n?e:new Error(e.message||e.reason))}n.addEventListener("unhandledrejection",d),n.addEventListener("error",d,!0),a=e.src,o=e,c=function(){r.forEach(function(e){var n;(n=Raven)[e[0]].apply(n,e[1])}),n.removeEventListener("unhandledrejection",d),n.removeEventListener("error",d,!0)},i=document.head||document.getElementsByTagName("head")[0],(s=document.createElement("script")).crossOrigin=o.crossOrigin,s.dataset.sentryConfig=o["data-sentry-config"],s.onload=c,s.src=a,i.appendChild(s)}({"defer":true,"crossOrigin":"anonymous","src":"https://unpkg.zhimg.com/@cfe/sentry-script@1.3.1/dist/init.js","data-sentry-config":"{\"dsn\":\"https://2d8d764432cc4f6fb3bc78ab9528299d@crash2.zhihu.com/1224\",\"sampleRate\":0.1,\"release\":\"1045-83eab294\",\"ignoreErrorNames\":[\"NetworkError\",\"SecurityError\"],\"ignoreErrorsPreset\":\"ReactApp\",\"tags\":{\"app_name\":\"heifetz\"}}"},window)}();
</script></head><body class="WhiteBg-body PostIndex-body"><div id="root"><div class="App"><style data-emotion-css="uzm3ri">.css-uzm3ri{position:fixed;top:0;right:0;left:0;z-index:101;display:none;height:2px;pointer-events:none;background:#056DE8;-webkit-transform:translateX(-100%);-ms-transform:translateX(-100%);transform:translateX(-100%);}</style><div class="LoadingBar  css-uzm3ri"></div><div><span style="position:absolute;top:-10000px;left:-10000px" role="log" aria-live="assertive"></span></div><main role="main" class="App-main"><div class="Post-content" data-zop-usertoken="{&quot;userToken&quot;:&quot;&quot;}" data-zop="{&quot;authorName&quot;:&quot;湖心亭&quot;,&quot;itemId&quot;:504749706,&quot;title&quot;:&quot;CS186 2022 spring 个人笔记&quot;,&quot;type&quot;:&quot;article&quot;}"><div class="ColumnPageHeader-Wrapper"><div><style data-emotion-css="1l12z7y">.css-1l12z7y{box-shadow:0px 16px 32px rgba(0,0,0,0.04);}</style><div class="Sticky ColumnPageHeader css-1l12z7y"><div class="ColumnPageHeader-content"><a href="//www.zhihu.com" aria-label="知乎"><style data-emotion-css="1hlrcxk">.css-1hlrcxk{-webkit-transition-property:fill;transition-property:fill;-webkit-transition-duration:0.25s;transition-duration:0.25s;-webkit-transition-timing-function:ease-in;transition-timing-function:ease-in;}</style><svg viewBox="0 0 64 30" fill="#056DE8" width="64" height="30" class="css-1hlrcxk"><path d="M29.05 4.582H16.733V25.94h3.018l.403 2.572 4.081-2.572h4.815V4.582zm-5.207 18.69l-2.396 1.509-.235-1.508h-1.724V7.233h6.78v16.04h-2.425zM14.46 14.191H9.982c0-.471.033-.954.039-1.458v-5.5h5.106V5.935a1.352 1.352 0 0 0-.404-.957 1.378 1.378 0 0 0-.968-.396H5.783c.028-.088.056-.177.084-.255.274-.82 1.153-3.326 1.153-3.326a4.262 4.262 0 0 0-2.413.698c-.57.4-.912.682-1.371 1.946-.532 1.453-.997 2.856-1.31 3.693C1.444 8.674.28 11.025.28 11.025a5.85 5.85 0 0 0 2.52-.61c1.119-.593 1.679-1.502 2.054-2.883l.09-.3h2.334v5.5c0 .5-.045.982-.073 1.46h-4.12c-.71 0-1.39.278-1.893.775a2.638 2.638 0 0 0-.783 1.874h6.527a17.717 17.717 0 0 1-.778 3.649 16.796 16.796 0 0 1-3.012 5.273A33.104 33.104 0 0 1 0 28.74s3.13 1.175 5.425-.954c1.388-1.292 2.631-3.814 3.23-5.727a28.09 28.09 0 0 0 1.12-5.229h5.967v-1.37a1.254 1.254 0 0 0-.373-.899 1.279 1.279 0 0 0-.909-.37z"></path><path d="M11.27 19.675l-2.312 1.491 5.038 7.458a6.905 6.905 0 0 0 .672-2.218 3.15 3.15 0 0 0-.28-2.168l-3.118-4.563zM51.449 15.195V5.842c4.181-.205 7.988-.405 9.438-.483l.851-.05c.387-.399.885-2.395.689-3.021-.073-.25-.213-.666-.638-.555a33.279 33.279 0 0 1-4.277.727c-2.766.321-3.97.404-7.804.682-6.718.487-12.709.72-12.709.72a2.518 2.518 0 0 0 .788 1.834 2.567 2.567 0 0 0 1.883.706c2.278-.095 5.598-.25 8.996-.41v9.203h-12.78c0 .703.281 1.377.783 1.874a2.69 2.69 0 0 0 1.892.777h10.105v7.075c0 .887-.464 1.192-1.231 1.214h-3.92a4.15 4.15 0 0 0 .837 1.544 4.2 4.2 0 0 0 1.403 1.067 6.215 6.215 0 0 0 2.71.277c1.36-.066 2.967-.826 2.967-3.57v-7.607h11.28c.342 0 .67-.135.91-.374.242-.239.378-.563.378-.902v-1.375H51.449z"></path><path d="M42.614 8.873a2.304 2.304 0 0 0-1.508-.926 2.334 2.334 0 0 0-1.727.405l-.376.272 4.255 5.85 2.24-1.62-2.884-3.98zM57.35 8.68l-3.125 4.097 2.24 1.663 4.517-5.927-.375-.277a2.32 2.32 0 0 0-1.722-.452 2.327 2.327 0 0 0-1.536.896z"></path></svg></a><div class="ColumnPageHeader-Button"><div class="Popover"><style data-emotion-css="d5yzzu">.css-d5yzzu{box-sizing:border-box;margin:0;min-width:0;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin-right:20px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}</style><div id="null-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="null-content" type="button" class="Button FEfUrdfMIKpQDJDqkjte Button--plain Button--gray fEPKGkUK5jyc4fUuT0QP css-d5yzzu">切换模式</div></div><button type="button" class="Button ColumnPageHeader-WriteButton FEfUrdfMIKpQDJDqkjte Button--blue JmYzaky7MEPMFcJDLNMG"><svg width="24" height="24" viewBox="0 0 24 24" class="Zi Zi--EditSurround" fill="currentColor"><path fill-rule="evenodd" d="M3.55 5.97a2.415 2.415 0 0 1 2.415-2.416h7.56a.75.75 0 0 1 0 1.5h-7.56a.915.915 0 0 0-.915.915v12.072c0 .505.41.915.915.915h12.074c.506 0 .915-.41.915-.915v-7.557a.75.75 0 0 1 1.5 0v7.557a2.415 2.415 0 0 1-2.415 2.415H5.965A2.415 2.415 0 0 1 3.55 18.04V5.969Z" clip-rule="evenodd"></path><path fill-rule="evenodd" d="M20.239 3.77a.75.75 0 0 1 0 1.06l-8.206 8.206a.75.75 0 0 1-1.06-1.06l8.205-8.206a.75.75 0 0 1 1.06 0Z" clip-rule="evenodd"></path></svg>写文章</button></div></div><div class="ColumnPageHeader-profile"><div><style data-emotion-css="1ay9vb9">.css-1ay9vb9{margin-right:16px;}</style><style data-emotion-css="24crel">.css-24crel{display:inline-block;padding:0 16px;font-size:14px;line-height:32px;color:#ffffff;text-align:center;cursor:pointer;background:none;border:1px solid;border-radius:3px;background-color:#056DE8;border-color:#056DE8;margin-right:16px;}.css-24crel::mozFocusInner{padding:0;border:0;}.css-24crel:focus{outline:none;-webkit-transition:box-shadow 0.3s;transition:box-shadow 0.3s;}.css-24crel:focus-visible{box-shadow:0 0 0 2px #ffffff,0 0 0 4px rgba(5,109,232,0.3);}.css-24crel:disabled{cursor:default;opacity:0.5;}.css-24crel:hover{border-color:#0568dc;background-color:#0568dc;}</style><button type="button" class="Button Button--primary Button--blue css-24crel">登录/注册</button><style data-emotion-css="1fv1gmw">.css-1fv1gmw{position:fixed;bottom:50px;right:64px;width:336px;z-index:2;}</style></div></div></div></div></div><article class="Post-Main Post-NormalMain" tabindex="-1"><header class="Post-Header"><h1 class="Post-Title">CS186 2022 spring 个人笔记</h1><div class="Post-Author"><div class="AuthorInfo" itemProp="author" itemscope="" itemType="http://schema.org/Person"><div class="AuthorInfo"><meta itemProp="name" content="湖心亭"/><meta itemProp="image" content="https://picx.zhimg.com/v2-fd86dc089550597e6f32169769ee6133_l.jpg?source=172ae18b"/><meta itemProp="url" content="https://www.zhihu.com/people/zhong-ying-73-36-26"/><meta itemProp="zhihu:followerCount"/><span class="UserLink AuthorInfo-avatarWrapper"><a href="//www.zhihu.com/people/zhong-ying-73-36-26" target="_blank" class="UserLink-link" data-za-detail-view-element_name="User"><style data-emotion-css="uodor8">.css-uodor8{border-radius:50%;}</style><style data-emotion-css="1syywx2">.css-1syywx2{box-sizing:border-box;margin:0;min-width:0;max-width:100%;height:auto;background-color:#ffffff;width:38px;height:38px;border-radius:50%;}</style><img class="Avatar AuthorInfo-avatar css-1syywx2" src="https://picx.zhimg.com/v2-fd86dc089550597e6f32169769ee6133_l.jpg?source=172ae18b" srcSet="https://picx.zhimg.com/v2-fd86dc089550597e6f32169769ee6133_l.jpg?source=172ae18b 2x" alt="湖心亭"/></a></span><div class="AuthorInfo-content"><div class="AuthorInfo-head"><span class="UserLink AuthorInfo-name"><a href="//www.zhihu.com/people/zhong-ying-73-36-26" target="_blank" class="UserLink-link" data-za-detail-view-element_name="User">湖心亭</a><style data-emotion-css="1cd9gw4">.css-1cd9gw4{margin-left:.3em;}</style></span></div><div class="AuthorInfo-detail"><div class="AuthorInfo-badge"><div class="ztext AuthorInfo-badgeText css-0">独往湖心亭看雪</div></div></div></div></div></div></div></header><div class="Post-RichTextContainer"><style data-emotion-css="1yuhvjn">.css-1yuhvjn{margin-top:16px;}</style><div class="css-1yuhvjn"><style data-emotion-css="376mun">.css-376mun{position:relative;display:inline;}</style><div class="css-376mun"><style data-emotion-css="1dlndns">.css-1dlndns{position:absolute;left:NaNpx;top:0;}</style><style data-emotion-css="ldd79s">.css-ldd79s{box-sizing:border-box;margin:0;min-width:0;position:absolute;left:NaNpx;top:0;}</style><div class="css-ldd79s"></div><style data-emotion-css="1bbe1ut">.css-1bbe1ut .FileLinkCard{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:rgba(245,245,245,0.88);border-radius:12px;box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin:1em auto;max-width:100%;overflow:hidden;padding:12px;position:relative;width:390px;}.css-1bbe1ut .FileLinkCard-icon{-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;height:30px;width:30px;}.css-1bbe1ut .FileLinkCard-info{margin-left:12px;}.css-1bbe1ut .FileLinkCard-name{color:#121212;font-size:15px;font-weight:500;line-height:21px;display:-webkit-box;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:2;}.css-1bbe1ut .FileLinkCard-meta{color:#999999;font-size:12px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;line-height:14px;margin-top:5px;}.css-1bbe1ut .FileLinkCard-source{white-space:pre;}.css-1bbe1ut img[data-uncomfortable]{content:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20344.88888888888886%20194%22%3E%3CforeignObject%20width%3D%22344.88888888888886%22%20height%3D%22194%22%3E%0A%20%20%20%20%20%20%3Cdiv%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml%22%20style%3D%22font-size%3A%2013px%3B%20font-family%3A%20-apple-system%2C%20BlinkMacSystemFont%2C%20Microsoft%20YaHei%2C%20sans-serif%3B%20color%3A%20%23fff%3B%20width%3A100%25%3B%20height%3A194px%3B%22%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20style%3D%22display%3A%20flex%3B%20flex-direction%3A%20column%3B%20align-items%3A%20center%3B%20justify-content%3A%20center%3B%20height%3A%20100%25%3B%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2218%22%20height%3D%2218%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22currentColor%22%3E%3Cpath%20d%3D%22M8%203.65a7%207%200%2000-1.353.128.65.65%200%2011-.25-1.275A8.3%208.3%200%20018%202.35c2.387%200%204.172.954%205.357%202.125C14.511%205.615%2015.15%207.022%2015.15%208c0%20.621-.257%201.391-.699%202.134a7.076%207.076%200%2001-1.403%201.68l.495.46a.65.65%200%2011-.886.951l-.998-.929a.645.645%200%2001-.104-.097L9.73%2010.501a.647.647%200%2001-.29.301%203.15%203.15%200%2001-4.313-4.094.647.647%200%2001.234-.275L3.908%205.08a5.774%205.774%200%2000-1.283%201.522C2.282%207.198%202.15%207.707%202.15%208c0%20.522.41%201.616%201.407%202.6.965.954%202.43%201.75%204.443%201.75.468%200%20.905-.043%201.311-.12a.65.65%200%2001.243%201.277A8.322%208.322%200%20018%2013.65c-2.387%200-4.172-.954-5.357-2.125C1.49%2010.385.85%208.978.85%208c0-.598.238-1.333.648-2.046A7.054%207.054%200%20012.95%204.188l-.547-.509a.65.65%200%2011.886-.951l8.8%208.194a5.793%205.793%200%20001.244-1.453c.372-.624.516-1.163.516-1.469%200-.522-.41-1.616-1.407-2.6-.965-.954-2.43-1.75-4.443-1.75zM6.29%207.296a1.85%201.85%200%20002.534%202.36l-2.535-2.36zM8%204.85a.65.65%200%20100%201.3%201.85%201.85%200%20011.843%201.694.65.65%200%20101.296-.11A3.15%203.15%200%20008%204.85z%22%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%20style%3D%22margin%3A%20.6em%200%201.2em%22%3E%E8%AF%A5%E5%9B%BE%E7%89%87%E6%9C%89%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%BC%95%E8%B5%B7%E4%B8%8D%E9%80%82%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cbutton%20style%3D%22padding%3A%204px%201em%3B%20font-size%3A%201.1em%3B%20color%3A%20inherit%3B%20background%3A%20none%3B%20border%3A%201px%20solid%20rgba%28255%2C255%2C255%2C.5%29%3B%20border-radius%3A%209999px%3B%22%3E%E7%BB%A7%E7%BB%AD%E6%9F%A5%E7%9C%8B%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2FforeignObject%3E%3C%2Fsvg%3E);width:100%;height:194px;background:url(https://pic1.zhimg.com/v2-cf70d0759d787c70091857151c1cad4a.jpeg) no-repeat rgba(191,191,191,0.7);background-size:cover;cursor:pointer!important;}.css-1bbe1ut img.content_image[data-size="normal"],.css-1bbe1ut img.origin_image[data-size="normal"]{width:100%;max-width:100%;}.css-1bbe1ut img.content_image[data-size="small"],.css-1bbe1ut img.origin_image[data-size="small"]{width:320px;max-width:100%;}</style><style data-emotion-css="1n5wicu">.css-1n5wicu .LinkCard.new{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;box-sizing:border-box;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:390px;min-height:84px;border-radius:8px;max-width:100%;overflow:hidden;margin:16px auto;padding:12px 12px 9px 12px;background-color:#f5f5f5;}.css-1n5wicu .LinkCard.new,.css-1n5wicu .LinkCard.new:hover{-webkit-text-decoration:none;text-decoration:none;border:none !important;color:inherit !important;}.css-1n5wicu .LinkCard.new .LinkCard-contents{display:block;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;position:relative;}.css-1n5wicu .LinkCard.new .LinkCard-contents .loading{height:14px;background:#ebebeb;border-radius:7px;}.css-1n5wicu .LinkCard.new .LinkCard-contents.withTitle{margin-bottom:3px;}.css-1n5wicu .LinkCard.new .LinkCard-title{display:-webkit-box;font-size:15px;font-weight:500;line-height:1.4;margin-bottom:2px;color:#121212;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:1;}.css-1n5wicu .LinkCard.new .LinkCard-title.two-line{line-height:20px;display:-webkit-box;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:2;}.css-1n5wicu .LinkCard.new .LinkCard-title.loading{margin-bottom:8px;width:80%;}.css-1n5wicu .LinkCard.new .LinkCard-title.loading.withTitle{margin-bottom:6px;}.css-1n5wicu .LinkCard.new .LinkCard-title.loadingTitle{margin-bottom:5px;}.css-1n5wicu .LinkCard.new .LinkCard-excerpt{display:-webkit-box;text-overflow:ellipsis;font-size:13px;line-height:18px;color:#999999;margin-bottom:4px;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:1;}.css-1n5wicu .LinkCard.new .LinkCard-excerpt .LinkCard-author{color:#454545;}.css-1n5wicu .LinkCard.new .LinkCard-desc{display:-webkit-box;font-size:13px;height:18px;line-height:18px;color:#999999;word-break:break-all;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:1;}.css-1n5wicu .LinkCard.new .LinkCard-desc .LinkCard-tag,.css-1n5wicu .LinkCard.new .LinkCard-desc .tag{display:inline-block;font-size:11px;margin-left:8px;padding:0 4px;border-radius:3px;background:rgba(209,209,209,0.3);}.css-1n5wicu .LinkCard.new .LinkCard-desc.loading{width:40%;}.css-1n5wicu .LinkCard.new .LinkCard-desc svg{margin-right:2px;}.css-1n5wicu .LinkCard.new .LinkCard-image{-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;background-color:#ebebeb;background-size:cover;background-position:center;position:relative;display:block;width:60px;height:60px;margin-left:20px;object-fit:cover;border-radius:inherit;overflow:hidden;}.css-1n5wicu .LinkCard.new .LinkCard-image.LinkCard-image--default{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;background-color:#ebebeb;color:#d1d1d1;}.css-1n5wicu .LinkCard.new .LinkCard-image.LinkCard-image--default svg{color:#999999;}.css-1n5wicu .LinkCard.new .LinkCard-image img{width:100%;height:100%;object-fit:cover;}.css-1n5wicu .LinkCard.new .LinkCard-image .LinkCard-image--video{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:absolute;top:50%;left:50%;-webkit-transform:translateX(-50%) translateY(-50%);-ms-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);width:24px;height:24px;border-radius:12px;background:rgba(255,255,255,0.9);pointer-events:none;}.css-1n5wicu .LinkCard.new .LinkCard-image .LinkCard-image--video svg{color:#454545;}.css-1n5wicu .LinkCard.new .LinkCard-richText .text{color:#454545;}.css-1n5wicu .LinkCard.new .LinkCard-richText .bold{font-weight:600;}.css-1n5wicu .LinkCard.new .LinkCard-richText .tag{margin-left:4px;}.css-1n5wicu .LinkCard.old{position:relative;display:block;margin:1em auto;width:390px;box-sizing:border-box;border-radius:12px;max-width:100%;overflow:hidden;}.css-1n5wicu .LinkCard.old,.css-1n5wicu .LinkCard.old:hover{-webkit-text-decoration:none;text-decoration:none;border:none !important;color:inherit !important;}.css-1n5wicu .LinkCard-ecommerceLoadingCard{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;padding:12px;border-radius:inherit;height:80px;box-sizing:border-box;background:rgba(245,245,245,0.88);color:#d1d1d1;}.css-1n5wicu .LinkCard-ecommerceLoadingCardAvatarWrapper{width:60px;height:60px;background:#ebebeb;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;border-radius:6px;margin-right:10px;}.css-1n5wicu .LinkCard-ecommerceLoadingCardNetwork{width:20px;height:20px;}.css-1n5wicu .LinkCard-ecommerceLoadingCardLoadingbar{height:60px;-webkit-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.css-1n5wicu .LinkCard-ecommerceLoadingCardLoadingbar span{height:16px;display:inline-block;background:#ebebeb;}.css-1n5wicu .LinkCard-ecommerceLoadingCardLoadingbar span:nth-of-type(1){width:60px;margin-bottom:4px;}.css-1n5wicu .LinkCard-ecommerceLoadingCardLoadingbar span:nth-of-type(2){width:127px;}</style><style data-emotion-css="1cfd2nk">.css-1cfd2nk .LinkCard.old{position:relative;display:block;margin:1em auto;width:390px;box-sizing:border-box;border-radius:12px;max-width:100%;overflow:hidden;}.css-1cfd2nk .LinkCard.old,.css-1cfd2nk .LinkCard.old:hover{-webkit-text-decoration:none;text-decoration:none;border:none !important;color:inherit !important;}.css-1cfd2nk .LinkCard-ecommerceLoadingCard{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;padding:12px;border-radius:inherit;height:80px;box-sizing:border-box;background:rgba(245,245,245,0.88);color:#d1d1d1;}.css-1cfd2nk .LinkCard-ecommerceLoadingCardAvatarWrapper{width:60px;height:60px;background:#ebebeb;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;border-radius:6px;margin-right:10px;}.css-1cfd2nk .LinkCard-ecommerceLoadingCardNetwork{width:20px;height:20px;}.css-1cfd2nk .LinkCard-ecommerceLoadingCardLoadingbar{height:60px;-webkit-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.css-1cfd2nk .LinkCard-ecommerceLoadingCardLoadingbar span{height:16px;display:inline-block;background:#ebebeb;}.css-1cfd2nk .LinkCard-ecommerceLoadingCardLoadingbar span:nth-of-type(1){width:60px;margin-bottom:4px;}.css-1cfd2nk .LinkCard-ecommerceLoadingCardLoadingbar span:nth-of-type(2){width:127px;}.css-1cfd2nk .LinkCard.new{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;box-sizing:border-box;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:390px;min-height:84px;border-radius:8px;max-width:100%;overflow:hidden;margin:16px auto;padding:12px 12px 9px 12px;background-color:#f5f5f5;}.css-1cfd2nk .LinkCard.new,.css-1cfd2nk .LinkCard.new:hover{-webkit-text-decoration:none;text-decoration:none;border:none !important;color:inherit !important;}.css-1cfd2nk .LinkCard.new .LinkCard-contents{display:block;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;position:relative;}.css-1cfd2nk .LinkCard.new .LinkCard-contents .loading{height:14px;background:#ebebeb;border-radius:7px;}.css-1cfd2nk .LinkCard.new .LinkCard-contents.withTitle{margin-bottom:3px;}.css-1cfd2nk .LinkCard.new .LinkCard-title{display:-webkit-box;font-size:15px;font-weight:500;line-height:1.4;margin-bottom:2px;color:#121212;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:1;}.css-1cfd2nk .LinkCard.new .LinkCard-title.two-line{line-height:20px;display:-webkit-box;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:2;}.css-1cfd2nk .LinkCard.new .LinkCard-title.loading{margin-bottom:8px;width:80%;}.css-1cfd2nk .LinkCard.new .LinkCard-title.loading.withTitle{margin-bottom:6px;}.css-1cfd2nk .LinkCard.new .LinkCard-title.loadingTitle{margin-bottom:5px;}.css-1cfd2nk .LinkCard.new .LinkCard-excerpt{display:-webkit-box;text-overflow:ellipsis;font-size:13px;line-height:18px;color:#999999;margin-bottom:4px;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:1;}.css-1cfd2nk .LinkCard.new .LinkCard-excerpt .LinkCard-author{color:#454545;}.css-1cfd2nk .LinkCard.new .LinkCard-desc{display:-webkit-box;font-size:13px;height:18px;line-height:18px;color:#999999;word-break:break-all;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:1;}.css-1cfd2nk .LinkCard.new .LinkCard-desc .LinkCard-tag,.css-1cfd2nk .LinkCard.new .LinkCard-desc .tag{display:inline-block;font-size:11px;margin-left:8px;padding:0 4px;border-radius:3px;background:rgba(209,209,209,0.3);}.css-1cfd2nk .LinkCard.new .LinkCard-desc.loading{width:40%;}.css-1cfd2nk .LinkCard.new .LinkCard-desc svg{margin-right:2px;}.css-1cfd2nk .LinkCard.new .LinkCard-image{-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;background-color:#ebebeb;background-size:cover;background-position:center;position:relative;display:block;width:60px;height:60px;margin-left:20px;object-fit:cover;border-radius:inherit;overflow:hidden;}.css-1cfd2nk .LinkCard.new .LinkCard-image.LinkCard-image--default{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;background-color:#ebebeb;color:#d1d1d1;}.css-1cfd2nk .LinkCard.new .LinkCard-image.LinkCard-image--default svg{color:#999999;}.css-1cfd2nk .LinkCard.new .LinkCard-image img{width:100%;height:100%;object-fit:cover;}.css-1cfd2nk .LinkCard.new .LinkCard-image .LinkCard-image--video{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:absolute;top:50%;left:50%;-webkit-transform:translateX(-50%) translateY(-50%);-ms-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);width:24px;height:24px;border-radius:12px;background:rgba(255,255,255,0.9);pointer-events:none;}.css-1cfd2nk .LinkCard.new .LinkCard-image .LinkCard-image--video svg{color:#454545;}.css-1cfd2nk .LinkCard.new .LinkCard-richText .text{color:#454545;}.css-1cfd2nk .LinkCard.new .LinkCard-richText .bold{font-weight:600;}.css-1cfd2nk .LinkCard.new .LinkCard-richText .tag{margin-left:4px;}.css-1cfd2nk .FileLinkCard{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:rgba(245,245,245,0.88);border-radius:12px;box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin:1em auto;max-width:100%;overflow:hidden;padding:12px;position:relative;width:390px;}.css-1cfd2nk .FileLinkCard-icon{-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;height:30px;width:30px;}.css-1cfd2nk .FileLinkCard-info{margin-left:12px;}.css-1cfd2nk .FileLinkCard-name{color:#121212;font-size:15px;font-weight:500;line-height:21px;display:-webkit-box;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:2;}.css-1cfd2nk .FileLinkCard-meta{color:#999999;font-size:12px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;line-height:14px;margin-top:5px;}.css-1cfd2nk .FileLinkCard-source{white-space:pre;}.css-1cfd2nk img[data-uncomfortable]{content:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20344.88888888888886%20194%22%3E%3CforeignObject%20width%3D%22344.88888888888886%22%20height%3D%22194%22%3E%0A%20%20%20%20%20%20%3Cdiv%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml%22%20style%3D%22font-size%3A%2013px%3B%20font-family%3A%20-apple-system%2C%20BlinkMacSystemFont%2C%20Microsoft%20YaHei%2C%20sans-serif%3B%20color%3A%20%23fff%3B%20width%3A100%25%3B%20height%3A194px%3B%22%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20style%3D%22display%3A%20flex%3B%20flex-direction%3A%20column%3B%20align-items%3A%20center%3B%20justify-content%3A%20center%3B%20height%3A%20100%25%3B%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2218%22%20height%3D%2218%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22currentColor%22%3E%3Cpath%20d%3D%22M8%203.65a7%207%200%2000-1.353.128.65.65%200%2011-.25-1.275A8.3%208.3%200%20018%202.35c2.387%200%204.172.954%205.357%202.125C14.511%205.615%2015.15%207.022%2015.15%208c0%20.621-.257%201.391-.699%202.134a7.076%207.076%200%2001-1.403%201.68l.495.46a.65.65%200%2011-.886.951l-.998-.929a.645.645%200%2001-.104-.097L9.73%2010.501a.647.647%200%2001-.29.301%203.15%203.15%200%2001-4.313-4.094.647.647%200%2001.234-.275L3.908%205.08a5.774%205.774%200%2000-1.283%201.522C2.282%207.198%202.15%207.707%202.15%208c0%20.522.41%201.616%201.407%202.6.965.954%202.43%201.75%204.443%201.75.468%200%20.905-.043%201.311-.12a.65.65%200%2001.243%201.277A8.322%208.322%200%20018%2013.65c-2.387%200-4.172-.954-5.357-2.125C1.49%2010.385.85%208.978.85%208c0-.598.238-1.333.648-2.046A7.054%207.054%200%20012.95%204.188l-.547-.509a.65.65%200%2011.886-.951l8.8%208.194a5.793%205.793%200%20001.244-1.453c.372-.624.516-1.163.516-1.469%200-.522-.41-1.616-1.407-2.6-.965-.954-2.43-1.75-4.443-1.75zM6.29%207.296a1.85%201.85%200%20002.534%202.36l-2.535-2.36zM8%204.85a.65.65%200%20100%201.3%201.85%201.85%200%20011.843%201.694.65.65%200%20101.296-.11A3.15%203.15%200%20008%204.85z%22%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%20style%3D%22margin%3A%20.6em%200%201.2em%22%3E%E8%AF%A5%E5%9B%BE%E7%89%87%E6%9C%89%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%BC%95%E8%B5%B7%E4%B8%8D%E9%80%82%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cbutton%20style%3D%22padding%3A%204px%201em%3B%20font-size%3A%201.1em%3B%20color%3A%20inherit%3B%20background%3A%20none%3B%20border%3A%201px%20solid%20rgba%28255%2C255%2C255%2C.5%29%3B%20border-radius%3A%209999px%3B%22%3E%E7%BB%A7%E7%BB%AD%E6%9F%A5%E7%9C%8B%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2FforeignObject%3E%3C%2Fsvg%3E);width:100%;height:194px;background:url(https://pic1.zhimg.com/v2-cf70d0759d787c70091857151c1cad4a.jpeg) no-repeat rgba(191,191,191,0.7);background-size:cover;cursor:pointer!important;}.css-1cfd2nk img.content_image[data-size="normal"],.css-1cfd2nk img.origin_image[data-size="normal"]{width:100%;max-width:100%;}.css-1cfd2nk img.content_image[data-size="small"],.css-1cfd2nk img.origin_image[data-size="small"]{width:320px;max-width:100%;}</style><style data-emotion-css="117anjg animation-1yvu044">.css-117anjg{word-break:break-word;line-height:1.6;}.css-117anjg > [data-first-child]{margin-top:0;}.css-117anjg > :last-child{margin-bottom:0;}.css-117anjg h1,.css-117anjg h2{clear:left;margin-top:calc((1.4em * 2) / 1.2);margin-bottom:calc(1.4em / 1.2);font-size:1.2em;line-height:1.5;font-weight:600;}.css-117anjg h3,.css-117anjg h4,.css-117anjg h5,.css-117anjg h6{clear:left;margin-top:calc((1.4em * 1.5) / 1.1);margin-bottom:calc(1.4em / 1.1);font-size:1.1em;line-height:1.5;font-weight:600;}.css-117anjg u{-webkit-text-decoration:none;text-decoration:none;border-bottom:1px solid #454545;}.css-117anjg b{font-weight:600;}.css-117anjg sup{font-size:0.8em;}.css-117anjg sup[data-draft-type='reference']{color:#175399;}.css-117anjg a:focus{outline:none;-webkit-transition:box-shadow 0.3s;transition:box-shadow 0.3s;}html[data-focus-visible] .css-117anjg a:focus{box-shadow:0 0 0 2px #ffffff,0 0 0 4px rgba(5,109,232,0.3);}.css-117anjg a.ztext-link,.css-117anjg a.internal,.css-117anjg a.external{-webkit-text-decoration:none;text-decoration:none;cursor:pointer;border-bottom:1px solid #808080;}.css-117anjg a.ztext-link:hover,.css-117anjg a.internal:hover,.css-117anjg a.external:hover{color:#175399;border-bottom:1px solid #175399;}.css-117anjg a.ztext-link > .ellipsis::after,.css-117anjg a.internal > .ellipsis::after,.css-117anjg a.external > .ellipsis::after{content:'...';}.css-117anjg a.ztext-link > .invisible,.css-117anjg a.internal > .invisible,.css-117anjg a.external > .invisible{font:0/0 a;color:transparent;text-shadow:none;background-color:transparent;}.css-117anjg a.ztext-link u,.css-117anjg a.internal u,.css-117anjg a.external u{border:none;}.css-117anjg a.member_mention{color:#175399;}.css-117anjg a.member_mention:hover{border-bottom:1px solid #175399;}.css-117anjg a.UserLink-link{color:#175399;}.css-117anjg a.UserLink-link:hover{border-bottom:1px solid #175399;}.css-117anjg p{margin:1.4em 0;}.css-117anjg p.ztext-empty-paragraph{margin:calc((2.8em- (1.4em * 2 + 1.6em)) / 2) 0;}.css-117anjg p.ztext-empty-paragraph + .ztext-empty-paragraph{margin:1.4em 0;}.css-117anjg hr{margin:4em auto;width:240px;max-width:100%;border:none;border-top:1px solid #d1d1d1;}.css-117anjg img[eeimg]{max-width:100%;vertical-align:middle;}.css-117anjg img[eeimg="1"]{margin:0 3px;max-width:calc(100% - 6px);display:inline-block;}.css-117anjg img[eeimg="2"]{margin:1.4em auto;display:block;}.css-117anjg blockquote{margin:1.4em 0;padding-left:1em;color:#636363;border-left:3px solid #d1d1d1;}.css-117anjg ol,.css-117anjg ul{margin:1.4em 0;padding:0;width:100%;}.css-117anjg ol ol,.css-117anjg ul ol,.css-117anjg ol ul,.css-117anjg ul ul{margin:0;}.css-117anjg ol li::before,.css-117anjg ul li::before{width:1em;}.css-117anjg ol > ol,.css-117anjg ul > ol,.css-117anjg ol > ul,.css-117anjg ul > ul{display:table-row;}.css-117anjg ol > ol::before,.css-117anjg ul > ol::before,.css-117anjg ol > ul::before,.css-117anjg ul > ul::before{display:table-cell;content:'';}.css-117anjg ul{display:table;}.css-117anjg ul>li{display:table-row;list-style:none;}.css-117anjg ul>li::before{display:table-cell;content:'•  ';white-space:pre;}.css-117anjg ol{display:table;counter-reset:ol;}.css-117anjg ol > li{display:table-row;list-style:none;}.css-117anjg ol > li::before{display:table-cell;text-align:right;counter-increment:ol;content:counter(ol) '. ';white-space:pre;}.css-117anjg ol ol{counter-reset:ol2;}.css-117anjg ol ol li::before{counter-increment:ol2;content:counter(ol2) '. ';}.css-117anjg ol ol ol{counter-reset:ol3;}.css-117anjg ol ol ol li::before{counter-increment:ol3;content:counter(ol3) '. ';}.css-117anjg ol ol ol ol{counter-reset:ol4;}.css-117anjg ol ol ol ol li::before{counter-increment:ol4;content:counter(ol4) '. ';}.css-117anjg figure{margin:1.4em 0;}.css-117anjg figure .content_image,.css-117anjg figure .origin_image{margin:0 auto;}.css-117anjg figure figcaption{margin-top:calc(0.6em / 0.9);padding:0 1em;font-size:0.9em;line-height:1.5;text-align:center;color:#999999;}.css-117anjg figure + figure{margin-top:calc(1.4em * 1.6);}.css-117anjg figure[data-size='small'],.css-117anjg figure:not([data-size]) > [data-size='small']{clear:both;}.css-117anjg figure[data-size='left'],.css-117anjg figure:not([data-size]) > [data-size='left']{float:left;margin:0 20px 20px 0;max-width:33%;}.css-117anjg figure[data-size='right'],.css-117anjg figure:not([data-size]) > [data-size='right']{float:right;margin:0 0 20px 20px;max-width:33%;}.css-117anjg figure[data-size='collapse']{margin-bottom:0;}.css-117anjg figure[data-size='collapse'] + figure{margin-top:0;}.css-117anjg .content_image,.css-117anjg .origin_image{display:block;max-width:100%;height:auto;margin:1.4em auto;}.css-117anjg .content_image[data-size='small'],.css-117anjg .origin_image[data-size='small']{max-width:40%;}.css-117anjg .content_image.zh-lightbox-thumb,.css-117anjg .origin_image.zh-lightbox-thumb{cursor:-webkit-zoom-in;cursor:-moz-zoom-in;cursor:zoom-in;}.css-117anjg code{margin:0 2px;padding:3px 4px;border-radius:3px;font-family:Menlo,Monaco,Consolas,'Andale Mono','lucida console','Courier New',monospace;font-size:0.9em;background-color:#f5f5f5;}.css-117anjg pre{margin:1.4em 0;padding:calc(0.8em / 0.9);font-size:0.9em;word-break:initial;word-wrap:initial;white-space:pre;overflow:auto;-webkit-overflow-scrolling:touch;background:#f5f5f5;border-radius:4px;}.css-117anjg pre code{margin:0;padding:0;font-size:inherit;border-radius:0;background-color:inherit;}.css-117anjg li pre{white-space:pre-wrap;}.css-117anjg table[data-draft-type='table']{border-collapse:collapse;font-size:15px;margin:1.4em auto;max-width:100%;table-layout:fixed;text-align:left;width:100%;}.css-117anjg table[data-draft-type='table'][data-size='small']{min-width:260px;width:40%;}.css-117anjg table[data-draft-type='table'][data-row-style='striped'] tr:nth-of-type(2n + 1){background:#f5f5f5;}.css-117anjg table[data-draft-type='table'] td,.css-117anjg table[data-draft-type='table'] th{border:1px solid #d1d1d1;line-height:24px;height:24px;padding:3px 12px;}.css-117anjg table[data-draft-type='table'] th{background:#ebebeb;color:#121212;font-weight:500;}.css-117anjg .video-box,.css-117anjg .link-box{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;margin:1.4em 0;overflow:auto;white-space:normal;cursor:pointer;border:solid 1px #ebebeb;border-radius:4px;}.css-117anjg .lazy[data-lazy-status]{background-color:#f5f5f5;}.css-117anjg .lazy[data-lazy-status="ok"]{background-color:transparent;-webkit-animation:animation-1yvu044 0.5s ease-in;animation:animation-1yvu044 0.5s ease-in;}.css-117anjg .highlight{margin:1em 0;}.css-117anjg .highlight pre{margin:0;}.css-117anjg .highlight .hll{background-color:#f5f5f5;}.css-117anjg .highlight .c{font-style:italic;color:#999999;}.css-117anjg .highlight .err{color:#F1403C;}.css-117anjg .highlight .k{font-weight:600;}.css-117anjg .highlight .o{font-weight:600;}.css-117anjg .highlight .cm{font-style:italic;color:#999999;}.css-117anjg .highlight .cp{font-weight:600;color:#999999;}.css-117anjg .highlight .c1{font-style:italic;color:#999999;}.css-117anjg .highlight .cs{font-style:italic;font-weight:600;color:#999999;}.css-117anjg .highlight .gd{color:#FF3366;}.css-117anjg .highlight .ge{font-style:italic;}.css-117anjg .highlight .gr{color:#F1403C;}.css-117anjg .highlight .gh{color:#999999;}.css-117anjg .highlight .gi{color:#12b370;}.css-117anjg .highlight .go{color:#808080;}.css-117anjg .highlight .gp{color:#636363;}.css-117anjg .highlight .gs{font-weight:600;}.css-117anjg .highlight .gu{color:#999999;}.css-117anjg .highlight .gt{color:#F1403C;}.css-117anjg .highlight .kc{font-weight:600;}.css-117anjg .highlight .kd{font-weight:600;}.css-117anjg .highlight .kn{font-weight:600;}.css-117anjg .highlight .kp{font-weight:600;}.css-117anjg .highlight .kr{font-weight:600;}.css-117anjg .highlight .kt{font-weight:600;color:#175399;}.css-117anjg .highlight .m{color:#056DE8;}.css-117anjg .highlight .s{color:#F1403C;}.css-117anjg .highlight .na{color:#056DE8;}.css-117anjg .highlight .nb{color:#056DE8;}.css-117anjg .highlight .nc{font-weight:600;color:#175399;}.css-117anjg .highlight .no{color:#056DE8;}.css-117anjg .highlight .ni{color:#5555DD;}.css-117anjg .highlight .ne{font-weight:600;color:#F1403C;}.css-117anjg .highlight .nf{font-weight:600;color:#F1403C;}.css-117anjg .highlight .nn{color:#636363;}.css-117anjg .highlight .nt{color:#175399;}.css-117anjg .highlight .nv{color:#056DE8;}.css-117anjg .highlight .ow{font-weight:600;}.css-117anjg .highlight .w{color:#bfbfbf;}.css-117anjg .highlight .mf{color:#056DE8;}.css-117anjg .highlight .mh{color:#056DE8;}.css-117anjg .highlight .mi{color:#056DE8;}.css-117anjg .highlight .mo{color:#056DE8;}.css-117anjg .highlight .sb{color:#F1403C;}.css-117anjg .highlight .sc{color:#F1403C;}.css-117anjg .highlight .sd{color:#F1403C;}.css-117anjg .highlight .s2{color:#F1403C;}.css-117anjg .highlight .se{color:#F1403C;}.css-117anjg .highlight .sh{color:#F1403C;}.css-117anjg .highlight .si{color:#F1403C;}.css-117anjg .highlight .sx{color:#F1403C;}.css-117anjg .highlight .sr{color:#A5542F;}.css-117anjg .highlight .s1{color:#F1403C;}.css-117anjg .highlight .ss{color:#F1403C;}.css-117anjg .highlight .bp{color:#999999;}.css-117anjg .highlight .vc{color:#056DE8;}.css-117anjg .highlight .vg{color:#056DE8;}.css-117anjg .highlight .vi{color:#056DE8;}.css-117anjg .highlight .il{color:#056DE8;}.css-117anjg .highlight::-webkit-scrollbar{width:6px;height:6px;}.css-117anjg .highlight::-webkit-scrollbar-thumb:horizontal{background-color:rgba(18,18,18,0.5);border-radius:6px;}.css-117anjg .highlight::-webkit-scrollbar-thumb:horizontal:hover{background-color:rgba(18,18,18,0.6);}.css-117anjg .LinkCard.old{position:relative;display:block;margin:1em auto;width:390px;box-sizing:border-box;border-radius:12px;max-width:100%;overflow:hidden;}.css-117anjg .LinkCard.old,.css-117anjg .LinkCard.old:hover{-webkit-text-decoration:none;text-decoration:none;border:none !important;color:inherit !important;}.css-117anjg .LinkCard-ecommerceLoadingCard{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;padding:12px;border-radius:inherit;height:80px;box-sizing:border-box;background:rgba(245,245,245,0.88);color:#d1d1d1;}.css-117anjg .LinkCard-ecommerceLoadingCardAvatarWrapper{width:60px;height:60px;background:#ebebeb;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;border-radius:6px;margin-right:10px;}.css-117anjg .LinkCard-ecommerceLoadingCardNetwork{width:20px;height:20px;}.css-117anjg .LinkCard-ecommerceLoadingCardLoadingbar{height:60px;-webkit-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}.css-117anjg .LinkCard-ecommerceLoadingCardLoadingbar span{height:16px;display:inline-block;background:#ebebeb;}.css-117anjg .LinkCard-ecommerceLoadingCardLoadingbar span:nth-of-type(1){width:60px;margin-bottom:4px;}.css-117anjg .LinkCard-ecommerceLoadingCardLoadingbar span:nth-of-type(2){width:127px;}.css-117anjg .LinkCard.new{position:relative;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;box-sizing:border-box;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;width:390px;min-height:84px;border-radius:8px;max-width:100%;overflow:hidden;margin:16px auto;padding:12px 12px 9px 12px;background-color:#f5f5f5;}.css-117anjg .LinkCard.new,.css-117anjg .LinkCard.new:hover{-webkit-text-decoration:none;text-decoration:none;border:none !important;color:inherit !important;}.css-117anjg .LinkCard.new .LinkCard-contents{display:block;-webkit-flex:1 1 auto;-ms-flex:1 1 auto;flex:1 1 auto;position:relative;}.css-117anjg .LinkCard.new .LinkCard-contents .loading{height:14px;background:#ebebeb;border-radius:7px;}.css-117anjg .LinkCard.new .LinkCard-contents.withTitle{margin-bottom:3px;}.css-117anjg .LinkCard.new .LinkCard-title{display:-webkit-box;font-size:15px;font-weight:500;line-height:1.4;margin-bottom:2px;color:#121212;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:1;}.css-117anjg .LinkCard.new .LinkCard-title.two-line{line-height:20px;display:-webkit-box;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:2;}.css-117anjg .LinkCard.new .LinkCard-title.loading{margin-bottom:8px;width:80%;}.css-117anjg .LinkCard.new .LinkCard-title.loading.withTitle{margin-bottom:6px;}.css-117anjg .LinkCard.new .LinkCard-title.loadingTitle{margin-bottom:5px;}.css-117anjg .LinkCard.new .LinkCard-excerpt{display:-webkit-box;text-overflow:ellipsis;font-size:13px;line-height:18px;color:#999999;margin-bottom:4px;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:1;}.css-117anjg .LinkCard.new .LinkCard-excerpt .LinkCard-author{color:#454545;}.css-117anjg .LinkCard.new .LinkCard-desc{display:-webkit-box;font-size:13px;height:18px;line-height:18px;color:#999999;word-break:break-all;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:1;}.css-117anjg .LinkCard.new .LinkCard-desc .LinkCard-tag,.css-117anjg .LinkCard.new .LinkCard-desc .tag{display:inline-block;font-size:11px;margin-left:8px;padding:0 4px;border-radius:3px;background:rgba(209,209,209,0.3);}.css-117anjg .LinkCard.new .LinkCard-desc.loading{width:40%;}.css-117anjg .LinkCard.new .LinkCard-desc svg{margin-right:2px;}.css-117anjg .LinkCard.new .LinkCard-image{-webkit-flex:0 0 auto;-ms-flex:0 0 auto;flex:0 0 auto;background-color:#ebebeb;background-size:cover;background-position:center;position:relative;display:block;width:60px;height:60px;margin-left:20px;object-fit:cover;border-radius:inherit;overflow:hidden;}.css-117anjg .LinkCard.new .LinkCard-image.LinkCard-image--default{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;background-color:#ebebeb;color:#d1d1d1;}.css-117anjg .LinkCard.new .LinkCard-image.LinkCard-image--default svg{color:#999999;}.css-117anjg .LinkCard.new .LinkCard-image img{width:100%;height:100%;object-fit:cover;}.css-117anjg .LinkCard.new .LinkCard-image .LinkCard-image--video{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;position:absolute;top:50%;left:50%;-webkit-transform:translateX(-50%) translateY(-50%);-ms-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);width:24px;height:24px;border-radius:12px;background:rgba(255,255,255,0.9);pointer-events:none;}.css-117anjg .LinkCard.new .LinkCard-image .LinkCard-image--video svg{color:#454545;}.css-117anjg .LinkCard.new .LinkCard-richText .text{color:#454545;}.css-117anjg .LinkCard.new .LinkCard-richText .bold{font-weight:600;}.css-117anjg .LinkCard.new .LinkCard-richText .tag{margin-left:4px;}.css-117anjg .FileLinkCard{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background-color:rgba(245,245,245,0.88);border-radius:12px;box-sizing:border-box;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin:1em auto;max-width:100%;overflow:hidden;padding:12px;position:relative;width:390px;}.css-117anjg .FileLinkCard-icon{-webkit-flex-shrink:0;-ms-flex-negative:0;flex-shrink:0;height:30px;width:30px;}.css-117anjg .FileLinkCard-info{margin-left:12px;}.css-117anjg .FileLinkCard-name{color:#121212;font-size:15px;font-weight:500;line-height:21px;display:-webkit-box;text-overflow:ellipsis;overflow:hidden;-webkit-box-orient:vertical;-webkit-line-clamp:2;}.css-117anjg .FileLinkCard-meta{color:#999999;font-size:12px;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;line-height:14px;margin-top:5px;}.css-117anjg .FileLinkCard-source{white-space:pre;}.css-117anjg img[data-uncomfortable]{content:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20viewBox%3D%220%200%20344.88888888888886%20194%22%3E%3CforeignObject%20width%3D%22344.88888888888886%22%20height%3D%22194%22%3E%0A%20%20%20%20%20%20%3Cdiv%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxhtml%22%20style%3D%22font-size%3A%2013px%3B%20font-family%3A%20-apple-system%2C%20BlinkMacSystemFont%2C%20Microsoft%20YaHei%2C%20sans-serif%3B%20color%3A%20%23fff%3B%20width%3A100%25%3B%20height%3A194px%3B%22%3E%0A%20%20%20%20%20%20%20%20%3Cdiv%20style%3D%22display%3A%20flex%3B%20flex-direction%3A%20column%3B%20align-items%3A%20center%3B%20justify-content%3A%20center%3B%20height%3A%20100%25%3B%22%3E%0A%20%20%20%20%20%20%20%20%20%20%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%2218%22%20height%3D%2218%22%20viewBox%3D%220%200%2016%2016%22%20fill%3D%22currentColor%22%3E%3Cpath%20d%3D%22M8%203.65a7%207%200%2000-1.353.128.65.65%200%2011-.25-1.275A8.3%208.3%200%20018%202.35c2.387%200%204.172.954%205.357%202.125C14.511%205.615%2015.15%207.022%2015.15%208c0%20.621-.257%201.391-.699%202.134a7.076%207.076%200%2001-1.403%201.68l.495.46a.65.65%200%2011-.886.951l-.998-.929a.645.645%200%2001-.104-.097L9.73%2010.501a.647.647%200%2001-.29.301%203.15%203.15%200%2001-4.313-4.094.647.647%200%2001.234-.275L3.908%205.08a5.774%205.774%200%2000-1.283%201.522C2.282%207.198%202.15%207.707%202.15%208c0%20.522.41%201.616%201.407%202.6.965.954%202.43%201.75%204.443%201.75.468%200%20.905-.043%201.311-.12a.65.65%200%2001.243%201.277A8.322%208.322%200%20018%2013.65c-2.387%200-4.172-.954-5.357-2.125C1.49%2010.385.85%208.978.85%208c0-.598.238-1.333.648-2.046A7.054%207.054%200%20012.95%204.188l-.547-.509a.65.65%200%2011.886-.951l8.8%208.194a5.793%205.793%200%20001.244-1.453c.372-.624.516-1.163.516-1.469%200-.522-.41-1.616-1.407-2.6-.965-.954-2.43-1.75-4.443-1.75zM6.29%207.296a1.85%201.85%200%20002.534%202.36l-2.535-2.36zM8%204.85a.65.65%200%20100%201.3%201.85%201.85%200%20011.843%201.694.65.65%200%20101.296-.11A3.15%203.15%200%20008%204.85z%22%20fill-rule%3D%22evenodd%22%20clip-rule%3D%22evenodd%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cdiv%20style%3D%22margin%3A%20.6em%200%201.2em%22%3E%E8%AF%A5%E5%9B%BE%E7%89%87%E6%9C%89%E5%8F%AF%E8%83%BD%E4%BC%9A%E5%BC%95%E8%B5%B7%E4%B8%8D%E9%80%82%3C%2Fdiv%3E%0A%20%20%20%20%20%20%20%20%20%20%3Cbutton%20style%3D%22padding%3A%204px%201em%3B%20font-size%3A%201.1em%3B%20color%3A%20inherit%3B%20background%3A%20none%3B%20border%3A%201px%20solid%20rgba%28255%2C255%2C255%2C.5%29%3B%20border-radius%3A%209999px%3B%22%3E%E7%BB%A7%E7%BB%AD%E6%9F%A5%E7%9C%8B%3C%2Fbutton%3E%0A%20%20%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%20%20%3C%2Fdiv%3E%0A%20%20%20%20%3C%2FforeignObject%3E%3C%2Fsvg%3E);width:100%;height:194px;background:url(https://pic1.zhimg.com/v2-cf70d0759d787c70091857151c1cad4a.jpeg) no-repeat rgba(191,191,191,0.7);background-size:cover;cursor:pointer!important;}.css-117anjg img.content_image[data-size="normal"],.css-117anjg img.origin_image[data-size="normal"]{width:100%;max-width:100%;}.css-117anjg img.content_image[data-size="small"],.css-117anjg img.origin_image[data-size="small"]{width:320px;max-width:100%;}@-webkit-keyframes animation-1yvu044{from{opacity:0;}to{opacity:1;}}@keyframes animation-1yvu044{from{opacity:0;}to{opacity:1;}}</style><div class="RichText ztext Post-RichText css-117anjg" options="[object Object]"><p data-first-child></p><p></p><a target="_blank" href="https://link.zhihu.com/?target=https%3A//cs186berkeley.net/" data-draft-node="block" data-draft-type="link-card" data-text="Home" class="LinkCard new"><span class="LinkCard-contents"><span class="LinkCard-title loading" data-text="true"></span><span class="LinkCard-desc loading"></span></span><span class="LinkCard-image LinkCard-image--default"></span></a><p><br/><br/></p><a target="_blank" href="https://link.zhihu.com/?target=https%3A//github.com/berkeley-cs186" data-draft-node="block" data-draft-type="link-card" data-text="project &amp; source" class="LinkCard new"><span class="LinkCard-contents"><span class="LinkCard-title loading" data-text="true"></span><span class="LinkCard-desc loading"></span></span><span class="LinkCard-image LinkCard-image--default"></span></a><h2 id="h_504749706_0" data-into-catalog-status="">1+2. Introduction + SQL I &amp;  SQL II</h2><p data-pid="bSJvmP9q">前两节主要介绍了数据库的相关应用, 讲了点sql语言, 课程的精华都在 notes里。所以这两节就不做笔记了。<br/></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-2b032167c7b3c3809fd2bfb4515e902e_b.jpg" data-size="normal" class="content_image"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;0&#39; height=&#39;0&#39;&gt;&lt;/svg&gt;" data-size="normal" class="content_image lazy" data-actualsrc="https://pic3.zhimg.com/v2-2b032167c7b3c3809fd2bfb4515e902e_b.jpg" data-original-token="v2-2b032167c7b3c3809fd2bfb4515e902e"/><figcaption>Image</figcaption></figure><p class="ztext-empty-paragraph"><br/></p><h2 id="h_504749706_1" data-into-catalog-status="">3. Disk, Buffers, Files I</h2><p data-pid="eBMpT3D-">DBMS的结构:</p><p data-pid="1dyIpm0l">特点:</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-719006b34ad5610560ccadc9dd3de679_b.jpg" data-caption="" data-size="normal" data-rawwidth="1247" data-rawheight="912" class="origin_image zh-lightbox-thumb" width="1247" data-original="https://pic2.zhimg.com/v2-719006b34ad5610560ccadc9dd3de679_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1247&#39; height=&#39;912&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1247" data-rawheight="912" class="origin_image zh-lightbox-thumb lazy" width="1247" data-original="https://pic2.zhimg.com/v2-719006b34ad5610560ccadc9dd3de679_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-719006b34ad5610560ccadc9dd3de679_b.jpg" data-original-token="v2-719006b34ad5610560ccadc9dd3de679"/></figure><ul><li data-pid="VD2dT1CR">分层构造</li><li data-pid="3v4mhM7B">每层都是下层的抽象</li></ul><p class="ztext-empty-paragraph"><br/></p><h3 id="h_504749706_2" data-into-catalog-status="">1 Memory and Disk 内存和磁盘</h3><p data-pid="R_cIPQ4Y">当数据库处理数据时,该数据必须存在于内存中.因为这样访问该数据的速度相对较快,但是一旦数据变得非常大,就不可能将所有数据都放入内存中.使用磁盘来存储数据相对于内存来说比较廉价,但是当访问数据或写入数据时,磁盘都会产生大量成本.</p><h3 id="h_504749706_3" data-into-catalog-status="">2 Files, Pages, Records 文件 页 记录</h3><p data-pid="D908LMXS">文件是一种存储在外存上的数据结构, 它由大量性质相同的记录组成.</p><p data-pid="MeDN0GFy">关系数据库的数据单位是一条记录（行）.这些记录被组织成关系（表）,并且可以在内存中进行修改,删除,搜索或创建.</p><p data-pid="fQ0-12ll">磁盘的基本数据单位是页,这是从磁盘到内存的最小传输单位,反之亦然.为了与磁盘兼容的格式表示关系数据库,每个关系都存储在其自己的文件中,并且其记录被组织到文件中的页中.根据关系的模式和访问模式,数据库将确定：</p><ul><li data-pid="yQlRI9Sa">(1) 使用的文件类型</li><li data-pid="IDn0I-fH">(2) 页在文件中的组织方式</li><li data-pid="7qsERHem">(3) 每一页上的记录是如何组织的</li><li data-pid="HXJlDgJ7">(4) 以及每个记录的格式</li></ul><h3 id="h_504749706_4" data-into-catalog-status="">3 表 页的结构</h3><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-c2dbad3582241b12d5c674e1bef56830_b.jpg" data-size="normal" data-rawwidth="1410" data-rawheight="605" class="origin_image zh-lightbox-thumb" width="1410" data-original="https://pic1.zhimg.com/v2-c2dbad3582241b12d5c674e1bef56830_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1410&#39; height=&#39;605&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1410" data-rawheight="605" class="origin_image zh-lightbox-thumb lazy" width="1410" data-original="https://pic1.zhimg.com/v2-c2dbad3582241b12d5c674e1bef56830_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-c2dbad3582241b12d5c674e1bef56830_b.jpg" data-original-token="v2-c2dbad3582241b12d5c674e1bef56830"/><figcaption>表储存为许多逻辑文件，逻辑文件由许多页构成，（文件结构在后面会提到）。每个页可以存放多个records， records就是表的一行。</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-d30769f4ab79c15b29cb3915fc3179ba_b.jpg" data-size="normal" data-rawwidth="1399" data-rawheight="649" class="origin_image zh-lightbox-thumb" width="1399" data-original="https://pic3.zhimg.com/v2-d30769f4ab79c15b29cb3915fc3179ba_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1399&#39; height=&#39;649&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1399" data-rawheight="649" class="origin_image zh-lightbox-thumb lazy" width="1399" data-original="https://pic3.zhimg.com/v2-d30769f4ab79c15b29cb3915fc3179ba_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-d30769f4ab79c15b29cb3915fc3179ba_b.jpg" data-original-token="v2-d30769f4ab79c15b29cb3915fc3179ba"/><figcaption>页是I/O的基本单位，通常页的大小为64kb。</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-e4fb5f4328780eccdbfecd88907a5f46_b.jpg" data-size="normal" data-rawwidth="1426" data-rawheight="662" class="origin_image zh-lightbox-thumb" width="1426" data-original="https://pic3.zhimg.com/v2-e4fb5f4328780eccdbfecd88907a5f46_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1426&#39; height=&#39;662&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1426" data-rawheight="662" class="origin_image zh-lightbox-thumb lazy" width="1426" data-original="https://pic3.zhimg.com/v2-e4fb5f4328780eccdbfecd88907a5f46_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-e4fb5f4328780eccdbfecd88907a5f46_b.jpg" data-original-token="v2-e4fb5f4328780eccdbfecd88907a5f46"/><figcaption>页的内部结构，页眉会保存页的相关信息：记录的records数量；指向free space的指针；位图（用于维护固定长度的records）；page的剩余空间..</figcaption></figure><p data-pid="JPK6X01n">records分为固定长度（FLR）和不固定长度(VLR)，前者每个字段都是固定字节的类型，相同模式（schema）的FLR有相等的字节大小， VLR可以保存固定和可变的字段。</p><p data-pid="mAn4cdF8">只储存FLR的page：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-6a167fc622fbaff0c83fe0593f07b734_b.jpg" data-size="normal" data-rawwidth="1453" data-rawheight="770" class="origin_image zh-lightbox-thumb" width="1453" data-original="https://pic1.zhimg.com/v2-6a167fc622fbaff0c83fe0593f07b734_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1453&#39; height=&#39;770&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1453" data-rawheight="770" class="origin_image zh-lightbox-thumb lazy" width="1453" data-original="https://pic1.zhimg.com/v2-6a167fc622fbaff0c83fe0593f07b734_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-6a167fc622fbaff0c83fe0593f07b734_b.jpg" data-original-token="v2-6a167fc622fbaff0c83fe0593f07b734"/><figcaption>packed方式：删除后需要调整使得每个record之间没有空袭，每次插入都在末尾。 unpacked 运用bitmap维护删除和插入。</figcaption></figure><p data-pid="JBsECAzF">存储VLR的page：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-0a938f64f3fbe8957adfc085ee52522d_b.jpg" data-size="normal" data-rawwidth="1327" data-rawheight="742" class="origin_image zh-lightbox-thumb" width="1327" data-original="https://pic2.zhimg.com/v2-0a938f64f3fbe8957adfc085ee52522d_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1327&#39; height=&#39;742&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1327" data-rawheight="742" class="origin_image zh-lightbox-thumb lazy" width="1327" data-original="https://pic2.zhimg.com/v2-0a938f64f3fbe8957adfc085ee52522d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-0a938f64f3fbe8957adfc085ee52522d_b.jpg" data-original-token="v2-0a938f64f3fbe8957adfc085ee52522d"/><figcaption>页眉并非在开头，而是在最后面，像链表一样往前增长，存储指针。</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-99ee3d095b4557a5a0e48f27dd8674d3_b.jpg" data-size="normal" data-rawwidth="1421" data-rawheight="707" class="origin_image zh-lightbox-thumb" width="1421" data-original="https://pic4.zhimg.com/v2-99ee3d095b4557a5a0e48f27dd8674d3_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1421&#39; height=&#39;707&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1421" data-rawheight="707" class="origin_image zh-lightbox-thumb lazy" width="1421" data-original="https://pic4.zhimg.com/v2-99ee3d095b4557a5a0e48f27dd8674d3_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-99ee3d095b4557a5a0e48f27dd8674d3_b.jpg" data-original-token="v2-99ee3d095b4557a5a0e48f27dd8674d3"/><figcaption>槽页的两种布局。</figcaption></figure><p data-pid="li9R172E"><b>可以看出VLR 的 unpacked方式中，删除操作可能会造成磁盘碎片，造成空间的浪费。（</b>Fragmentation<b>）</b></p><h3 id="h_504749706_5" data-into-catalog-status="">4 Choosing File Types 选择文件类型</h3><p data-pid="iEkBzfFb">文件有两种主要类型：堆文件和排序文件.对于每个关系,数据库都会根据该关系的访问模式的I/O成本来选择要使用的文件类型.1个I/O等效于从磁盘读取1页或写入磁盘1页,并且根据其访问模式中的插入,删除和扫描操作对每种文件类型进行I/O计算.选择产生较少I/O成本的文件类型.  </p><p data-pid="xAMrSM7r">堆文件插入速度快 O(1)，但查找速度慢 O(N)；</p><p data-pid="09rogjLe">排序文件插入速度慢，查找可以二分实现 O(logn)；</p><p data-pid="kwbPt8NI">堆文件有两种实现方法： 链表和页目录。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-6a7fcc928645d662d2b5fc4dde6af436_b.jpg" data-size="normal" data-rawwidth="1231" data-rawheight="387" class="origin_image zh-lightbox-thumb" width="1231" data-original="https://pic3.zhimg.com/v2-6a7fcc928645d662d2b5fc4dde6af436_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1231&#39; height=&#39;387&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1231" data-rawheight="387" class="origin_image zh-lightbox-thumb lazy" width="1231" data-original="https://pic3.zhimg.com/v2-6a7fcc928645d662d2b5fc4dde6af436_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-6a7fcc928645d662d2b5fc4dde6af436_b.jpg" data-original-token="v2-6a7fcc928645d662d2b5fc4dde6af436"/><figcaption>链表实现堆文件。header page相当于链表表头，不存数据。</figcaption></figure><p data-pid="ABeCe0up">插入recode时遍历free page， 找到合适的page就写入。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-63c5eb2c75e0ea7e425b1dc5c3af9c54_b.jpg" data-size="normal" data-rawwidth="604" data-rawheight="472" class="origin_image zh-lightbox-thumb" width="604" data-original="https://pic1.zhimg.com/v2-63c5eb2c75e0ea7e425b1dc5c3af9c54_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;604&#39; height=&#39;472&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="604" data-rawheight="472" class="origin_image zh-lightbox-thumb lazy" width="604" data-original="https://pic1.zhimg.com/v2-63c5eb2c75e0ea7e425b1dc5c3af9c54_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-63c5eb2c75e0ea7e425b1dc5c3af9c54_b.jpg" data-original-token="v2-63c5eb2c75e0ea7e425b1dc5c3af9c54"/><figcaption>页目录实现堆文件。每个Header Page有多个entry.</figcaption></figure><p data-pid="S0-xC4Sk">●<b>Each entry in a header page contains:</b></p><ul><li data-pid="UuKP0w_y"><b>Pointer to a data page </b></li><li data-pid="_vyxFuyc"><b>The amount of free space for the data page </b></li></ul><p class="ztext-empty-paragraph"><br/></p><p data-pid="ZULPMWcn"><b>堆文件插入record：</b></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-cd3d4ad56ef5aeba45b372cdb3a8837c_b.jpg" data-caption="" data-size="normal" data-rawwidth="1271" data-rawheight="668" class="origin_image zh-lightbox-thumb" width="1271" data-original="https://pic1.zhimg.com/v2-cd3d4ad56ef5aeba45b372cdb3a8837c_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1271&#39; height=&#39;668&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1271" data-rawheight="668" class="origin_image zh-lightbox-thumb lazy" width="1271" data-original="https://pic1.zhimg.com/v2-cd3d4ad56ef5aeba45b372cdb3a8837c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-cd3d4ad56ef5aeba45b372cdb3a8837c_b.jpg" data-original-token="v2-cd3d4ad56ef5aeba45b372cdb3a8837c"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-9fd4937f7a9bb5652cb0eb19a88bd134_b.jpg" data-caption="" data-size="normal" data-rawwidth="1395" data-rawheight="743" class="origin_image zh-lightbox-thumb" width="1395" data-original="https://pic1.zhimg.com/v2-9fd4937f7a9bb5652cb0eb19a88bd134_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1395&#39; height=&#39;743&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1395" data-rawheight="743" class="origin_image zh-lightbox-thumb lazy" width="1395" data-original="https://pic1.zhimg.com/v2-9fd4937f7a9bb5652cb0eb19a88bd134_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-9fd4937f7a9bb5652cb0eb19a88bd134_b.jpg" data-original-token="v2-9fd4937f7a9bb5652cb0eb19a88bd134"/></figure><p class="ztext-empty-paragraph"><br/></p><h3 id="h_504749706_6" data-into-catalog-status="">5 Sorted Files 排序文件</h3><p data-pid="WwOwogX3">排序文件是一种文件类型,其中页按顺序排序,并且每个页中的记录均按键排序.</p><p data-pid="zOTmi4PM">这些文件是使用 <code>页目录</code> 实现的,并根据记录的排序方式对数据页执行排序.搜索排序的文件需要logN个I/O,其中N=页数,因为可以使用二分搜索来查找包含记录的页.同时,通常情况下,插入需要logN+N个I/O,因为需要二分搜索来找到要写入的页,并且该插入的记录可能会导致所有以后的记录都回退一个.平均而言,将需要推回N/2页,这涉及到每个页的读取和写入IO,这将导致N I/O项.</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-4b136d235fe1e793cbb88a25f3a840d0_b.jpg" data-caption="" data-size="normal" data-rawwidth="680" data-rawheight="456" class="origin_image zh-lightbox-thumb" width="680" data-original="https://pic1.zhimg.com/v2-4b136d235fe1e793cbb88a25f3a840d0_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;680&#39; height=&#39;456&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="680" data-rawheight="456" class="origin_image zh-lightbox-thumb lazy" width="680" data-original="https://pic1.zhimg.com/v2-4b136d235fe1e793cbb88a25f3a840d0_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-4b136d235fe1e793cbb88a25f3a840d0_b.jpg" data-original-token="v2-4b136d235fe1e793cbb88a25f3a840d0"/></figure><h2 id="h_504749706_7" data-into-catalog-status="">4.B+树</h2><h3 id="h_504749706_8" data-into-catalog-status="">4.0 index</h3><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-c46bd7ba33be7c423246933b3617159a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1772" data-rawheight="590" class="origin_image zh-lightbox-thumb" width="1772" data-original="https://pic3.zhimg.com/v2-c46bd7ba33be7c423246933b3617159a_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1772&#39; height=&#39;590&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1772" data-rawheight="590" class="origin_image zh-lightbox-thumb lazy" width="1772" data-original="https://pic3.zhimg.com/v2-c46bd7ba33be7c423246933b3617159a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-c46bd7ba33be7c423246933b3617159a_b.jpg" data-original-token="v2-c46bd7ba33be7c423246933b3617159a"/></figure><p data-pid="Dr1m20t5">索引可以存指向堆文件的指针， (&lt;key, recordId&gt;)</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-625629637c7c4f0d16e433c924f79f39_b.jpg" data-caption="" data-size="normal" data-rawwidth="1728" data-rawheight="776" class="origin_image zh-lightbox-thumb" width="1728" data-original="https://pic2.zhimg.com/v2-625629637c7c4f0d16e433c924f79f39_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1728&#39; height=&#39;776&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1728" data-rawheight="776" class="origin_image zh-lightbox-thumb lazy" width="1728" data-original="https://pic2.zhimg.com/v2-625629637c7c4f0d16e433c924f79f39_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-625629637c7c4f0d16e433c924f79f39_b.jpg" data-original-token="v2-625629637c7c4f0d16e433c924f79f39"/></figure><h3 id="h_504749706_9" data-into-catalog-status=""><b>4.1 引入</b></h3><p data-pid="KwF7u-11">在介绍B+树之前， 我们需要引入一个问题： 如何在文件(表)中查找我们需要的数据（记录）呢？ </p><p data-pid="OO_7y6rm">很直接的一个想法是把文件中的数据按关键词排序，然后二分，但是这样面对多次关键词查找就需要多次排序。</p><p data-pid="Cd3bCF8M">改进 1：使用索引， 每次都对索引排序。 但这样的时间复杂度是 <span class="ztext-math" data-eeimg="1" data-tex="log_2n">log_2n</span> , 底数是2与底数是100相比常数相差太大了。</p><p data-pid="WQdGFrg4">改进 2：参考平衡树的构造，我们维护一个&#34;多叉的平衡树&#34;：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-0bdd5b073529ec554a87679dbcc5b798_b.jpg" data-size="normal" data-rawwidth="2346" data-rawheight="841" class="origin_image zh-lightbox-thumb" width="2346" data-original="https://pic1.zhimg.com/v2-0bdd5b073529ec554a87679dbcc5b798_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2346&#39; height=&#39;841&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="2346" data-rawheight="841" class="origin_image zh-lightbox-thumb lazy" width="2346" data-original="https://pic1.zhimg.com/v2-0bdd5b073529ec554a87679dbcc5b798_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-0bdd5b073529ec554a87679dbcc5b798_b.jpg" data-original-token="v2-0bdd5b073529ec554a87679dbcc5b798"/><figcaption>B+树</figcaption></figure><ul><li data-pid="Ft8zm1I_">每个节点有 2*d 个entries， 例子中 d = 2, 最多有 2d+1 个指向下一层的指针，称为 &#34;fanout&#34; , d称为阶</li><li data-pid="DJx41l4U">叶节点保存date page的数据（page本身或者指向record的指针）， <b>按键值维护排序。</b>内部节点不保存record数据。相邻叶节点通过双向链表连接，便于进行范围查询。</li><li data-pid="14VWPN3G">内部节点 ，比如 key = 24， 其左边的指针指向键值小于24的孩子， 右边指针指向键值大于等于24的孩子。<b>内部节点的entries同样需要按键值维护排序。 </b></li><li data-pid="l0OxYmfp"><b>B+树有一个不变性（</b>occupancy invariant<b>）</b>：每个节点的entry都大于等于 d ， （除非有删除操作，当然现实中删除和插入相比次数可以忽略不计），这是由B+树的构建，维护过程决定的。</li><li data-pid="Q52imFYi">B+树的每个节点的entry都对应disk中的一个page。（也就意味着遍历树的过程中也有I/O cost。叶节点如果是存指针的话也是对应一个page）</li></ul><p data-pid="okKc3Tw8">B+树是一种有序的索引。</p><h3 id="h_504749706_10" data-into-catalog-status="">4.2 叶节点结构选择</h3><p data-pid="Za-2IRi8">B+树的叶节点会保存数据，主要有三种选择：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-1e30ee91cad6ae219bd2c592506976d6_b.jpg" data-size="normal" data-rawwidth="2244" data-rawheight="1212" class="origin_image zh-lightbox-thumb" width="2244" data-original="https://pic3.zhimg.com/v2-1e30ee91cad6ae219bd2c592506976d6_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2244&#39; height=&#39;1212&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="2244" data-rawheight="1212" class="origin_image zh-lightbox-thumb lazy" width="2244" data-original="https://pic3.zhimg.com/v2-1e30ee91cad6ae219bd2c592506976d6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-1e30ee91cad6ae219bd2c592506976d6_b.jpg" data-original-token="v2-1e30ee91cad6ae219bd2c592506976d6"/><figcaption>叶节点直接存data page</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-085ea5e39c2b3514f3e3980dc5daa9f7_b.jpg" data-size="normal" data-rawwidth="1711" data-rawheight="959" class="origin_image zh-lightbox-thumb" width="1711" data-original="https://pic4.zhimg.com/v2-085ea5e39c2b3514f3e3980dc5daa9f7_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1711&#39; height=&#39;959&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1711" data-rawheight="959" class="origin_image zh-lightbox-thumb lazy" width="1711" data-original="https://pic4.zhimg.com/v2-085ea5e39c2b3514f3e3980dc5daa9f7_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-085ea5e39c2b3514f3e3980dc5daa9f7_b.jpg" data-original-token="v2-085ea5e39c2b3514f3e3980dc5daa9f7"/><figcaption>叶节点是一个存指针的page， 指针指向key对应的record。如果有多个records对应了这个key，这个key会被多次存储。</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-2a22bffdf8d31002a1fe3a4b77a7b240_b.jpg" data-size="normal" data-rawwidth="2117" data-rawheight="1215" class="origin_image zh-lightbox-thumb" width="2117" data-original="https://pic1.zhimg.com/v2-2a22bffdf8d31002a1fe3a4b77a7b240_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2117&#39; height=&#39;1215&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="2117" data-rawheight="1215" class="origin_image zh-lightbox-thumb lazy" width="2117" data-original="https://pic1.zhimg.com/v2-2a22bffdf8d31002a1fe3a4b77a7b240_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-2a22bffdf8d31002a1fe3a4b77a7b240_b.jpg" data-original-token="v2-2a22bffdf8d31002a1fe3a4b77a7b240"/><figcaption>这里的ID pair就是指针。</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-64f01d2d9030f20238cf4a50cab75f1e_b.jpg" data-size="normal" data-rawwidth="2258" data-rawheight="1216" class="origin_image zh-lightbox-thumb" width="2258" data-original="https://pic3.zhimg.com/v2-64f01d2d9030f20238cf4a50cab75f1e_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2258&#39; height=&#39;1216&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="2258" data-rawheight="1216" class="origin_image zh-lightbox-thumb lazy" width="2258" data-original="https://pic3.zhimg.com/v2-64f01d2d9030f20238cf4a50cab75f1e_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-64f01d2d9030f20238cf4a50cab75f1e_b.jpg" data-original-token="v2-64f01d2d9030f20238cf4a50cab75f1e"/><figcaption>相当于2的简洁版。key=2 可以对应多个指针，全部放在对应的列表中。</figcaption></figure><p data-pid="_I_4GMbV">总结一下就是一种是直接叶节点存数据页。</p><p data-pid="oZINXG3W">二、三是存数据页的指针，（这个指针可以是id，也可以是多列联合的索引）</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-be8cce731bfbc1ab94ef15374346f478_b.jpg" data-caption="" data-size="normal" data-rawwidth="1634" data-rawheight="443" class="origin_image zh-lightbox-thumb" width="1634" data-original="https://pic1.zhimg.com/v2-be8cce731bfbc1ab94ef15374346f478_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1634&#39; height=&#39;443&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1634" data-rawheight="443" class="origin_image zh-lightbox-thumb lazy" width="1634" data-original="https://pic1.zhimg.com/v2-be8cce731bfbc1ab94ef15374346f478_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-be8cce731bfbc1ab94ef15374346f478_b.jpg" data-original-token="v2-be8cce731bfbc1ab94ef15374346f478"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-1a44a100b840d2d1c0e548f7b9105563_b.jpg" data-size="normal" data-rawwidth="1154" data-rawheight="241" class="origin_image zh-lightbox-thumb" width="1154" data-original="https://pic4.zhimg.com/v2-1a44a100b840d2d1c0e548f7b9105563_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1154&#39; height=&#39;241&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1154" data-rawheight="241" class="origin_image zh-lightbox-thumb lazy" width="1154" data-original="https://pic4.zhimg.com/v2-1a44a100b840d2d1c0e548f7b9105563_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-1a44a100b840d2d1c0e548f7b9105563_b.jpg" data-original-token="v2-1a44a100b840d2d1c0e548f7b9105563"/><figcaption>A1，存record本身（元组）；A2，存recordId（指针）；A3， 存指针列表</figcaption></figure><h3 id="h_504749706_11" data-into-catalog-status="">4.3 B+树的维护与建树</h3><p data-pid="MGPdijX8"><b>插入一条record的过程：</b></p><ul><li data-pid="DW3yvj0Q"><b>首先遍历树找到record的key所在的叶子节点，如果key存在， check这个key对应的所有record（或者指向的所有record）是否有等于要插入的这个record，如果不存在，就插入，并更新该叶子，否则do nothing.  如果key不存在， 就在叶子的entry中申请一个用来存放这个key并插入record， 最后对叶子排序。</b></li><li data-pid="MLUEKCAc"><b>如果更新完后叶子溢出了，（有2d+1个entry），进行分裂操作：中间项复制并push up给父节点，分裂成一个d ，一个d+1的叶子节点。比如下面我们插入21：</b></li></ul><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-41c9c027b797fe0ba900331a2bbaf4d4_b.jpg" data-caption="" data-size="normal" data-rawwidth="1256" data-rawheight="474" class="origin_image zh-lightbox-thumb" width="1256" data-original="https://pic1.zhimg.com/v2-41c9c027b797fe0ba900331a2bbaf4d4_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1256&#39; height=&#39;474&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1256" data-rawheight="474" class="origin_image zh-lightbox-thumb lazy" width="1256" data-original="https://pic1.zhimg.com/v2-41c9c027b797fe0ba900331a2bbaf4d4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-41c9c027b797fe0ba900331a2bbaf4d4_b.jpg" data-original-token="v2-41c9c027b797fe0ba900331a2bbaf4d4"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-e7ea449a1b7a83d7ec0927464fbf552f_b.jpg" data-size="normal" data-rawwidth="1516" data-rawheight="615" class="origin_image zh-lightbox-thumb" width="1516" data-original="https://pic4.zhimg.com/v2-e7ea449a1b7a83d7ec0927464fbf552f_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1516&#39; height=&#39;615&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1516" data-rawheight="615" class="origin_image zh-lightbox-thumb lazy" width="1516" data-original="https://pic4.zhimg.com/v2-e7ea449a1b7a83d7ec0927464fbf552f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-e7ea449a1b7a83d7ec0927464fbf552f_b.jpg" data-original-token="v2-e7ea449a1b7a83d7ec0927464fbf552f"/><figcaption>19复制并push up。然后调整指针。</figcaption></figure><p data-pid="EBcjGsRP">如果push up后的父节点也溢出了，那么对父节点同样进行分裂操作，只不过区别在于内部节点的分裂过程中不需要把中间的值复制，直接push up即可。比如上图我们再插入36 ：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-7de81f7b9ab5800ab2a58b0adf436dfd_b.jpg" data-caption="" data-size="normal" data-rawwidth="1698" data-rawheight="836" class="origin_image zh-lightbox-thumb" width="1698" data-original="https://pic2.zhimg.com/v2-7de81f7b9ab5800ab2a58b0adf436dfd_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1698&#39; height=&#39;836&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1698" data-rawheight="836" class="origin_image zh-lightbox-thumb lazy" width="1698" data-original="https://pic2.zhimg.com/v2-7de81f7b9ab5800ab2a58b0adf436dfd_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-7de81f7b9ab5800ab2a58b0adf436dfd_b.jpg" data-original-token="v2-7de81f7b9ab5800ab2a58b0adf436dfd"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-b1f037ef2bc3d1c6cd122fef38785291_b.jpg" data-caption="" data-size="normal" data-rawwidth="1411" data-rawheight="627" class="origin_image zh-lightbox-thumb" width="1411" data-original="https://pic2.zhimg.com/v2-b1f037ef2bc3d1c6cd122fef38785291_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1411&#39; height=&#39;627&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1411" data-rawheight="627" class="origin_image zh-lightbox-thumb lazy" width="1411" data-original="https://pic2.zhimg.com/v2-b1f037ef2bc3d1c6cd122fef38785291_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-b1f037ef2bc3d1c6cd122fef38785291_b.jpg" data-original-token="v2-b1f037ef2bc3d1c6cd122fef38785291"/></figure><p data-pid="GA8-XLq9"><b>删除：遍历找到对应的叶子节点并把record删掉即可。 B+树中删除只会删叶子节点，内部节点不会删除。</b></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-08dc5af6cf5f1c9883f6f379008c062a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1858" data-rawheight="250" class="origin_image zh-lightbox-thumb" width="1858" data-original="https://pic3.zhimg.com/v2-08dc5af6cf5f1c9883f6f379008c062a_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1858&#39; height=&#39;250&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1858" data-rawheight="250" class="origin_image zh-lightbox-thumb lazy" width="1858" data-original="https://pic3.zhimg.com/v2-08dc5af6cf5f1c9883f6f379008c062a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-08dc5af6cf5f1c9883f6f379008c062a_b.jpg" data-original-token="v2-08dc5af6cf5f1c9883f6f379008c062a"/></figure><p data-pid="BMpwx4js"><b>B+树的构建：</b></p><p data-pid="YCl3AV7l">如果采取将record逐条插入，效率很低，我们采取一种 批量加载(bulk loading) 的方法。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-b0f767bb9e5b6b6269c588300a2ea4c6_b.jpg" data-caption="" data-size="normal" data-rawwidth="1882" data-rawheight="617" class="origin_image zh-lightbox-thumb" width="1882" data-original="https://pic3.zhimg.com/v2-b0f767bb9e5b6b6269c588300a2ea4c6_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1882&#39; height=&#39;617&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1882" data-rawheight="617" class="origin_image zh-lightbox-thumb lazy" width="1882" data-original="https://pic3.zhimg.com/v2-b0f767bb9e5b6b6269c588300a2ea4c6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-b0f767bb9e5b6b6269c588300a2ea4c6_b.jpg" data-original-token="v2-b0f767bb9e5b6b6269c588300a2ea4c6"/></figure><p data-pid="cm3PD9Xy">简单点说就是先定一个fill factor，比如对于一个d=2的B+树，首先只有一个根节点(根节点刚开始是一个叶节点)，是一棵空树。设定fill factor = 3/4 , 我们把data按key排好序后，每次加入一个填了4格的节点(分裂一个entry到右边，左边就是只有3个entry的节点)：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-fd4179b96dc3c3bc876ea397e1360b8a_b.jpg" data-caption="" data-size="normal" data-rawwidth="585" data-rawheight="357" class="origin_image zh-lightbox-thumb" width="585" data-original="https://pic3.zhimg.com/v2-fd4179b96dc3c3bc876ea397e1360b8a_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;585&#39; height=&#39;357&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="585" data-rawheight="357" class="origin_image zh-lightbox-thumb lazy" width="585" data-original="https://pic3.zhimg.com/v2-fd4179b96dc3c3bc876ea397e1360b8a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-fd4179b96dc3c3bc876ea397e1360b8a_b.jpg" data-original-token="v2-fd4179b96dc3c3bc876ea397e1360b8a"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-8593e0232554e5a36d1c0f59aeb6ac75_b.jpg" data-caption="" data-size="normal" data-rawwidth="1370" data-rawheight="554" class="origin_image zh-lightbox-thumb" width="1370" data-original="https://pic2.zhimg.com/v2-8593e0232554e5a36d1c0f59aeb6ac75_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1370&#39; height=&#39;554&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1370" data-rawheight="554" class="origin_image zh-lightbox-thumb lazy" width="1370" data-original="https://pic2.zhimg.com/v2-8593e0232554e5a36d1c0f59aeb6ac75_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-8593e0232554e5a36d1c0f59aeb6ac75_b.jpg" data-original-token="v2-8593e0232554e5a36d1c0f59aeb6ac75"/></figure><p data-pid="ONEIcB61">如果parent节点满了，就分裂：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-3dfb91334f8f425c226f2ad09312ae2d_b.jpg" data-caption="" data-size="normal" data-rawwidth="1449" data-rawheight="759" class="origin_image zh-lightbox-thumb" width="1449" data-original="https://pic2.zhimg.com/v2-3dfb91334f8f425c226f2ad09312ae2d_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1449&#39; height=&#39;759&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1449" data-rawheight="759" class="origin_image zh-lightbox-thumb lazy" width="1449" data-original="https://pic2.zhimg.com/v2-3dfb91334f8f425c226f2ad09312ae2d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-3dfb91334f8f425c226f2ad09312ae2d_b.jpg" data-original-token="v2-3dfb91334f8f425c226f2ad09312ae2d"/></figure><p data-pid="BBtlXS4D">这样B+树构建出来即是一个方便插入和查询的状态了。</p><p data-pid="rAWDBHB3">bulk loading的具体实现可以看看project2的实现，涉及节点分裂和push up。 </p><h3 id="h_504749706_12" data-into-catalog-status="">4.4 聚集索引和非聚集索引</h3><p data-pid="FR79LioY">现在我们已经讨论了如何将记录存储在叶结点中，我们还将讨论如何组织数据页。</p><p data-pid="q8DqrWKC"><code>clustered/unclustered</code>指的是数据页的结构方式。<code>unclustered</code>仅适用于备选方案2或3（叶节点存指针的情况）。</p><p data-pid="MUrKgXms">索引键值的逻辑顺序与索引所服务的表中相应行的物理顺序相同的索引，被称为<b>聚集索引</b>，反之为<b>非聚集索引。</b></p><p data-pid="cgnGnyk0">1.Unclustered 非聚集索引：</p><p data-pid="zvQaV8Xt">在非聚集索引中，数据页是完全混乱的。因此，您可能需要为需要的每个记录读取单独的页。比如：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-e50f4ea3bfa25c7049b3403518a6b345_b.jpg" data-size="normal" data-rawwidth="1365" data-rawheight="1113" class="origin_image zh-lightbox-thumb" width="1365" data-original="https://pic2.zhimg.com/v2-e50f4ea3bfa25c7049b3403518a6b345_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1365&#39; height=&#39;1113&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1365" data-rawheight="1113" class="origin_image zh-lightbox-thumb lazy" width="1365" data-original="https://pic2.zhimg.com/v2-e50f4ea3bfa25c7049b3403518a6b345_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-e50f4ea3bfa25c7049b3403518a6b345_b.jpg" data-original-token="v2-e50f4ea3bfa25c7049b3403518a6b345"/><figcaption>如果我们想读取带有12和24的记录，那么我们必须读取它们所指向的每个数据页，以便检索与这些键相关联的所有记录。</figcaption></figure><p data-pid="cW0mHvRW"><b>2.Clustered 聚集</b></p><p data-pid="KxcMnlLZ">在聚集索引中，数据页在构建B+树的同一索引上排序。这并不意味着数据页是精确排序的，只是键与数据的顺序大致相同。因此，I/O成本的差异来自于缓存，在缓存中，两个带有关闭键的记录很可能位于同一个页，因此可以从缓存的页读取第二个记录。通常只需要读取一页就可以获得所有具有公共/类似键的记录。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-201305fc3f8323fcf8f77b550275e9b2_b.jpg" data-caption="" data-size="normal" data-rawwidth="1815" data-rawheight="676" class="origin_image zh-lightbox-thumb" width="1815" data-original="https://pic3.zhimg.com/v2-201305fc3f8323fcf8f77b550275e9b2_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1815&#39; height=&#39;676&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1815" data-rawheight="676" class="origin_image zh-lightbox-thumb lazy" width="1815" data-original="https://pic3.zhimg.com/v2-201305fc3f8323fcf8f77b550275e9b2_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-201305fc3f8323fcf8f77b550275e9b2_b.jpg" data-original-token="v2-201305fc3f8323fcf8f77b550275e9b2"/></figure><p data-pid="A3xNMqbO">但是随着插入次数增加，会破坏聚集索引的有序性，所以需要额外代节去维护。</p><p data-pid="AtMqMnyt"><b>聚集索引因为与表的元组物理顺序一一对应，所以只有一种排序，即一个数据表只有一个聚集索引。</b></p><p data-pid="MsCJ3W0C">非聚集索引和聚集索引的IO花费对比：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-b23da5d5d2287dc909b78d8e3f2e0aa7_b.jpg" data-caption="" data-size="normal" data-rawwidth="1622" data-rawheight="816" class="origin_image zh-lightbox-thumb" width="1622" data-original="https://pic4.zhimg.com/v2-b23da5d5d2287dc909b78d8e3f2e0aa7_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1622&#39; height=&#39;816&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1622" data-rawheight="816" class="origin_image zh-lightbox-thumb lazy" width="1622" data-original="https://pic4.zhimg.com/v2-b23da5d5d2287dc909b78d8e3f2e0aa7_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-b23da5d5d2287dc909b78d8e3f2e0aa7_b.jpg" data-original-token="v2-b23da5d5d2287dc909b78d8e3f2e0aa7"/></figure><p data-pid="xUKUTuno">IO=8，2 inner node + 3 leaf node + 3 data page</p><p data-pid="bwliWDHS">聚集索引：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-991128099e648a632afba82284c93d1c_b.jpg" data-caption="" data-size="normal" data-rawwidth="1622" data-rawheight="813" class="origin_image zh-lightbox-thumb" width="1622" data-original="https://pic1.zhimg.com/v2-991128099e648a632afba82284c93d1c_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1622&#39; height=&#39;813&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1622" data-rawheight="813" class="origin_image zh-lightbox-thumb lazy" width="1622" data-original="https://pic1.zhimg.com/v2-991128099e648a632afba82284c93d1c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-991128099e648a632afba82284c93d1c_b.jpg" data-original-token="v2-991128099e648a632afba82284c93d1c"/></figure><p data-pid="wEikZ9dS">IO=9，2 inner node + 3 leaf node + 4 data page</p><p data-pid="QJL9Gnnj">在更大的数据中，聚集索引对速度的优化是非常可观的。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-b7566444388b62aeba53b769056c94d3_b.jpg" data-caption="" data-size="normal" data-rawwidth="1218" data-rawheight="219" class="origin_image zh-lightbox-thumb" width="1218" data-original="https://pic4.zhimg.com/v2-b7566444388b62aeba53b769056c94d3_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1218&#39; height=&#39;219&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1218" data-rawheight="219" class="origin_image zh-lightbox-thumb lazy" width="1218" data-original="https://pic4.zhimg.com/v2-b7566444388b62aeba53b769056c94d3_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-b7566444388b62aeba53b769056c94d3_b.jpg" data-original-token="v2-b7566444388b62aeba53b769056c94d3"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-5b7da6dc84fe73d82ceeab09a7c52d64_b.jpg" data-caption="" data-size="normal" data-rawwidth="2126" data-rawheight="1182" class="origin_image zh-lightbox-thumb" width="2126" data-original="https://pic1.zhimg.com/v2-5b7da6dc84fe73d82ceeab09a7c52d64_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2126&#39; height=&#39;1182&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="2126" data-rawheight="1182" class="origin_image zh-lightbox-thumb lazy" width="2126" data-original="https://pic1.zhimg.com/v2-5b7da6dc84fe73d82ceeab09a7c52d64_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-5b7da6dc84fe73d82ceeab09a7c52d64_b.jpg" data-original-token="v2-5b7da6dc84fe73d82ceeab09a7c52d64"/></figure><p class="ztext-empty-paragraph"><br/></p><h2 id="h_504749706_13" data-into-catalog-status="">5.Buffer management</h2><h3 id="h_504749706_14" data-into-catalog-status="">5.0 引入</h3><p data-pid="GVKesuDC">到目前为止，我们已经讨论了数据库管理系统的最底层 磁盘空间管理（disk space management） ，以及如何在基于页面的数据库系统中管理文件和索引(file and index manegement)。现在我们将探讨DBMS上这两个层次之间的接口--缓冲区管理器.</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-925bb28c90d0e51af03ce09418bccbc8_b.jpg" data-caption="" data-size="normal" data-rawwidth="1093" data-rawheight="903" class="origin_image zh-lightbox-thumb" width="1093" data-original="https://pic1.zhimg.com/v2-925bb28c90d0e51af03ce09418bccbc8_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1093&#39; height=&#39;903&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1093" data-rawheight="903" class="origin_image zh-lightbox-thumb lazy" width="1093" data-original="https://pic1.zhimg.com/v2-925bb28c90d0e51af03ce09418bccbc8_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-925bb28c90d0e51af03ce09418bccbc8_b.jpg" data-original-token="v2-925bb28c90d0e51af03ce09418bccbc8"/></figure><p data-pid="cloWruEK">Buffer management is responsible for managing pages in memory and process requests from the file and index manager. Because space on memory is limited, we cannot afford to store all pages in the buffer pool, so the buffer manager should take evition policy (驱逐策略) and choose which pages to evict when space is filled up. When pages are evicted or new pages are read in memory, buffer manager communicates with the disk space manager to perform the required disk operations.</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-9aaae366a1f439e7eb6d27e08737f9b4_b.jpg" data-caption="" data-size="normal" data-rawwidth="1237" data-rawheight="776" class="origin_image zh-lightbox-thumb" width="1237" data-original="https://pic1.zhimg.com/v2-9aaae366a1f439e7eb6d27e08737f9b4_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1237&#39; height=&#39;776&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1237" data-rawheight="776" class="origin_image zh-lightbox-thumb lazy" width="1237" data-original="https://pic1.zhimg.com/v2-9aaae366a1f439e7eb6d27e08737f9b4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-9aaae366a1f439e7eb6d27e08737f9b4_b.jpg" data-original-token="v2-9aaae366a1f439e7eb6d27e08737f9b4"/></figure><h3 id="h_504749706_15" data-into-catalog-status="">5.1 buffer pool </h3><p data-pid="Rei3oCHa">将内存划分成用来存放磁盘中的page的帧(frame), 这块内存就成为了缓冲池。</p><p data-pid="vsCqLyxB">一个缓冲帧恰好可以存一个page。</p><p data-pid="337ttL5A">此外，缓冲池中还有一个表来存放其相关的数据。</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-1238fef5cecbff72636b49aadc80031d_b.jpg" data-caption="" data-size="normal" data-rawwidth="982" data-rawheight="401" class="origin_image zh-lightbox-thumb" width="982" data-original="https://pic2.zhimg.com/v2-1238fef5cecbff72636b49aadc80031d_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;982&#39; height=&#39;401&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="982" data-rawheight="401" class="origin_image zh-lightbox-thumb lazy" width="982" data-original="https://pic2.zhimg.com/v2-1238fef5cecbff72636b49aadc80031d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-1238fef5cecbff72636b49aadc80031d_b.jpg" data-original-token="v2-1238fef5cecbff72636b49aadc80031d"/></figure><ul><li data-pid="pbSnLTOq">frame ID ： 可以看成缓冲池的内存地址</li><li data-pid="jOJYlU2-">page ID ：  对应的frame ID存放的page</li><li data-pid="JXpcEW6-">Dity Bit ： 这个frame 存的page是否被修改过,如果被修改过，驱逐前要写回磁盘对应的page。</li><li data-pid="WqT6-pHo">pin count ： take the number of requestors currently using the page, once the requestor completes its wordloads, it is responsible for telling the buffer manager to dercrese the pin cout.</li></ul><h3 id="h_504749706_16" data-into-catalog-status="">5.2 Handling Page Requests </h3><ul><li data-pid="PU0LMEqZ">如果page在缓冲池中，page ID 对应的pin count += 1, 返回<b>page在缓冲池中的地址</b>。</li><li data-pid="y-qYoYYG">如果page不在缓冲池，而且缓冲池有空余帧，则从disk读取该page并写在空余帧中，pin count += 1, 返回page在缓冲池中的地址。 如果无空余帧，必须先执行一个驱逐策略（驱逐一个dirty page前需要先把它写回磁盘以更新修改信息）。当然，pin count &gt; 0 的page不可以被驱逐。</li><li data-pid="z3Vml4ZM">驱逐策略的好坏是取决于命中率的，即 <b>page hit rate.  page hit </b>指向缓冲池请求一个page时正好存在。命中率越高说明这个驱逐策略越适用。</li></ul><h3 id="h_504749706_17" data-into-catalog-status="">5.3 LRU 算法</h3><p data-pid="1F4vu4oB">LRU算法：当我们需要驱逐某个page以腾出其占据的frame时，我们优先驱逐最早被请求过的page，即：时间戳最小的。 </p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-e63883d2e81e049b2ec47e7ee2cb630c_b.jpg" data-caption="" data-size="normal" data-rawwidth="1454" data-rawheight="554" class="origin_image zh-lightbox-thumb" width="1454" data-original="https://pic1.zhimg.com/v2-e63883d2e81e049b2ec47e7ee2cb630c_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1454&#39; height=&#39;554&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1454" data-rawheight="554" class="origin_image zh-lightbox-thumb lazy" width="1454" data-original="https://pic1.zhimg.com/v2-e63883d2e81e049b2ec47e7ee2cb630c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-e63883d2e81e049b2ec47e7ee2cb630c_b.jpg" data-original-token="v2-e63883d2e81e049b2ec47e7ee2cb630c"/></figure><p data-pid="b5EYHphr">时间戳是指 Last Used的时间，代表刚加入缓冲池的时间 或者 最近一次pin count --的时间。（最近一次被结束请求的时间）</p><p data-pid="qcBzDYLA">总结一下LRU需要实现/维护的信息：</p><ul><li data-pid="MZYPbjdj">需要驱逐时，将pin count=0且last used最小的page驱逐。 由于数据量大，我们希望O(1)删除。</li><li data-pid="7nmhV4Gc">当加入page，如果已满则驱逐，然后加入。O（1）</li><li data-pid="XaVuPz8N">查询缓冲池是否存在某个page，返回其。 O（1）查询。</li><li data-pid="L_45XQLb">每当一个page被结束请求，我们就得更新其last used。</li></ul><p data-pid="UsPGgBGB">我们可以用双向链表来实现LRU，key代表page id，值代表page在缓冲池的address。 删除和插入操作都是O（1），具体定位某个节点利用hash ： page id -&gt; double link list address .</p><p data-pid="LWQS5WTu">我们将最左边的节点视为时间戳最大的，每当有节点被访问完就将它移到最左边，那么需要驱逐的时候就只需要驱逐最右边的节点了。 下面是c++实现：</p><div class="highlight"><pre><code class="language-cpp"><span class="cp">#include</span> <span class="cpf">&lt;bits/stdc++.h&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">LRUCache</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="c1">//定义双向链表的节点
</span><span class="c1"></span>    <span class="k">struct</span> <span class="nc">Node</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">;</span>
        <span class="n">Node</span><span class="o">*</span> <span class="n">left</span><span class="p">,</span> <span class="o">*</span><span class="n">right</span><span class="p">;</span>
        <span class="n">Node</span><span class="p">(</span><span class="kt">int</span> <span class="n">_key</span><span class="p">,</span><span class="kt">int</span> <span class="n">_value</span><span class="p">)</span><span class="o">:</span> <span class="n">key</span><span class="p">(</span><span class="n">_key</span><span class="p">),</span><span class="n">value</span><span class="p">(</span><span class="n">_value</span><span class="p">),</span><span class="n">left</span><span class="p">(</span><span class="nb">NULL</span><span class="p">),</span><span class="n">right</span><span class="p">(</span><span class="nb">NULL</span><span class="p">){}</span>
    <span class="p">}</span><span class="o">*</span><span class="n">L</span><span class="p">,</span> <span class="o">*</span><span class="n">R</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">n</span><span class="p">;</span>
    <span class="n">unordered_map</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="n">Node</span><span class="o">*&gt;</span> <span class="n">hash</span><span class="p">;</span>
    <span class="n">LRUCache</span><span class="p">(</span><span class="kt">int</span> <span class="n">capacity</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">capacity</span><span class="p">;</span>
        <span class="n">L</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
        <span class="n">R</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
        <span class="n">L</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">R</span><span class="p">;</span>
        <span class="n">R</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">L</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">//erase p from doublelink, not delete
</span><span class="c1"></span>    <span class="kt">void</span> <span class="nf">removeNode</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">p</span><span class="o">-&gt;</span><span class="n">left</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
        <span class="n">p</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">//insert p to the head (L-&gt;right)
</span><span class="c1"></span>    <span class="kt">void</span> <span class="nf">insertNode</span><span class="p">(</span><span class="n">Node</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">L</span><span class="o">-&gt;</span><span class="n">right</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
        <span class="n">p</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">L</span><span class="o">-&gt;</span><span class="n">right</span><span class="p">;</span>
        <span class="n">p</span><span class="o">-&gt;</span><span class="n">left</span> <span class="o">=</span> <span class="n">L</span><span class="p">;</span>
        <span class="n">L</span><span class="o">-&gt;</span><span class="n">right</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="nf">get</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">hash</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">key</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">hash</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
            <span class="c1">//remove it to the most left
</span><span class="c1"></span>            <span class="n">removeNode</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
            <span class="n">insertNode</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
            <span class="k">return</span> <span class="n">temp</span><span class="o">-&gt;</span><span class="n">value</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="kt">void</span> <span class="nf">put</span><span class="p">(</span><span class="kt">int</span> <span class="n">key</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// midify
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">hash</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">key</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">Node</span> <span class="o">*</span><span class="n">temp</span> <span class="o">=</span> <span class="n">hash</span><span class="p">[</span><span class="n">key</span><span class="p">];</span>
            <span class="c1">//remove it to the most left
</span><span class="c1"></span>            <span class="n">removeNode</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
            <span class="n">insertNode</span><span class="p">(</span><span class="n">temp</span><span class="p">);</span>
            <span class="n">temp</span><span class="o">-&gt;</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="c1">// add a new page into buffer pool
</span><span class="c1"></span>        <span class="k">else</span> <span class="p">{</span>
            <span class="c1">//if it is full, evict the last recently page, update the hash table
</span><span class="c1"></span>            <span class="k">if</span><span class="p">(</span><span class="n">hash</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">Node</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="n">R</span><span class="o">-&gt;</span><span class="n">left</span><span class="p">;</span>
                <span class="n">removeNode</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
                <span class="n">hash</span><span class="p">.</span><span class="n">erase</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">key</span><span class="p">);</span><span class="c1">//delete if from hash table
</span><span class="c1"></span>                <span class="k">delete</span> <span class="n">p</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="n">Node</span> <span class="o">*</span><span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Node</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
            <span class="n">hash</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
            <span class="n">insertNode</span><span class="p">(</span><span class="n">t</span><span class="p">);</span>
        <span class="p">}</span>

    <span class="p">}</span>
<span class="p">};</span>
</code></pre></div><h3 id="h_504749706_18" data-into-catalog-status="">5.4 Clock算法 </h3><p data-pid="rUdAj2Z6">Clock相当于是LRU的一种改进版本。它把buffer pool看成一个时钟（指针循环扫描的数组）。指针指向下一个可以插入的帧，每个帧额外多一个属性 ： ref bit。 </p><p data-pid="yQDGCroV">插入一个新的page：</p><ul><li data-pid="rcuhXsQH">当指针位置是空，将page写入并将ref bit设为1，然后 p = (p+1)%size 。 </li><li data-pid="5VwfcWtC">否则，指针p持续移动。如果遇到pin cout &gt; 0, 继续移动； 如果遇到pin count == 0 &amp;&amp; ref bit==1,将ref bit设为0；如果遇到pin count == 0 &amp;&amp; ref bit==0， 驱逐它并写入。将ref bit设为1，然后 p = (p+1)%size 。</li></ul><p data-pid="9HDeHvFh">如果查询某个page且击中了，只需要将其ref bit设为1即可。不用移动指针。</p><h3 id="h_504749706_19" data-into-catalog-status="">5.5 MRU算法 </h3><p data-pid="7l9TeG3e">MRU和LRU唯一的不同点就是每次驱逐的不是last recently，而是most recently， 也就是把时间戳最大的驱逐掉了。 </p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-28c52a78e4a137fa4ab4dd03ac5343b9_b.jpg" data-size="normal" data-rawwidth="1706" data-rawheight="610" class="origin_image zh-lightbox-thumb" width="1706" data-original="https://pic2.zhimg.com/v2-28c52a78e4a137fa4ab4dd03ac5343b9_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1706&#39; height=&#39;610&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1706" data-rawheight="610" class="origin_image zh-lightbox-thumb lazy" width="1706" data-original="https://pic2.zhimg.com/v2-28c52a78e4a137fa4ab4dd03ac5343b9_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-28c52a78e4a137fa4ab4dd03ac5343b9_b.jpg" data-original-token="v2-28c52a78e4a137fa4ab4dd03ac5343b9"/><figcaption>所以LRU到底适用啥..没看懂什么是temporal locality.</figcaption></figure><h2 id="h_504749706_20" data-into-catalog-status="">6. sorting</h2><p data-pid="3B-ujpi5">当我们需要对磁盘中的超大文件进行排序，我们无法将它一次项读入内存然后排序，可以采取divide-conquer-merge的方法。先分成独立的page，读进来排序。然后用归并的思路合并有序文件，最终形成一个有序的唯一文件。 （文件是一种存储在外存上的数据结构, 它由大量性质相同的记录组成.）</p><h3 id="h_504749706_21" data-into-catalog-status="">6.1二路归并</h3><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-fba9e60cdb13bc2673a542bf2fe4be20_b.jpg" data-caption="" data-size="normal" data-rawwidth="2266" data-rawheight="1226" class="origin_image zh-lightbox-thumb" width="2266" data-original="https://pic1.zhimg.com/v2-fba9e60cdb13bc2673a542bf2fe4be20_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2266&#39; height=&#39;1226&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="2266" data-rawheight="1226" class="origin_image zh-lightbox-thumb lazy" width="2266" data-original="https://pic1.zhimg.com/v2-fba9e60cdb13bc2673a542bf2fe4be20_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-fba9e60cdb13bc2673a542bf2fe4be20_b.jpg" data-original-token="v2-fba9e60cdb13bc2673a542bf2fe4be20"/></figure><p data-pid="SNbcYNqf">二路归并只需要3个buffer page，（以下简称B），其中两个作为input B， 一个作为output B 。</p><ul><li data-pid="m6PDhjX5">先把N个page依次读进内存排序并写回disk的文件中，最终得到n个各自有序的data page。这一布只用到了1个buffer page 。（cost = one pass）</li><li data-pid="z-JmCkBq">两个B作为input依次读取2个data page，进行归并，如图中 读入[3,4],[2,6]，归并后写入output B，先写入[2,3]，output B 满了，写入disk中的对应的有序文件，再写入 [4,6]，满了，写入disk中的对应的有序文件。重复8/2 = 4次，得到4个sorted 2-pages runs。<b>A sorted run is a sequence of pages that is sorted.</b></li><li data-pid="_kKSQY31">重复这个归并操作，每次都将两个runs 归并成一个。最终得到一个 n-pages runs，写入disk得到最终的一个有序文件。</li></ul><p data-pid="taQcfbTO">I/O cost ：  2N* passes</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-44833a3f5952bab1ab0826c2f1407201_b.jpg" data-size="normal" data-rawwidth="1059" data-rawheight="383" class="origin_image zh-lightbox-thumb" width="1059" data-original="https://pic2.zhimg.com/v2-44833a3f5952bab1ab0826c2f1407201_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1059&#39; height=&#39;383&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1059" data-rawheight="383" class="origin_image zh-lightbox-thumb lazy" width="1059" data-original="https://pic2.zhimg.com/v2-44833a3f5952bab1ab0826c2f1407201_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-44833a3f5952bab1ab0826c2f1407201_b.jpg" data-original-token="v2-44833a3f5952bab1ab0826c2f1407201"/><figcaption>+1 是最开始对n个pages内部排序的那次pass。</figcaption></figure><h3 id="h_504749706_22" data-into-catalog-status="">6.2Full External Merge Sort </h3><p data-pid="yzLTglDD">二路归并只需要用上3个buffer page， 多路归并意味着充分利用全部的buffer pages，假设有 k 个 B，n 个 data pages。</p><ul><li data-pid="tsNhQC55">首先k个B分别读取1个pages到内存（对比一下,二路归并这里只用了1个B），k个page的数据一起排序，然后写到disk成为有序文件。重复 Ceil（N/K）次，最终得到 Ceil（n/k） 个有序文件，每个文件大小是 k-pages。记这里得到的文件为file0 。</li><li data-pid="GLXXVQ-v">利用 k - 1 个B作为input读取 k - 1 个 file0 进行归并 (这里的读取当然不是指一次性读进来，而是类似用k个指针指向每个file0最小的page,边读进来排序边移动指针)，执行完后得到一个大小为 k(k-1) -pages 的文件，记作file1 ，最终得到 Ceil(Ceil（n/k）/ (k-1)) 个file1 。（注意这里结束后我们总共把n个pages传递了两趟，如果n=k*(k-1),那么此时得到的就是最终的唯一一个有序文件）。 </li><li data-pid="p8sXFsk5">重复归并过程，每次归并都将k-1个文件合并成一个，最终得到唯一一个有序文件。 (注意每个sorted runs在disk上都是page连续的文件)</li></ul><p data-pid="YqcCP7tY">I/O cost：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-25873a7cc9cdebf6678cb934d70a87a9_b.jpg" data-caption="" data-size="normal" data-rawwidth="1949" data-rawheight="244" class="origin_image zh-lightbox-thumb" width="1949" data-original="https://pic2.zhimg.com/v2-25873a7cc9cdebf6678cb934d70a87a9_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1949&#39; height=&#39;244&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1949" data-rawheight="244" class="origin_image zh-lightbox-thumb lazy" width="1949" data-original="https://pic2.zhimg.com/v2-25873a7cc9cdebf6678cb934d70a87a9_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-25873a7cc9cdebf6678cb934d70a87a9_b.jpg" data-original-token="v2-25873a7cc9cdebf6678cb934d70a87a9"/></figure><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-3bb477c0b11af57ae4f1e0e413c51a4a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1592" data-rawheight="693" class="origin_image zh-lightbox-thumb" width="1592" data-original="https://pic3.zhimg.com/v2-3bb477c0b11af57ae4f1e0e413c51a4a_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1592&#39; height=&#39;693&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1592" data-rawheight="693" class="origin_image zh-lightbox-thumb lazy" width="1592" data-original="https://pic3.zhimg.com/v2-3bb477c0b11af57ae4f1e0e413c51a4a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-3bb477c0b11af57ae4f1e0e413c51a4a_b.jpg" data-original-token="v2-3bb477c0b11af57ae4f1e0e413c51a4a"/></figure><p data-pid="UWwyln7Y">来个full external merge sort 的例子：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-f3bfe9f2dddd3ca7d974c71b73b9fa38_b.jpg" data-size="normal" data-rawwidth="1679" data-rawheight="939" class="origin_image zh-lightbox-thumb" width="1679" data-original="https://pic1.zhimg.com/v2-f3bfe9f2dddd3ca7d974c71b73b9fa38_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1679&#39; height=&#39;939&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1679" data-rawheight="939" class="origin_image zh-lightbox-thumb lazy" width="1679" data-original="https://pic1.zhimg.com/v2-f3bfe9f2dddd3ca7d974c71b73b9fa38_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-f3bfe9f2dddd3ca7d974c71b73b9fa38_b.jpg" data-original-token="v2-f3bfe9f2dddd3ca7d974c71b73b9fa38"/><figcaption>目标是一个有序的，page连续的文件。</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-60b95e550b051f8d2aa7d1344be8d953_b.jpg" data-size="normal" data-rawwidth="1705" data-rawheight="832" class="origin_image zh-lightbox-thumb" width="1705" data-original="https://pic4.zhimg.com/v2-60b95e550b051f8d2aa7d1344be8d953_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1705&#39; height=&#39;832&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1705" data-rawheight="832" class="origin_image zh-lightbox-thumb lazy" width="1705" data-original="https://pic4.zhimg.com/v2-60b95e550b051f8d2aa7d1344be8d953_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-60b95e550b051f8d2aa7d1344be8d953_b.jpg" data-original-token="v2-60b95e550b051f8d2aa7d1344be8d953"/><figcaption>4个B各读入一个page。用内部排序算法进行排序。</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-f234cc3dc12f93be20417effe8984101_b.jpg" data-caption="" data-size="normal" data-rawwidth="1660" data-rawheight="809" class="origin_image zh-lightbox-thumb" width="1660" data-original="https://pic2.zhimg.com/v2-f234cc3dc12f93be20417effe8984101_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1660&#39; height=&#39;809&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1660" data-rawheight="809" class="origin_image zh-lightbox-thumb lazy" width="1660" data-original="https://pic2.zhimg.com/v2-f234cc3dc12f93be20417effe8984101_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-f234cc3dc12f93be20417effe8984101_b.jpg" data-original-token="v2-f234cc3dc12f93be20417effe8984101"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-15946fd8a92fc377d33421cceb75cbf7_b.jpg" data-size="normal" data-rawwidth="1813" data-rawheight="830" class="origin_image zh-lightbox-thumb" width="1813" data-original="https://pic4.zhimg.com/v2-15946fd8a92fc377d33421cceb75cbf7_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1813&#39; height=&#39;830&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1813" data-rawheight="830" class="origin_image zh-lightbox-thumb lazy" width="1813" data-original="https://pic4.zhimg.com/v2-15946fd8a92fc377d33421cceb75cbf7_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-15946fd8a92fc377d33421cceb75cbf7_b.jpg" data-original-token="v2-15946fd8a92fc377d33421cceb75cbf7"/><figcaption>最终的排序结果写进disk中，是4个连续、有序的page。</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-724d0603d3f7b3f04ad89a889e278e60_b.jpg" data-size="normal" data-rawwidth="1769" data-rawheight="836" class="origin_image zh-lightbox-thumb" width="1769" data-original="https://pic1.zhimg.com/v2-724d0603d3f7b3f04ad89a889e278e60_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1769&#39; height=&#39;836&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1769" data-rawheight="836" class="origin_image zh-lightbox-thumb lazy" width="1769" data-original="https://pic1.zhimg.com/v2-724d0603d3f7b3f04ad89a889e278e60_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-724d0603d3f7b3f04ad89a889e278e60_b.jpg" data-original-token="v2-724d0603d3f7b3f04ad89a889e278e60"/><figcaption>另外4个data page也同样读进来排序。</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-c6f28c1096af6efd22b1889fbf8c5ce1_b.jpg" data-size="normal" data-rawwidth="1775" data-rawheight="902" class="origin_image zh-lightbox-thumb" width="1775" data-original="https://pic2.zhimg.com/v2-c6f28c1096af6efd22b1889fbf8c5ce1_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1775&#39; height=&#39;902&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1775" data-rawheight="902" class="origin_image zh-lightbox-thumb lazy" width="1775" data-original="https://pic2.zhimg.com/v2-c6f28c1096af6efd22b1889fbf8c5ce1_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-c6f28c1096af6efd22b1889fbf8c5ce1_b.jpg" data-original-token="v2-c6f28c1096af6efd22b1889fbf8c5ce1"/><figcaption>两个buffer page来合并得到的两个大小为4page的sorted runs。由于只有两个runs，所以一个B是用不上的。</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-defe8456dd3034178520df7466e2492b_b.jpg" data-caption="" data-size="normal" data-rawwidth="1729" data-rawheight="924" class="origin_image zh-lightbox-thumb" width="1729" data-original="https://pic4.zhimg.com/v2-defe8456dd3034178520df7466e2492b_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1729&#39; height=&#39;924&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1729" data-rawheight="924" class="origin_image zh-lightbox-thumb lazy" width="1729" data-original="https://pic4.zhimg.com/v2-defe8456dd3034178520df7466e2492b_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-defe8456dd3034178520df7466e2492b_b.jpg" data-original-token="v2-defe8456dd3034178520df7466e2492b"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-22a9f44f6dcae11a660efca68c2cebb3_b.jpg" data-caption="" data-size="normal" data-rawwidth="1743" data-rawheight="901" class="origin_image zh-lightbox-thumb" width="1743" data-original="https://pic4.zhimg.com/v2-22a9f44f6dcae11a660efca68c2cebb3_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1743&#39; height=&#39;901&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1743" data-rawheight="901" class="origin_image zh-lightbox-thumb lazy" width="1743" data-original="https://pic4.zhimg.com/v2-22a9f44f6dcae11a660efca68c2cebb3_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-22a9f44f6dcae11a660efca68c2cebb3_b.jpg" data-original-token="v2-22a9f44f6dcae11a660efca68c2cebb3"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-56103cc7c6af1caa46b135e3edb78e8d_b.jpg" data-caption="" data-size="normal" data-rawwidth="1739" data-rawheight="905" class="origin_image zh-lightbox-thumb" width="1739" data-original="https://pic2.zhimg.com/v2-56103cc7c6af1caa46b135e3edb78e8d_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1739&#39; height=&#39;905&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1739" data-rawheight="905" class="origin_image zh-lightbox-thumb lazy" width="1739" data-original="https://pic2.zhimg.com/v2-56103cc7c6af1caa46b135e3edb78e8d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-56103cc7c6af1caa46b135e3edb78e8d_b.jpg" data-original-token="v2-56103cc7c6af1caa46b135e3edb78e8d"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-1d53a45dc0f6cfb282312e4447d331df_b.jpg" data-caption="" data-size="normal" data-rawwidth="1726" data-rawheight="918" class="origin_image zh-lightbox-thumb" width="1726" data-original="https://pic4.zhimg.com/v2-1d53a45dc0f6cfb282312e4447d331df_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1726&#39; height=&#39;918&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1726" data-rawheight="918" class="origin_image zh-lightbox-thumb lazy" width="1726" data-original="https://pic4.zhimg.com/v2-1d53a45dc0f6cfb282312e4447d331df_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-1d53a45dc0f6cfb282312e4447d331df_b.jpg" data-original-token="v2-1d53a45dc0f6cfb282312e4447d331df"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-47322d32199a8308e03b905e7893a4ff_b.jpg" data-caption="" data-size="normal" data-rawwidth="1721" data-rawheight="935" class="origin_image zh-lightbox-thumb" width="1721" data-original="https://pic4.zhimg.com/v2-47322d32199a8308e03b905e7893a4ff_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1721&#39; height=&#39;935&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1721" data-rawheight="935" class="origin_image zh-lightbox-thumb lazy" width="1721" data-original="https://pic4.zhimg.com/v2-47322d32199a8308e03b905e7893a4ff_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-47322d32199a8308e03b905e7893a4ff_b.jpg" data-original-token="v2-47322d32199a8308e03b905e7893a4ff"/></figure><p data-pid="WywwnsVG">每当outpu buffer满了就写入disk， input buffer空了就读入（较小的那个page）。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-aae6e1771aac5b7316577356f39bb192_b.jpg" data-caption="" data-size="normal" data-rawwidth="1755" data-rawheight="938" class="origin_image zh-lightbox-thumb" width="1755" data-original="https://pic3.zhimg.com/v2-aae6e1771aac5b7316577356f39bb192_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1755&#39; height=&#39;938&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1755" data-rawheight="938" class="origin_image zh-lightbox-thumb lazy" width="1755" data-original="https://pic3.zhimg.com/v2-aae6e1771aac5b7316577356f39bb192_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-aae6e1771aac5b7316577356f39bb192_b.jpg" data-original-token="v2-aae6e1771aac5b7316577356f39bb192"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-0b14a6b58077bb1654ce0455e7834c21_b.jpg" data-caption="" data-size="normal" data-rawwidth="1751" data-rawheight="962" class="origin_image zh-lightbox-thumb" width="1751" data-original="https://pic2.zhimg.com/v2-0b14a6b58077bb1654ce0455e7834c21_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1751&#39; height=&#39;962&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1751" data-rawheight="962" class="origin_image zh-lightbox-thumb lazy" width="1751" data-original="https://pic2.zhimg.com/v2-0b14a6b58077bb1654ce0455e7834c21_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-0b14a6b58077bb1654ce0455e7834c21_b.jpg" data-original-token="v2-0b14a6b58077bb1654ce0455e7834c21"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-16285462855dd15ad29b9802f42ca82b_b.jpg" data-caption="" data-size="normal" data-rawwidth="1844" data-rawheight="969" class="origin_image zh-lightbox-thumb" width="1844" data-original="https://pic4.zhimg.com/v2-16285462855dd15ad29b9802f42ca82b_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1844&#39; height=&#39;969&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1844" data-rawheight="969" class="origin_image zh-lightbox-thumb lazy" width="1844" data-original="https://pic4.zhimg.com/v2-16285462855dd15ad29b9802f42ca82b_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-16285462855dd15ad29b9802f42ca82b_b.jpg" data-original-token="v2-16285462855dd15ad29b9802f42ca82b"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-7369046eb6606cff5c134ea26a4bb8bc_b.jpg" data-caption="" data-size="normal" data-rawwidth="1739" data-rawheight="929" class="origin_image zh-lightbox-thumb" width="1739" data-original="https://pic1.zhimg.com/v2-7369046eb6606cff5c134ea26a4bb8bc_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1739&#39; height=&#39;929&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1739" data-rawheight="929" class="origin_image zh-lightbox-thumb lazy" width="1739" data-original="https://pic1.zhimg.com/v2-7369046eb6606cff5c134ea26a4bb8bc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-7369046eb6606cff5c134ea26a4bb8bc_b.jpg" data-original-token="v2-7369046eb6606cff5c134ea26a4bb8bc"/></figure><h2 id="h_504749706_23" data-into-catalog-status="">7. Hashing</h2><h3 id="h_504749706_24" data-into-catalog-status="">7.0 引入 </h3><p data-pid="LZ5zd55R">有时候我们要对数据库中&#34;相似&#34;的值聚集在一起进行操作，但并不关心这些值的顺序，比如 GROUP BY , de-duplication。</p><blockquote data-pid="OXyyFs6O">In a database, grouping like values together is called hashing。</blockquote><p data-pid="IvwV30vm">&#34;like value&#34;的理解：可以是拥有相同key的record；拷贝值。</p><p data-pid="wIlzBsPv">由于我们无法把所有的数据都加载到内存，所以不能一次性对所有数据建hash表并写回磁盘， 我们需要一个 out-of-core hashing algorithm 。 </p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-665109ca84760fe3f93f8fd73e7cf872_b.jpg" data-size="normal" data-rawwidth="1722" data-rawheight="872" class="origin_image zh-lightbox-thumb" width="1722" data-original="https://pic3.zhimg.com/v2-665109ca84760fe3f93f8fd73e7cf872_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1722&#39; height=&#39;872&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1722" data-rawheight="872" class="origin_image zh-lightbox-thumb lazy" width="1722" data-original="https://pic3.zhimg.com/v2-665109ca84760fe3f93f8fd73e7cf872_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-665109ca84760fe3f93f8fd73e7cf872_b.jpg" data-original-token="v2-665109ca84760fe3f93f8fd73e7cf872"/><figcaption>由于无序，范围查找是不行的。</figcaption></figure><p data-pid="53KAtIVx">算法的大致思路：</p><p data-pid="TYMKN4dO">我们现在有一个超大的文件，我们采取divide-conquer策略，通过一个hash函数把大文件分成若干个小文件（小的可以完整读进内存），对每个小文件建hash表，再写回磁盘。 </p><p data-pid="EWm_fdgY">divide部分有个注意点：我们需要保证所有 “相似”的record都分在同一个小文件里面，（相似可以理解为GROUP BY中关键字相同，hash函数值相同）。 </p><ul><li data-pid="uY2urwwi">假设大文件有n个data pages， 我们有B个buffer pages </li><li data-pid="IY35ThFL">divide阶段： 用一个buffer page去逐个读取page，逐条映射record到其余B-1个buffer page， B-1个buffer page对应B-1个哈希值，也就是说最终可以得到B-1个小文件。 写在磁盘中就是B-1个分区，每个分区都是有相同hash值的record。</li><li data-pid="2-gSrTDV">假设B-1个小文件的大小都小于等于B pages （能被内存装下），（如果大于的话需要继续divide下去，并且每次都使用不同的hash函数）， 接着对每个小文件建hash表并写回disk即可。</li></ul><h3 id="h_504749706_25" data-into-catalog-status="">7.1 流程</h3><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-fa88c73e29eec3dd60f843ca4a7df0a6_b.jpg" data-caption="" data-size="normal" data-rawwidth="1706" data-rawheight="921" class="origin_image zh-lightbox-thumb" width="1706" data-original="https://pic3.zhimg.com/v2-fa88c73e29eec3dd60f843ca4a7df0a6_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1706&#39; height=&#39;921&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1706" data-rawheight="921" class="origin_image zh-lightbox-thumb lazy" width="1706" data-original="https://pic3.zhimg.com/v2-fa88c73e29eec3dd60f843ca4a7df0a6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-fa88c73e29eec3dd60f843ca4a7df0a6_b.jpg" data-original-token="v2-fa88c73e29eec3dd60f843ca4a7df0a6"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-80d5cf116333e8923b45f87031b422b4_b.jpg" data-caption="" data-size="normal" data-rawwidth="1773" data-rawheight="990" class="origin_image zh-lightbox-thumb" width="1773" data-original="https://pic1.zhimg.com/v2-80d5cf116333e8923b45f87031b422b4_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1773&#39; height=&#39;990&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1773" data-rawheight="990" class="origin_image zh-lightbox-thumb lazy" width="1773" data-original="https://pic1.zhimg.com/v2-80d5cf116333e8923b45f87031b422b4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-80d5cf116333e8923b45f87031b422b4_b.jpg" data-original-token="v2-80d5cf116333e8923b45f87031b422b4"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-e2c3a966937cf647cc11cb1156531365_b.jpg" data-caption="" data-size="normal" data-rawwidth="1714" data-rawheight="944" class="origin_image zh-lightbox-thumb" width="1714" data-original="https://pic2.zhimg.com/v2-e2c3a966937cf647cc11cb1156531365_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1714&#39; height=&#39;944&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1714" data-rawheight="944" class="origin_image zh-lightbox-thumb lazy" width="1714" data-original="https://pic2.zhimg.com/v2-e2c3a966937cf647cc11cb1156531365_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-e2c3a966937cf647cc11cb1156531365_b.jpg" data-original-token="v2-e2c3a966937cf647cc11cb1156531365"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-4700714ea72d863720e0d0ed32e01224_b.jpg" data-caption="" data-size="normal" data-rawwidth="1732" data-rawheight="939" class="origin_image zh-lightbox-thumb" width="1732" data-original="https://pic1.zhimg.com/v2-4700714ea72d863720e0d0ed32e01224_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1732&#39; height=&#39;939&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1732" data-rawheight="939" class="origin_image zh-lightbox-thumb lazy" width="1732" data-original="https://pic1.zhimg.com/v2-4700714ea72d863720e0d0ed32e01224_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-4700714ea72d863720e0d0ed32e01224_b.jpg" data-original-token="v2-4700714ea72d863720e0d0ed32e01224"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-984116afe8221c23e42084a8f479c8ef_b.jpg" data-caption="" data-size="normal" data-rawwidth="1730" data-rawheight="986" class="origin_image zh-lightbox-thumb" width="1730" data-original="https://pic4.zhimg.com/v2-984116afe8221c23e42084a8f479c8ef_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1730&#39; height=&#39;986&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1730" data-rawheight="986" class="origin_image zh-lightbox-thumb lazy" width="1730" data-original="https://pic4.zhimg.com/v2-984116afe8221c23e42084a8f479c8ef_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-984116afe8221c23e42084a8f479c8ef_b.jpg" data-original-token="v2-984116afe8221c23e42084a8f479c8ef"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-4ef8ea5a9fedda023b4406234cbb1ad1_b.jpg" data-caption="" data-size="normal" data-rawwidth="1753" data-rawheight="965" class="origin_image zh-lightbox-thumb" width="1753" data-original="https://pic2.zhimg.com/v2-4ef8ea5a9fedda023b4406234cbb1ad1_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1753&#39; height=&#39;965&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1753" data-rawheight="965" class="origin_image zh-lightbox-thumb lazy" width="1753" data-original="https://pic2.zhimg.com/v2-4ef8ea5a9fedda023b4406234cbb1ad1_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-4ef8ea5a9fedda023b4406234cbb1ad1_b.jpg" data-original-token="v2-4ef8ea5a9fedda023b4406234cbb1ad1"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-291e2df0022395dbc7129dd0b1a6699c_b.jpg" data-caption="" data-size="normal" data-rawwidth="1546" data-rawheight="971" class="origin_image zh-lightbox-thumb" width="1546" data-original="https://pic1.zhimg.com/v2-291e2df0022395dbc7129dd0b1a6699c_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1546&#39; height=&#39;971&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1546" data-rawheight="971" class="origin_image zh-lightbox-thumb lazy" width="1546" data-original="https://pic1.zhimg.com/v2-291e2df0022395dbc7129dd0b1a6699c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-291e2df0022395dbc7129dd0b1a6699c_b.jpg" data-original-token="v2-291e2df0022395dbc7129dd0b1a6699c"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-ae2864eff987b2a43c6672891ec716fc_b.jpg" data-caption="" data-size="normal" data-rawwidth="1564" data-rawheight="958" class="origin_image zh-lightbox-thumb" width="1564" data-original="https://pic1.zhimg.com/v2-ae2864eff987b2a43c6672891ec716fc_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1564&#39; height=&#39;958&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1564" data-rawheight="958" class="origin_image zh-lightbox-thumb lazy" width="1564" data-original="https://pic1.zhimg.com/v2-ae2864eff987b2a43c6672891ec716fc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-ae2864eff987b2a43c6672891ec716fc_b.jpg" data-original-token="v2-ae2864eff987b2a43c6672891ec716fc"/></figure><p data-pid="S01zYw27">.........  最终所有的record分到了三个不同的分区中。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-3f459ef046a7588b772be9a127cdfff4_b.jpg" data-caption="" data-size="normal" data-rawwidth="1822" data-rawheight="986" class="origin_image zh-lightbox-thumb" width="1822" data-original="https://pic1.zhimg.com/v2-3f459ef046a7588b772be9a127cdfff4_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1822&#39; height=&#39;986&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1822" data-rawheight="986" class="origin_image zh-lightbox-thumb lazy" width="1822" data-original="https://pic1.zhimg.com/v2-3f459ef046a7588b772be9a127cdfff4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-3f459ef046a7588b772be9a127cdfff4_b.jpg" data-original-token="v2-3f459ef046a7588b772be9a127cdfff4"/></figure><p data-pid="-mv2O30e">接下来对每个分区建hash表：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-871ccc0c638675762c855f2407a987d6_b.jpg" data-caption="" data-size="normal" data-rawwidth="1852" data-rawheight="959" class="origin_image zh-lightbox-thumb" width="1852" data-original="https://pic3.zhimg.com/v2-871ccc0c638675762c855f2407a987d6_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1852&#39; height=&#39;959&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1852" data-rawheight="959" class="origin_image zh-lightbox-thumb lazy" width="1852" data-original="https://pic3.zhimg.com/v2-871ccc0c638675762c855f2407a987d6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-871ccc0c638675762c855f2407a987d6_b.jpg" data-original-token="v2-871ccc0c638675762c855f2407a987d6"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-5b66e3d40382180b2a6c8dc464c78515_b.jpg" data-caption="" data-size="normal" data-rawwidth="1414" data-rawheight="954" class="origin_image zh-lightbox-thumb" width="1414" data-original="https://pic2.zhimg.com/v2-5b66e3d40382180b2a6c8dc464c78515_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1414&#39; height=&#39;954&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1414" data-rawheight="954" class="origin_image zh-lightbox-thumb lazy" width="1414" data-original="https://pic2.zhimg.com/v2-5b66e3d40382180b2a6c8dc464c78515_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-5b66e3d40382180b2a6c8dc464c78515_b.jpg" data-original-token="v2-5b66e3d40382180b2a6c8dc464c78515"/></figure><p data-pid="iTuwNzhI">.... </p><p data-pid="yjD2QElT">如果某个分区所有的值都相等，并且大于内存，此时再优秀的hash函数都无法拆分该分区。</p><p data-pid="g2KIF3Eo">所以为了处理这种情况，我们需要检查分区所有record是否都相等，如果是的话可以直接退出算法流程。</p><p data-pid="86kToARC">最终hash得到的结果是，在磁盘中若干个分区， 每个分区的值都是相似的。通过hash函数可以找到record所在的分区。</p><h3 id="h_504749706_26" data-into-catalog-status="">7.2 I/O cost </h3><p data-pid="MY0LQMwu">由于分治过程可能不同的分区需要递归拆分，所以I/O需要针对具体的数据来计算。</p><p data-pid="MU7Vy0Lq">来看几个具体的练习题：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-6c50aa56a89f594b6db8f22dca84306a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1869" data-rawheight="142" class="origin_image zh-lightbox-thumb" width="1869" data-original="https://pic3.zhimg.com/v2-6c50aa56a89f594b6db8f22dca84306a_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1869&#39; height=&#39;142&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1869" data-rawheight="142" class="origin_image zh-lightbox-thumb lazy" width="1869" data-original="https://pic3.zhimg.com/v2-6c50aa56a89f594b6db8f22dca84306a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-6c50aa56a89f594b6db8f22dca84306a_b.jpg" data-original-token="v2-6c50aa56a89f594b6db8f22dca84306a"/></figure><ul><li data-pid="Uyv5gTCV">perfect hash functions 意味着records程度的均分。 </li><li data-pid="D8ociaKA">首先读入,r0=500,  分成了9个分区，每个分区有 ceil(500/9)=56个pages， w=56*9=504， 所以第一次I/O 总次数ret0=500+504=1004 .</li><li data-pid="cDEkQgWV">对大小为56的9个分区继续拆分，r1=504, 拆完后每个分区有 ceil(56/9)=7 个pages， 所以w1=9x9x7=567.ret1=1071</li><li data-pid="nxEgQfo8">对81个大小为7 page的分区建hash表，读、写各一次，ret2=81x7x2=1134 </li><li data-pid="2DZgxNWR">总的IO=1004 + 1071 + 1134 = 3209 </li></ul><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-edbf4467f5086fc698b13dcf6299fb58_b.jpg" data-size="normal" data-rawwidth="1755" data-rawheight="614" class="origin_image zh-lightbox-thumb" width="1755" data-original="https://pic1.zhimg.com/v2-edbf4467f5086fc698b13dcf6299fb58_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1755&#39; height=&#39;614&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1755" data-rawheight="614" class="origin_image zh-lightbox-thumb lazy" width="1755" data-original="https://pic1.zhimg.com/v2-edbf4467f5086fc698b13dcf6299fb58_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-edbf4467f5086fc698b13dcf6299fb58_b.jpg" data-original-token="v2-edbf4467f5086fc698b13dcf6299fb58"/><figcaption>除了第一次外，其余都是perfect hash 。</figcaption></figure><ul><li data-pid="qvw1_TTO">首先r0=100, w0=100</li><li data-pid="zPV2yIKI">对于size =10 page的分区, ret = 10+10=20 </li><li data-pid="fs1AylIf">对于size =20 page的分区, 由于ceil(20/9)=3, 所以 ret = 20 + 3x9 + 2 x 3x9 = 101 </li><li data-pid="aZWGXhKN">对于size =50 page的分区, 由于ceil(50/9)=6, 所以 ret = 50 + 6x9 + 2 x 6x9 = 212</li><li data-pid="2gsnPJPT">ret = 200 + 20 +101x2 + 212 = 634 I/O </li></ul><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-52e0580f4fb7cfd182e2136b8d16eb90_b.jpg" data-caption="" data-size="normal" data-rawwidth="1767" data-rawheight="878" class="origin_image zh-lightbox-thumb" width="1767" data-original="https://pic1.zhimg.com/v2-52e0580f4fb7cfd182e2136b8d16eb90_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1767&#39; height=&#39;878&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1767" data-rawheight="878" class="origin_image zh-lightbox-thumb lazy" width="1767" data-original="https://pic1.zhimg.com/v2-52e0580f4fb7cfd182e2136b8d16eb90_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-52e0580f4fb7cfd182e2136b8d16eb90_b.jpg" data-original-token="v2-52e0580f4fb7cfd182e2136b8d16eb90"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-e12b3f6e415189b2b53b84a6a9d9a84d_b.jpg" data-caption="" data-size="normal" data-rawwidth="1794" data-rawheight="294" class="origin_image zh-lightbox-thumb" width="1794" data-original="https://pic2.zhimg.com/v2-e12b3f6e415189b2b53b84a6a9d9a84d_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1794&#39; height=&#39;294&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1794" data-rawheight="294" class="origin_image zh-lightbox-thumb lazy" width="1794" data-original="https://pic2.zhimg.com/v2-e12b3f6e415189b2b53b84a6a9d9a84d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-e12b3f6e415189b2b53b84a6a9d9a84d_b.jpg" data-original-token="v2-e12b3f6e415189b2b53b84a6a9d9a84d"/></figure><ul><li data-pid="AL-GCCAR">由于允许3次pass， 第一次分成9块分区，第二次把9块分区分成共81块分区，每个大小正好等于10B，所以答案=9^2 * 10=810.</li><li data-pid="Sll-mJun">同样的，允许k次pass的话， 理论上最多可以对一个大小为 B*(B-1)^(K-1) page的文件进行hash 。 </li></ul><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-fd6e2bb25e78b2ee9a8efc7bd39f6f14_b.jpg" data-caption="" data-size="normal" data-rawwidth="1909" data-rawheight="141" class="origin_image zh-lightbox-thumb" width="1909" data-original="https://pic1.zhimg.com/v2-fd6e2bb25e78b2ee9a8efc7bd39f6f14_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1909&#39; height=&#39;141&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1909" data-rawheight="141" class="origin_image zh-lightbox-thumb lazy" width="1909" data-original="https://pic1.zhimg.com/v2-fd6e2bb25e78b2ee9a8efc7bd39f6f14_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-fd6e2bb25e78b2ee9a8efc7bd39f6f14_b.jpg" data-original-token="v2-fd6e2bb25e78b2ee9a8efc7bd39f6f14"/></figure><ul><li data-pid="_QgBHloK">如果不递归地进行分区，也就是只divide一次，那么我们最多可以处理20x19=380个page，所以答案是381 。  </li></ul><h2 id="h_504749706_27" data-into-catalog-status="">8. Joins and Iterators </h2><h3 id="h_504749706_28" data-into-catalog-status="">8.1 Joins introduction </h3><p data-pid="iRXf_4KS">这节会讲数据库查询的算法及其优化。我们先补充一下课中没有提到的数据库优化的一些背景：</p><blockquote data-pid="WsrDfdxb">    数据库优化有2个大方向，<code>数据库调优</code> 和 <code>查询优化技术</code>。其中 <code>数据库调优</code> 主要偏向与对业务的理解，通过架构设计和人工调优或基于经验案例调优的方式进行。这一点不在此课程和讨论的范围内。<br/>    另一个 <code>查询优化技术</code>，是指SQL层面的优化，有别于 <code>数据库调优</code> 式的全局优化，该技术主要包括以下六个分支： <b>查询重用，查询重写规则，查询算法优化，并行查询优化，分布式查询的优化</b>，<b>其他优化。这六个分支，与我们这次课程学习的比较相近的是 <code>查询算法优化</code></b>。<br/>在进行查询优化时有两个阶段，<code>逻辑查询优化</code> 和 <code>物理查询优化</code>。<br/>逻辑查询优化主要解决的问题是：如何找出SQL语句等价的变换形式，使得SQL执行更高效。<br/>物理查询优化主要解决的问题是：<b>比如我们这节课学的在两个表需要连接时，如何连接是最优的。</b>和其他我们需要介绍的。<br/>所以我们这节课学的是物理查询优化中的一种，<code>两表连接算法</code>，除了这些还有 <code>单表扫描算法</code>、<code>多表连接算法</code>、<code>索引优化</code>，等。</blockquote><p data-pid="E_jWr5zM"> ●<b>A join is: taking one relation, and matching each tuple with tuples from another relation</b></p><p data-pid="DgE02L9h">●<b>The join condition/predicate determines what rows in the other relation match to a row in the first relation 。</b></p><p data-pid="Bl3iioom">讲具体的join算法前，我们先规定：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-43dc32404dba1a6a2e91abda069520dc_b.jpg" data-caption="" data-size="normal" data-rawwidth="1706" data-rawheight="734" class="origin_image zh-lightbox-thumb" width="1706" data-original="https://pic1.zhimg.com/v2-43dc32404dba1a6a2e91abda069520dc_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1706&#39; height=&#39;734&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1706" data-rawheight="734" class="origin_image zh-lightbox-thumb lazy" width="1706" data-original="https://pic1.zhimg.com/v2-43dc32404dba1a6a2e91abda069520dc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-43dc32404dba1a6a2e91abda069520dc_b.jpg" data-original-token="v2-43dc32404dba1a6a2e91abda069520dc"/></figure><h3 id="h_504749706_29" data-into-catalog-status="">8.2 Simple Nested Loop Join (SNLJ)</h3><p data-pid="QWrPoQeK">最朴素的想法，对于左表每条record ， 都去右表全体record扫描一遍，记录matching result。 </p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-33135052c40d3c88f138e1642f43ce8a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1681" data-rawheight="424" class="origin_image zh-lightbox-thumb" width="1681" data-original="https://pic3.zhimg.com/v2-33135052c40d3c88f138e1642f43ce8a_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1681&#39; height=&#39;424&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1681" data-rawheight="424" class="origin_image zh-lightbox-thumb lazy" width="1681" data-original="https://pic3.zhimg.com/v2-33135052c40d3c88f138e1642f43ce8a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-33135052c40d3c88f138e1642f43ce8a_b.jpg" data-original-token="v2-33135052c40d3c88f138e1642f43ce8a"/></figure><p data-pid="g39z1Lqz"><b>COST = [R] + |R| * [s] </b></p><h3 id="h_504749706_30" data-into-catalog-status="">8.3 Page Nested Loop Join (PNLJ) </h3><p data-pid="-6RdCLXv">遍历左表的一个page， 对于每个左表page，遍历右表的每个page依次读进buffer，找到这两个page的匹配record。 </p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-b04126d7bc6b6aee4daa5b443cfffec9_b.jpg" data-caption="" data-size="normal" data-rawwidth="1581" data-rawheight="602" class="origin_image zh-lightbox-thumb" width="1581" data-original="https://pic2.zhimg.com/v2-b04126d7bc6b6aee4daa5b443cfffec9_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1581&#39; height=&#39;602&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1581" data-rawheight="602" class="origin_image zh-lightbox-thumb lazy" width="1581" data-original="https://pic2.zhimg.com/v2-b04126d7bc6b6aee4daa5b443cfffec9_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-b04126d7bc6b6aee4daa5b443cfffec9_b.jpg" data-original-token="v2-b04126d7bc6b6aee4daa5b443cfffec9"/></figure><p data-pid="AyiNBbbN"><b>COST = [R] + [R][S] </b><br/></p><h3 id="h_504749706_31" data-into-catalog-status="">8.3 Block Nested Loop Join (BNLJ) </h3><p data-pid="806znbl4">这是对 PNLJ的一种改进，我们可以充分利用全部的buffer page，留出2个 buffer page作为S page的读入 与output page。 每次读入 B-2个 R表page，然后遍历S表的page。 </p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-dc8218683e6956cc5ceec89e693e4125_b.jpg" data-caption="" data-size="normal" data-rawwidth="1737" data-rawheight="555" class="origin_image zh-lightbox-thumb" width="1737" data-original="https://pic2.zhimg.com/v2-dc8218683e6956cc5ceec89e693e4125_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1737&#39; height=&#39;555&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1737" data-rawheight="555" class="origin_image zh-lightbox-thumb lazy" width="1737" data-original="https://pic2.zhimg.com/v2-dc8218683e6956cc5ceec89e693e4125_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-dc8218683e6956cc5ceec89e693e4125_b.jpg" data-original-token="v2-dc8218683e6956cc5ceec89e693e4125"/></figure><p data-pid="6uiPVeoj">COST =</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-f82fa9c584ea63eae8ffa6014ccdfe00_b.jpg" data-caption="" data-size="normal" data-rawwidth="1352" data-rawheight="288" class="origin_image zh-lightbox-thumb" width="1352" data-original="https://pic1.zhimg.com/v2-f82fa9c584ea63eae8ffa6014ccdfe00_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1352&#39; height=&#39;288&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1352" data-rawheight="288" class="origin_image zh-lightbox-thumb lazy" width="1352" data-original="https://pic1.zhimg.com/v2-f82fa9c584ea63eae8ffa6014ccdfe00_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-f82fa9c584ea63eae8ffa6014ccdfe00_b.jpg" data-original-token="v2-f82fa9c584ea63eae8ffa6014ccdfe00"/></figure><h3 id="h_504749706_32" data-into-catalog-status=""> 8.4 Index Nested Loop Join (INLJ) </h3><p data-pid="XsMD5x65">如果我们对其中一个表（比如S表）已经建了索引（比如B+树），（能高效查找key对应的record），那么我们可以遍历R表的每个record，然后通过索引找到S表中匹配的record。 </p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-785ae68ed74ef40433db38ec1995614d_b.jpg" data-caption="" data-size="normal" data-rawwidth="994" data-rawheight="218" class="origin_image zh-lightbox-thumb" width="994" data-original="https://pic2.zhimg.com/v2-785ae68ed74ef40433db38ec1995614d_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;994&#39; height=&#39;218&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="994" data-rawheight="218" class="origin_image zh-lightbox-thumb lazy" width="994" data-original="https://pic2.zhimg.com/v2-785ae68ed74ef40433db38ec1995614d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-785ae68ed74ef40433db38ec1995614d_b.jpg" data-original-token="v2-785ae68ed74ef40433db38ec1995614d"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="vWZjjDD0">COST = |R| * （cost for finding matching tuples in S）</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-d83e70cafe1c9b15632dd08129d1baaa_b.jpg" data-caption="" data-size="normal" data-rawwidth="1786" data-rawheight="635" class="origin_image zh-lightbox-thumb" width="1786" data-original="https://pic3.zhimg.com/v2-d83e70cafe1c9b15632dd08129d1baaa_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1786&#39; height=&#39;635&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1786" data-rawheight="635" class="origin_image zh-lightbox-thumb lazy" width="1786" data-original="https://pic3.zhimg.com/v2-d83e70cafe1c9b15632dd08129d1baaa_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-d83e70cafe1c9b15632dd08129d1baaa_b.jpg" data-original-token="v2-d83e70cafe1c9b15632dd08129d1baaa"/></figure><p data-pid="wbGC9QuD">这里的IO计算需要具体的情况，我们看几个例题：</p><p data-pid="nM_xE5GM"><b>1.</b></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-a5ed66a371be3318afb6ed764de3b9dc_b.jpg" data-caption="" data-size="normal" data-rawwidth="1767" data-rawheight="810" class="origin_image zh-lightbox-thumb" width="1767" data-original="https://pic1.zhimg.com/v2-a5ed66a371be3318afb6ed764de3b9dc_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1767&#39; height=&#39;810&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1767" data-rawheight="810" class="origin_image zh-lightbox-thumb lazy" width="1767" data-original="https://pic1.zhimg.com/v2-a5ed66a371be3318afb6ed764de3b9dc_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-a5ed66a371be3318afb6ed764de3b9dc_b.jpg" data-original-token="v2-a5ed66a371be3318afb6ed764de3b9dc"/></figure><p data-pid="RCYEoacA">以company_id为key对C N表都各自建了B+树，而且是非聚集索引。 </p><p data-pid="mZPO6-EN">C表的每个record，在N表中都对应了4个tuples，由于是非聚集索引，所以4个tuples需要看成分散在4个不用的page中。 在B+树中搜索的cost = 2+4 （高度是1，4个page） 。 </p><p data-pid="4QOERGFs">C join N的代节：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-1fbde39482c200f7f8639bd7e5b8ca18_b.jpg" data-caption="" data-size="normal" data-rawwidth="719" data-rawheight="189" class="origin_image zh-lightbox-thumb" width="719" data-original="https://pic1.zhimg.com/v2-1fbde39482c200f7f8639bd7e5b8ca18_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;719&#39; height=&#39;189&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="719" data-rawheight="189" class="origin_image zh-lightbox-thumb lazy" width="719" data-original="https://pic1.zhimg.com/v2-1fbde39482c200f7f8639bd7e5b8ca18_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-1fbde39482c200f7f8639bd7e5b8ca18_b.jpg" data-original-token="v2-1fbde39482c200f7f8639bd7e5b8ca18"/></figure><p data-pid="52V7jx_Z">同理，N join C的代节： </p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-37c556bb7587e151c32a6d287a1819d7_b.jpg" data-caption="" data-size="normal" data-rawwidth="777" data-rawheight="206" class="origin_image zh-lightbox-thumb" width="777" data-original="https://pic4.zhimg.com/v2-37c556bb7587e151c32a6d287a1819d7_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;777&#39; height=&#39;206&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="777" data-rawheight="206" class="origin_image zh-lightbox-thumb lazy" width="777" data-original="https://pic4.zhimg.com/v2-37c556bb7587e151c32a6d287a1819d7_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-37c556bb7587e151c32a6d287a1819d7_b.jpg" data-original-token="v2-37c556bb7587e151c32a6d287a1819d7"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-79439610d9605134b3cfe847ee9a576d_b.jpg" data-caption="" data-size="normal" data-rawwidth="829" data-rawheight="95" class="origin_image zh-lightbox-thumb" width="829" data-original="https://pic2.zhimg.com/v2-79439610d9605134b3cfe847ee9a576d_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;829&#39; height=&#39;95&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="829" data-rawheight="95" class="origin_image zh-lightbox-thumb lazy" width="829" data-original="https://pic2.zhimg.com/v2-79439610d9605134b3cfe847ee9a576d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-79439610d9605134b3cfe847ee9a576d_b.jpg" data-original-token="v2-79439610d9605134b3cfe847ee9a576d"/></figure><p data-pid="Jscyir7c">2. </p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-ae92d00b5fffb66c86fafaee0226f41d_b.jpg" data-caption="" data-size="normal" data-rawwidth="1919" data-rawheight="637" class="origin_image zh-lightbox-thumb" width="1919" data-original="https://pic2.zhimg.com/v2-ae92d00b5fffb66c86fafaee0226f41d_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1919&#39; height=&#39;637&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1919" data-rawheight="637" class="origin_image zh-lightbox-thumb lazy" width="1919" data-original="https://pic2.zhimg.com/v2-ae92d00b5fffb66c86fafaee0226f41d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-ae92d00b5fffb66c86fafaee0226f41d_b.jpg" data-original-token="v2-ae92d00b5fffb66c86fafaee0226f41d"/></figure><p data-pid="-q37BIHe">这题需要注意的是， <span class="ztext-math" data-eeimg="1" data-tex="\rho_R">\rho_R</span> = 10, 而S中的每个record可以匹配R表中的20个tuples ，R表是聚集索引，所以20个tuples会在2个page上。  </p><p data-pid="82s6C8b_">其余计算就没啥了。</p><h3 id="h_504749706_33" data-into-catalog-status="">8.5 Sort-Merge Join (SMJ)</h3><p data-pid="FQ0wGgx4">有时候我们可以在联表前先对两个表按某些列（联表所需的列）进行排序，然后再通过双指针算法进行tuple-match，最后得到的结果是一个有序的表。  </p><p data-pid="k5HgjsOw">SMJ有两个步骤：</p><ol><li data-pid="qWToKfPB">sort R , sort S on specified key </li><li data-pid="LuC8ocqE">merge matching tuples in R and S together  </li></ol><p data-pid="b1m8STd0">伪代码描述双指针merge过程：</p><div class="highlight"><pre><code class="language-java"><span class="k">while</span> <span class="n">not</span> <span class="n">done</span> <span class="o">{</span>
  <span class="c1">//调整r s指针，找到r==s，第一处s
</span><span class="c1"></span>  <span class="k">while</span> <span class="o">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span> <span class="n">advance</span> <span class="n">r</span> <span class="o">}</span>
  <span class="k">while</span> <span class="o">(</span><span class="n">r</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span> <span class="n">advance</span> <span class="n">s</span> <span class="o">}</span>
 
  <span class="n">mark</span> <span class="n">s</span> <span class="c1">// save start of “block”
</span><span class="c1"></span>  <span class="k">while</span> <span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Outer loop over r
</span><span class="c1"></span>    <span class="k">while</span> <span class="o">(</span><span class="n">r</span> <span class="o">==</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
      <span class="c1">// Inner loop over s
</span><span class="c1"></span>      <span class="n">yield</span> <span class="o">&lt;</span><span class="n">r</span><span class="o">,</span> <span class="n">s</span><span class="o">&gt;</span>
      <span class="n">advance</span> <span class="n">s</span>
    <span class="o">}</span>
    <span class="n">reset</span> <span class="n">s</span> <span class="n">to</span> <span class="n">mark</span> <span class="c1">//s回到第一处匹配的位置，以防止下一个r和当前r相等
</span><span class="c1"></span>    <span class="n">advance</span> <span class="n">r</span>    
  <span class="o">}</span> 
<span class="o">}</span>
</code></pre></div><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-d791bbdbe63fea832505187194779fd2_b.jpg" data-size="normal" data-rawwidth="902" data-rawheight="470" class="origin_image zh-lightbox-thumb" width="902" data-original="https://pic3.zhimg.com/v2-d791bbdbe63fea832505187194779fd2_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;902&#39; height=&#39;470&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="902" data-rawheight="470" class="origin_image zh-lightbox-thumb lazy" width="902" data-original="https://pic3.zhimg.com/v2-d791bbdbe63fea832505187194779fd2_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-d791bbdbe63fea832505187194779fd2_b.jpg" data-original-token="v2-d791bbdbe63fea832505187194779fd2"/><figcaption>左R，右S</figcaption></figure><p data-pid="HM5tf9k-">对于R表的每个tuple，我们要在S表中找到一段与之sid相等的区间。 </p><p data-pid="z15h6zy7">对于指针r，我们找打一个相等的s位置，需要记录下s目前的位置mark，然后s不断往后找到所有sid相同的row，找完后让r++，s回到mark，因为r中可能存在相同行，所以要回来重复找。 理论上这会导致时间复杂度退化到|R|*|S|, 但是现实中不会出现这种情况。</p><p data-pid="WVT27lUG">当R表遍历结束，退出算法流程。</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-1a01efc14000e41b447bfe7aacaa200a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1850" data-rawheight="999" class="origin_image zh-lightbox-thumb" width="1850" data-original="https://pic3.zhimg.com/v2-1a01efc14000e41b447bfe7aacaa200a_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1850&#39; height=&#39;999&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1850" data-rawheight="999" class="origin_image zh-lightbox-thumb lazy" width="1850" data-original="https://pic3.zhimg.com/v2-1a01efc14000e41b447bfe7aacaa200a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-1a01efc14000e41b447bfe7aacaa200a_b.jpg" data-original-token="v2-1a01efc14000e41b447bfe7aacaa200a"/></figure><p data-pid="c2ezlizv">一般来说，COST = (cost for sort R) + (cost for sort S) + |R| + |S| ，我们假设重复项很少，不会超过1 page的容量。</p><p class="ztext-empty-paragraph"><br/></p><p class="ztext-empty-paragraph"><br/></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="BJX7WiVb"><b>优化: 对于external merge sort，如果我们能够将倒数第二个runs保存在缓冲区，并可以留出1个page用于output，那么我们此时可以一遍进行最后一次归并，一边进行SMJ算法。 可以省出 2* ([R]+[S])的I/O.</b></p><p data-pid="XuRqngfv"><b>例题：</b></p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-c3c3ede6a0ca7b3c6d7ad2e54f751ad5_b.jpg" data-caption="" data-size="normal" data-rawwidth="1811" data-rawheight="394" class="origin_image zh-lightbox-thumb" width="1811" data-original="https://pic2.zhimg.com/v2-c3c3ede6a0ca7b3c6d7ad2e54f751ad5_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1811&#39; height=&#39;394&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1811" data-rawheight="394" class="origin_image zh-lightbox-thumb lazy" width="1811" data-original="https://pic2.zhimg.com/v2-c3c3ede6a0ca7b3c6d7ad2e54f751ad5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-c3c3ede6a0ca7b3c6d7ad2e54f751ad5_b.jpg" data-original-token="v2-c3c3ede6a0ca7b3c6d7ad2e54f751ad5"/></figure><ul><li data-pid="58a-Z-i0">unoptimize : sort R: 200+200=400, sort S:100+100=200, ans = 400+200+100+50 = 750</li><li data-pid="0Cvgma9s">optimieze: </li></ul><p data-pid="z_1lufmY">第一次merge R并写回disk：200， 第一次merge S并写回disk：100</p><p data-pid="vHuKa7K_">发现此时<b>runs of R=5, runs of S=3, 3+5 &lt;= 19,</b>可以同时做最后一次merge了，所以SMJ和最后merge sort同时进行， cost=100+50 .</p><p data-pid="FZDxolwr"><b>ans=200+100+150=450 </b></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-f7ddbaefc161c06af779836b6a6be70e_b.jpg" data-caption="" data-size="normal" data-rawwidth="1874" data-rawheight="980" class="origin_image zh-lightbox-thumb" width="1874" data-original="https://pic3.zhimg.com/v2-f7ddbaefc161c06af779836b6a6be70e_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1874&#39; height=&#39;980&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1874" data-rawheight="980" class="origin_image zh-lightbox-thumb lazy" width="1874" data-original="https://pic3.zhimg.com/v2-f7ddbaefc161c06af779836b6a6be70e_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-f7ddbaefc161c06af779836b6a6be70e_b.jpg" data-original-token="v2-f7ddbaefc161c06af779836b6a6be70e"/></figure><h3 id="h_504749706_34" data-into-catalog-status="">8.6 Grace Hash join </h3><p data-pid="8hBcHQMj">和SMJ一样，我们可以换一种预处理方式，建hash table。假设R表映射得到B-1个分区，每个分区构都&lt;=B-2 pages, 我们可以将R表每个分区各自读进内存建一个 in-memory hash table, 然后将S表按page读入并探测。 </p><p data-pid="TTFK-X9K">但是现实中R S表往往都很大，不能直接读进来构造in-memory table, 此时我们仍可以采取分区的方式，将R S不断分区成更小的表(需要保证所有可能匹配的record都在同一个分区)，直到满足条件。 具体做法：</p><ul><li data-pid="PcnDTSmS">我们将R S用<b>同一hash函数</b>进行分区，得到B-1个 partition ，每个partition由两个表组成Ri，Si，是R S经过hash函数得到的子表。（这里很关键，我们举例说明一下，假设联表条件是R.id=S.id, hash函数可以是 id&lt;=10,to partition 1; 11&lt;=id&lt;=20; to partition 2 ,<b>这样可以保证id可能相等的tuple都分在同一分区</b>）</li><li data-pid="RVdlJ0HU">对于每个分区，如果存在一个表 &lt;= B-2, 那么就可以读进来建hash表，然后把另一个表按page读进来匹配。由于每个分区都是由两个表组成，所以可以采取递归。 </li></ul><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-ab0edc4559a5a23fe60e0af391de4ae6_b.jpg" data-caption="" data-size="normal" data-rawwidth="1756" data-rawheight="958" class="origin_image zh-lightbox-thumb" width="1756" data-original="https://pic3.zhimg.com/v2-ab0edc4559a5a23fe60e0af391de4ae6_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1756&#39; height=&#39;958&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1756" data-rawheight="958" class="origin_image zh-lightbox-thumb lazy" width="1756" data-original="https://pic3.zhimg.com/v2-ab0edc4559a5a23fe60e0af391de4ae6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-ab0edc4559a5a23fe60e0af391de4ae6_b.jpg" data-original-token="v2-ab0edc4559a5a23fe60e0af391de4ae6"/></figure><h2 id="h_504749706_35" data-into-catalog-status="">9. Relational Algebra </h2><h3 id="h_504749706_36" data-into-catalog-status="">9.1 Motivation</h3><p data-pid="YTw3w2QI">前面我们接触的SQL是一种声明式语言，对查询者是很友好的，但是对于数据库设计者来说，需要另一种更具有表达功能的语言，<b>For this we will use Relational Algebra, a procedural programming language (meaning that the query specifies exactly what operators to use and in what order).</b></p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-a68e4d79663b6c944ad8a8dab016a17b_b.jpg" data-size="normal" data-rawwidth="1741" data-rawheight="700" class="origin_image zh-lightbox-thumb" width="1741" data-original="https://pic4.zhimg.com/v2-a68e4d79663b6c944ad8a8dab016a17b_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1741&#39; height=&#39;700&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1741" data-rawheight="700" class="origin_image zh-lightbox-thumb lazy" width="1741" data-original="https://pic4.zhimg.com/v2-a68e4d79663b6c944ad8a8dab016a17b_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-a68e4d79663b6c944ad8a8dab016a17b_b.jpg" data-original-token="v2-a68e4d79663b6c944ad8a8dab016a17b"/><figcaption>realtion : 一个关系表</figcaption></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-101b5570e96da445bd05b0f83b161685_b.jpg" data-caption="" data-size="normal" data-rawwidth="1287" data-rawheight="1017" class="origin_image zh-lightbox-thumb" width="1287" data-original="https://pic2.zhimg.com/v2-101b5570e96da445bd05b0f83b161685_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1287&#39; height=&#39;1017&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1287" data-rawheight="1017" class="origin_image zh-lightbox-thumb lazy" width="1287" data-original="https://pic2.zhimg.com/v2-101b5570e96da445bd05b0f83b161685_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-101b5570e96da445bd05b0f83b161685_b.jpg" data-original-token="v2-101b5570e96da445bd05b0f83b161685"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-f5b332e1b277eb35232f3718610a155b_b.jpg" data-caption="" data-size="normal" data-rawwidth="1414" data-rawheight="998" class="origin_image zh-lightbox-thumb" width="1414" data-original="https://pic4.zhimg.com/v2-f5b332e1b277eb35232f3718610a155b_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1414&#39; height=&#39;998&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1414" data-rawheight="998" class="origin_image zh-lightbox-thumb lazy" width="1414" data-original="https://pic4.zhimg.com/v2-f5b332e1b277eb35232f3718610a155b_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-f5b332e1b277eb35232f3718610a155b_b.jpg" data-original-token="v2-f5b332e1b277eb35232f3718610a155b"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-a81c029ed770062c36b26ee0614d8335_b.jpg" data-caption="" data-size="normal" data-rawwidth="1745" data-rawheight="1023" class="origin_image zh-lightbox-thumb" width="1745" data-original="https://pic2.zhimg.com/v2-a81c029ed770062c36b26ee0614d8335_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1745&#39; height=&#39;1023&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1745" data-rawheight="1023" class="origin_image zh-lightbox-thumb lazy" width="1745" data-original="https://pic2.zhimg.com/v2-a81c029ed770062c36b26ee0614d8335_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-a81c029ed770062c36b26ee0614d8335_b.jpg" data-original-token="v2-a81c029ed770062c36b26ee0614d8335"/></figure><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-ddf11e3b2e07879df06d939740419522_b.jpg" data-caption="" data-size="normal" data-rawwidth="1536" data-rawheight="1025" class="origin_image zh-lightbox-thumb" width="1536" data-original="https://pic3.zhimg.com/v2-ddf11e3b2e07879df06d939740419522_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1536&#39; height=&#39;1025&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1536" data-rawheight="1025" class="origin_image zh-lightbox-thumb lazy" width="1536" data-original="https://pic3.zhimg.com/v2-ddf11e3b2e07879df06d939740419522_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-ddf11e3b2e07879df06d939740419522_b.jpg" data-original-token="v2-ddf11e3b2e07879df06d939740419522"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-2913fe41e04c07aba96bd832dd30a3b1_b.jpg" data-caption="" data-size="normal" data-rawwidth="1768" data-rawheight="977" class="origin_image zh-lightbox-thumb" width="1768" data-original="https://pic2.zhimg.com/v2-2913fe41e04c07aba96bd832dd30a3b1_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1768&#39; height=&#39;977&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1768" data-rawheight="977" class="origin_image zh-lightbox-thumb lazy" width="1768" data-original="https://pic2.zhimg.com/v2-2913fe41e04c07aba96bd832dd30a3b1_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-2913fe41e04c07aba96bd832dd30a3b1_b.jpg" data-original-token="v2-2913fe41e04c07aba96bd832dd30a3b1"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-03a15491031378bb4d49c0234f3ebff5_b.jpg" data-caption="" data-size="normal" data-rawwidth="1808" data-rawheight="846" class="origin_image zh-lightbox-thumb" width="1808" data-original="https://pic2.zhimg.com/v2-03a15491031378bb4d49c0234f3ebff5_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1808&#39; height=&#39;846&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1808" data-rawheight="846" class="origin_image zh-lightbox-thumb lazy" width="1808" data-original="https://pic2.zhimg.com/v2-03a15491031378bb4d49c0234f3ebff5_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-03a15491031378bb4d49c0234f3ebff5_b.jpg" data-original-token="v2-03a15491031378bb4d49c0234f3ebff5"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-e6b74953a651c9ff43236e19e0f67555_b.jpg" data-caption="" data-size="normal" data-rawwidth="1885" data-rawheight="887" class="origin_image zh-lightbox-thumb" width="1885" data-original="https://pic2.zhimg.com/v2-e6b74953a651c9ff43236e19e0f67555_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1885&#39; height=&#39;887&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1885" data-rawheight="887" class="origin_image zh-lightbox-thumb lazy" width="1885" data-original="https://pic2.zhimg.com/v2-e6b74953a651c9ff43236e19e0f67555_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-e6b74953a651c9ff43236e19e0f67555_b.jpg" data-original-token="v2-e6b74953a651c9ff43236e19e0f67555"/></figure><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-d5c315eee06825c8a8ccae45eee160d2_b.jpg" data-size="normal" data-rawwidth="1879" data-rawheight="794" class="origin_image zh-lightbox-thumb" width="1879" data-original="https://pic3.zhimg.com/v2-d5c315eee06825c8a8ccae45eee160d2_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1879&#39; height=&#39;794&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1879" data-rawheight="794" class="origin_image zh-lightbox-thumb lazy" width="1879" data-original="https://pic3.zhimg.com/v2-d5c315eee06825c8a8ccae45eee160d2_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-d5c315eee06825c8a8ccae45eee160d2_b.jpg" data-original-token="v2-d5c315eee06825c8a8ccae45eee160d2"/><figcaption>Intersection is a compound operator. </figcaption></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-e3d44f4783e53431ce726043eb1ca4c8_b.jpg" data-caption="" data-size="normal" data-rawwidth="1264" data-rawheight="401" class="origin_image zh-lightbox-thumb" width="1264" data-original="https://pic1.zhimg.com/v2-e3d44f4783e53431ce726043eb1ca4c8_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1264&#39; height=&#39;401&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1264" data-rawheight="401" class="origin_image zh-lightbox-thumb lazy" width="1264" data-original="https://pic1.zhimg.com/v2-e3d44f4783e53431ce726043eb1ca4c8_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-e3d44f4783e53431ce726043eb1ca4c8_b.jpg" data-original-token="v2-e3d44f4783e53431ce726043eb1ca4c8"/></figure><p data-pid="Y4hAtWEA">我们应该尽量避免笛卡尔积，因此需要用优秀的join算法(这里指逻辑层面)。</p><p class="ztext-empty-paragraph"><br/></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-11a9ace44db01620703002d148558da0_b.jpg" data-caption="" data-size="normal" data-rawwidth="1683" data-rawheight="714" class="origin_image zh-lightbox-thumb" width="1683" data-original="https://pic1.zhimg.com/v2-11a9ace44db01620703002d148558da0_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1683&#39; height=&#39;714&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1683" data-rawheight="714" class="origin_image zh-lightbox-thumb lazy" width="1683" data-original="https://pic1.zhimg.com/v2-11a9ace44db01620703002d148558da0_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-11a9ace44db01620703002d148558da0_b.jpg" data-original-token="v2-11a9ace44db01620703002d148558da0"/></figure><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-b83b5d44823855c140719ba26d0c6ff3_b.jpg" data-caption="" data-size="normal" data-rawwidth="1946" data-rawheight="936" class="origin_image zh-lightbox-thumb" width="1946" data-original="https://pic4.zhimg.com/v2-b83b5d44823855c140719ba26d0c6ff3_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1946&#39; height=&#39;936&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1946" data-rawheight="936" class="origin_image zh-lightbox-thumb lazy" width="1946" data-original="https://pic4.zhimg.com/v2-b83b5d44823855c140719ba26d0c6ff3_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-b83b5d44823855c140719ba26d0c6ff3_b.jpg" data-original-token="v2-b83b5d44823855c140719ba26d0c6ff3"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-fc8e772398c3540f7f748ab31f5c6839_b.jpg" data-caption="" data-size="normal" data-rawwidth="1938" data-rawheight="664" class="origin_image zh-lightbox-thumb" width="1938" data-original="https://pic2.zhimg.com/v2-fc8e772398c3540f7f748ab31f5c6839_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1938&#39; height=&#39;664&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1938" data-rawheight="664" class="origin_image zh-lightbox-thumb lazy" width="1938" data-original="https://pic2.zhimg.com/v2-fc8e772398c3540f7f748ab31f5c6839_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-fc8e772398c3540f7f748ab31f5c6839_b.jpg" data-original-token="v2-fc8e772398c3540f7f748ab31f5c6839"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-5df3bccae5a8c73f6a599119be6a2e6c_b.jpg" data-caption="" data-size="normal" data-rawwidth="1851" data-rawheight="929" class="origin_image zh-lightbox-thumb" width="1851" data-original="https://pic1.zhimg.com/v2-5df3bccae5a8c73f6a599119be6a2e6c_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1851&#39; height=&#39;929&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1851" data-rawheight="929" class="origin_image zh-lightbox-thumb lazy" width="1851" data-original="https://pic1.zhimg.com/v2-5df3bccae5a8c73f6a599119be6a2e6c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-5df3bccae5a8c73f6a599119be6a2e6c_b.jpg" data-original-token="v2-5df3bccae5a8c73f6a599119be6a2e6c"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-52eeb0fc8c12138df6ec11ef5a8951a8_b.jpg" data-caption="" data-size="normal" data-rawwidth="1241" data-rawheight="678" class="origin_image zh-lightbox-thumb" width="1241" data-original="https://pic1.zhimg.com/v2-52eeb0fc8c12138df6ec11ef5a8951a8_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1241&#39; height=&#39;678&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1241" data-rawheight="678" class="origin_image zh-lightbox-thumb lazy" width="1241" data-original="https://pic1.zhimg.com/v2-52eeb0fc8c12138df6ec11ef5a8951a8_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-52eeb0fc8c12138df6ec11ef5a8951a8_b.jpg" data-original-token="v2-52eeb0fc8c12138df6ec11ef5a8951a8"/></figure><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-cc6271ef958cc3c7af0be662e35a53f4_b.jpg" data-caption="" data-size="normal" data-rawwidth="1766" data-rawheight="768" class="origin_image zh-lightbox-thumb" width="1766" data-original="https://pic1.zhimg.com/v2-cc6271ef958cc3c7af0be662e35a53f4_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1766&#39; height=&#39;768&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1766" data-rawheight="768" class="origin_image zh-lightbox-thumb lazy" width="1766" data-original="https://pic1.zhimg.com/v2-cc6271ef958cc3c7af0be662e35a53f4_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-cc6271ef958cc3c7af0be662e35a53f4_b.jpg" data-original-token="v2-cc6271ef958cc3c7af0be662e35a53f4"/></figure><p data-pid="6o_v5YMg">再次回到刚开始的问题，我们为什么需要学关系代数？ </p><ul><li data-pid="M1Jv3mDT">关系代数可以很简洁地描述问题，方便DBMS去操作。（逻辑上重写和优化查询）</li><li data-pid="DnjeAPY9">DBMS为了重写和简化关系代数表达式，使用各自启发式、成本函数。（没看懂）</li></ul><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-cb7449c8ff615f0332a51869da98d91a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1783" data-rawheight="850" class="origin_image zh-lightbox-thumb" width="1783" data-original="https://pic3.zhimg.com/v2-cb7449c8ff615f0332a51869da98d91a_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1783&#39; height=&#39;850&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1783" data-rawheight="850" class="origin_image zh-lightbox-thumb lazy" width="1783" data-original="https://pic3.zhimg.com/v2-cb7449c8ff615f0332a51869da98d91a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-cb7449c8ff615f0332a51869da98d91a_b.jpg" data-original-token="v2-cb7449c8ff615f0332a51869da98d91a"/></figure><p data-pid="3OMRshol">例。</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-12a3bd61566be5d3007015ba5f9935b3_b.jpg" data-caption="" data-size="normal" data-rawwidth="1742" data-rawheight="716" class="origin_image zh-lightbox-thumb" width="1742" data-original="https://pic4.zhimg.com/v2-12a3bd61566be5d3007015ba5f9935b3_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1742&#39; height=&#39;716&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1742" data-rawheight="716" class="origin_image zh-lightbox-thumb lazy" width="1742" data-original="https://pic4.zhimg.com/v2-12a3bd61566be5d3007015ba5f9935b3_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-12a3bd61566be5d3007015ba5f9935b3_b.jpg" data-original-token="v2-12a3bd61566be5d3007015ba5f9935b3"/></figure><p data-pid="8057peVH">1.</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-c1917c12decc32760ab734ce09e7559d_b.jpg" data-caption="" data-size="normal" data-rawwidth="753" data-rawheight="285" class="origin_image zh-lightbox-thumb" width="753" data-original="https://pic2.zhimg.com/v2-c1917c12decc32760ab734ce09e7559d_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;753&#39; height=&#39;285&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="753" data-rawheight="285" class="origin_image zh-lightbox-thumb lazy" width="753" data-original="https://pic2.zhimg.com/v2-c1917c12decc32760ab734ce09e7559d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-c1917c12decc32760ab734ce09e7559d_b.jpg" data-original-token="v2-c1917c12decc32760ab734ce09e7559d"/></figure><p data-pid="4qEJ7zQ9">2.</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-3ef738c615da72f77a776fd07a303c95_b.jpg" data-caption="" data-size="normal" data-rawwidth="800" data-rawheight="442" class="origin_image zh-lightbox-thumb" width="800" data-original="https://pic2.zhimg.com/v2-3ef738c615da72f77a776fd07a303c95_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;800&#39; height=&#39;442&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="800" data-rawheight="442" class="origin_image zh-lightbox-thumb lazy" width="800" data-original="https://pic2.zhimg.com/v2-3ef738c615da72f77a776fd07a303c95_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-3ef738c615da72f77a776fd07a303c95_b.jpg" data-original-token="v2-3ef738c615da72f77a776fd07a303c95"/></figure><p class="ztext-empty-paragraph"><br/></p><h2 id="h_504749706_37" data-into-catalog-status="">10&amp;11. Query Optimization (plan space and search)</h2><h3 id="h_504749706_38" data-into-catalog-status="">.0  </h3><p data-pid="WOLmguhp">前两讲介绍了连表算法，关系代数，在关系代数中我们知道SQL查询可以转化成一串关系代数表达式，（也可以写成树的形式），而数据库内部可以改变关系代数的执行顺序，从而获得更优的查询算法。 </p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-406d04634d7123ae1096f89af66ebb7b_b.jpg" data-caption="" data-size="normal" data-rawwidth="632" data-rawheight="551" class="origin_image zh-lightbox-thumb" width="632" data-original="https://pic4.zhimg.com/v2-406d04634d7123ae1096f89af66ebb7b_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;632&#39; height=&#39;551&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="632" data-rawheight="551" class="origin_image zh-lightbox-thumb lazy" width="632" data-original="https://pic4.zhimg.com/v2-406d04634d7123ae1096f89af66ebb7b_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-406d04634d7123ae1096f89af66ebb7b_b.jpg" data-original-token="v2-406d04634d7123ae1096f89af66ebb7b"/></figure><p data-pid="PF_psoue">query plan: 一串关系代数表达式，可以返回SQL查询需要的结果</p><p data-pid="m3LZlPYK">query space： 对于一个查询的所有query plan的集合</p><p data-pid="K-QXut0M">Query Optimization ： 对于给定的查询，设计一个算法找出(近似)最优的查询策略(query plan)。 </p><p data-pid="-9QlRrjV">Query operator ：操作符，关系代数中的 <span class="ztext-math" data-eeimg="1" data-tex="\pi">\pi</span> （ project）， <span class="ztext-math" data-eeimg="1" data-tex="\sigma">\sigma</span> （select predicate），join，order by， group by....  在的项目proj3中，每种操作符都是一个类。<b>操作符本质是一个 Iterable&lt;Record&gt; . </b></p><p data-pid="qp34UXt4"><b>即：操作符接受一个 </b> Iterable&lt;Record&gt; ， 返回一个 Iterable&lt;Record&gt;作为下一个操作符的输入。</p><p data-pid="ObhCUmxU">proj3中采用火山模型：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-af82a2787d7331847f7b9977e757d3fb_b.jpg" data-caption="" data-size="normal" data-rawwidth="1440" data-rawheight="950" class="origin_image zh-lightbox-thumb" width="1440" data-original="https://pic4.zhimg.com/v2-af82a2787d7331847f7b9977e757d3fb_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1440&#39; height=&#39;950&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1440" data-rawheight="950" class="origin_image zh-lightbox-thumb lazy" width="1440" data-original="https://pic4.zhimg.com/v2-af82a2787d7331847f7b9977e757d3fb_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-af82a2787d7331847f7b9977e757d3fb_b.jpg" data-original-token="v2-af82a2787d7331847f7b9977e757d3fb"/></figure><blockquote data-pid="pLwVLMGS">This is the <i>volcano model</i>, where the operators are layered atop one another, and each operator requests tuples from the input operator(s) as it needs to generate its next output tuple. <b>Note that each operator only fetches tuples from its input operator(s) as needed, rather than all at once!</b></blockquote><h3 id="h_504749706_39" data-into-catalog-status=""><b>所以在实现火山模型的时候采用传递数据迭代器的形式。</b></h3><h3 id="h_504749706_40" data-into-catalog-status="">.1 Selectivity Estimation </h3><p data-pid="iZx_vVd5">查询优化的一个需要注意地方是，在我们执行一个计划之前，我们无法知道该计划将花费多少I/O。这有两个重要的含义。首先，我们不可能保证我们会找到最佳的查询计划--我们只能希望通过启发式方法和估计来找到一个好的（足够的）计划。第二，我们需要某种方式来估计一个查询计划的成本。我们将使用一个工具来预估一个查询计划的成本，这叫做选择性估计。操作符的选择性是指通过操作符进入上面的操作符的页面的百分比的近似值。这一点很重要， 因为如果我们有一个操作符，并且它大大减少了进入下一阶段的页面数量 （比如WHERE子句），我们可能想尽快完成这个操作，这样的话接下来的操作符就可以处理更少的数据了。</p><p data-pid="OrAMME0B"><b>选择性是是针对操作符而言的。</b></p><p data-pid="xvzLWcXJ">操作符的选择性有其自己的算法。这里不展开细说了。</p><h3 id="h_504749706_41" data-into-catalog-status="">.2 Common Heuristics</h3><p data-pid="-HmcrQLu">查询优化算法是基于搜索，我们可以用一些启发式策略剪枝。</p><ul><li data-pid="B-2oAFAh">Push down projects (π) and selects (σ) as far as they can go .  后者很好理解，比如让可以减少records数量的where操作符尽早使用； 前者可以让每条record变小，使得1个page可以存放更多的record，从而减少page占用。 </li><li data-pid="41RPyC1a">Only consider left deep plans 。 只考虑左深树，意思就是每次join结果作为左表，新加入的表作为右表。</li></ul><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-f12466fdef05e3a46b7df49bc2544075_b.jpg" data-caption="" data-size="normal" data-rawwidth="841" data-rawheight="285" class="origin_image zh-lightbox-thumb" width="841" data-original="https://pic2.zhimg.com/v2-f12466fdef05e3a46b7df49bc2544075_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;841&#39; height=&#39;285&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="841" data-rawheight="285" class="origin_image zh-lightbox-thumb lazy" width="841" data-original="https://pic2.zhimg.com/v2-f12466fdef05e3a46b7df49bc2544075_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-f12466fdef05e3a46b7df49bc2544075_b.jpg" data-original-token="v2-f12466fdef05e3a46b7df49bc2544075"/></figure><p data-pid="bdaEmgt8">用左深树可以使得使得查询计划以&#34;流水线&#34;形式进行，即：操作符的结果不需要写回磁盘，可以按record流入下一个操作符，实战项目中这里是通过迭代器 Iterator&lt;Reocrd&gt;来实现的。 即：每个操作符的input是一个迭代器（遍历表的每行），output 也是一个迭代器，遍历结果表的每一行。 （当然，我们可以把结果表写回磁盘，即： materialize，后面会提到）</p><ul><li data-pid="P7kBQjHw">尽量避免笛卡尔积 。 </li></ul><h3 id="h_504749706_42" data-into-catalog-status="">.3 materialize </h3><p data-pid="7LlBXLnH">”物质化“就是把操作符的结果写回磁盘，这个操作符返回的迭代器就是磁盘中数据的迭代器。 比如之前我们学过的GHJ, SortOperator ，最终结果都会写回磁盘。 即把它写到一个临时文件中，这个过程会产生额外的I/O。当下一个运算符需要使用这个表时，我们必须再次将其从磁盘读入内存。如果不选择物质化，直接将一个运算符的输出流向下一个运算符，我们就不会将中间表写入磁盘。</p><p data-pid="rkYXYF4O">可以通过一个题来理解其作用：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-83b62c901cd5286cd77eac40ebedc25f_b.jpg" data-caption="" data-size="normal" data-rawwidth="1650" data-rawheight="552" class="origin_image zh-lightbox-thumb" width="1650" data-original="https://pic4.zhimg.com/v2-83b62c901cd5286cd77eac40ebedc25f_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1650&#39; height=&#39;552&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1650" data-rawheight="552" class="origin_image zh-lightbox-thumb lazy" width="1650" data-original="https://pic4.zhimg.com/v2-83b62c901cd5286cd77eac40ebedc25f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-83b62c901cd5286cd77eac40ebedc25f_b.jpg" data-original-token="v2-83b62c901cd5286cd77eac40ebedc25f"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-96adb8fcfc6b9d06082da2492a7c6c49_b.jpg" data-caption="" data-size="normal" data-rawwidth="1622" data-rawheight="774" class="origin_image zh-lightbox-thumb" width="1622" data-original="https://pic2.zhimg.com/v2-96adb8fcfc6b9d06082da2492a7c6c49_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1622&#39; height=&#39;774&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1622" data-rawheight="774" class="origin_image zh-lightbox-thumb lazy" width="1622" data-original="https://pic2.zhimg.com/v2-96adb8fcfc6b9d06082da2492a7c6c49_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-96adb8fcfc6b9d06082da2492a7c6c49_b.jpg" data-original-token="v2-96adb8fcfc6b9d06082da2492a7c6c49"/></figure><p data-pid="bf8Ev7hI">右表的 <span class="ztext-math" data-eeimg="1" data-tex="\sigma">\sigma</span> 操作符没有物质化，所以没有连接的时候右表每次都是扫描全表。所以 <span class="ztext-math" data-eeimg="1" data-tex="\sigma">\sigma</span> 的push down没有起到优化作用。</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-a0ced79409ad935edd8c4ffee227883c_b.jpg" data-caption="" data-size="normal" data-rawwidth="1393" data-rawheight="697" class="origin_image zh-lightbox-thumb" width="1393" data-original="https://pic1.zhimg.com/v2-a0ced79409ad935edd8c4ffee227883c_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1393&#39; height=&#39;697&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1393" data-rawheight="697" class="origin_image zh-lightbox-thumb lazy" width="1393" data-original="https://pic1.zhimg.com/v2-a0ced79409ad935edd8c4ffee227883c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-a0ced79409ad935edd8c4ffee227883c_b.jpg" data-original-token="v2-a0ced79409ad935edd8c4ffee227883c"/></figure><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-fb9e23b0df3d2cd03cf9b3de4b458a0a_b.jpg" data-caption="" data-size="normal" data-rawwidth="1630" data-rawheight="100" class="origin_image zh-lightbox-thumb" width="1630" data-original="https://pic3.zhimg.com/v2-fb9e23b0df3d2cd03cf9b3de4b458a0a_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1630&#39; height=&#39;100&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1630" data-rawheight="100" class="origin_image zh-lightbox-thumb lazy" width="1630" data-original="https://pic3.zhimg.com/v2-fb9e23b0df3d2cd03cf9b3de4b458a0a_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-fb9e23b0df3d2cd03cf9b3de4b458a0a_b.jpg" data-original-token="v2-fb9e23b0df3d2cd03cf9b3de4b458a0a"/></figure><p data-pid="4xFOlQSI">100+40 ： 物质化的读与写的IO cost。 </p><p data-pid="sk-yxv_u">新表的大小是40 pages。 </p><p class="ztext-empty-paragraph"><br/></p><h3 id="h_504749706_43" data-into-catalog-status="">.4 通过dp解决plan space search</h3><p data-pid="Oj4jzOX4">我们需要解决的问题是找到IO 最少的plan，<b>优化的核心在于找到连接plan中所有的表最少的IO</b>，连接完所有的表后，group by ，project， order by等等依次加上即可。</p><p data-pid="-8Fgtyhu"><b>我们采用动态规划算法，dp&lt;set,QueryOperator&gt; 表示把set中的表连接起来 代节最小的plan的 最后一次join操作符 （我们对最后一次join操作符调用 this.estimateIOCost()可以得到整个plan的IO cost）</b></p><p data-pid="AxMCjE0x">这个dp本质是一个状压dp，所以最多用来处理十多个表的连接。</p><ul><li data-pid="PgInB0sn">先处理set中只有1个表的情况,对于1个表返回遍历最小代节的操作符。（需要用上select predicate） 实现 <code>minCostSingleAccess(String table)</code> ,对于一个表，要么文件扫描，要么索引扫描。后者需要满足条件：select predicate所在列具有索引，且这个过滤条件不能为 &#39;!=&#39; .</li><li data-pid="4jn7X0Ll">dp[set(i)]表示连接set(i)表的状态，dp[set(i)] = minCostJoins(dp[set(i-1)], dp[single]) , minCostJoins函数的文档提供了基本思路，照着写即可。 <b>这里有个地方需要注意，我们需要严格遵守左深树 ,dp[set(i-1)]必须是左表。</b></li></ul><p data-pid="rh_-9QS-">这里是proj3相关lab的思路，这里忽略了interesting order，写起来更简单。</p><p data-pid="KZt9I3Vx">所谓 interesting order ：</p><p data-pid="LO0q3s7F">An interesting order is when the table is sorted on a column that is either: </p><p data-pid="6_kbGZBe">• Used in an ORDER BY </p><p data-pid="Svtfj2Jq">• Used in a GROUP BY</p><p data-pid="hQI7T6lI">• Used in a downstream join (a join that hasn’t yet been evaluated. For pass 1, this is all joins).</p><p data-pid="z5qILU1x"><b>Anyway，this order is only interesting if it used later in our query!  </b></p><p data-pid="Mrz-WUyg"><b>可能产生interest order的操作符可能有：indexScanOperator, SMJ ..</b></p><p class="ztext-empty-paragraph"><br/></p><p data-pid="TR-ydY9M">这几节课的收获主要在project中体现~ 很有趣的实验。</p><p class="ztext-empty-paragraph"><br/></p><h2 id="h_504749706_44" data-into-catalog-status="">12&amp;13. Transactions &amp; Concurrency</h2><p data-pid="8QXT-qQT">这一讲开始介绍事务，DBMS如何保证其ACID四个属性。</p><p data-pid="xGgajB5n">其中隔离性（isolation）与并发（concurrency）有关，其余3个与恢复（recovery）有关，内容在下一节。 </p><h3 id="h_504749706_45" data-into-catalog-status="">12.1 what is transaction </h3><p data-pid="GtuMslq7">我们在此前的学习中一直假设数据库只支持一个用户同时访问，但实际上许多用户是可以同时使用DBMS的，这就涉及到并发。同时访问DBMS可能会出现以下问题：</p><ul><li data-pid="AprLyYZO">不一致性读取: 某个用户只读取了部分更新的内容，比如user1打算修改更新table1, table2， 但是user2在user1只修改了table1后，就读取了table1，table2的内容。 （更具体一点，银行要从A账户转40元给B账户，在A账户减40后，B账户加40前，另一个用户读取了A B账户）</li><li data-pid="MdBy3E2D">丢失修改：两个用户修改同一条数据，后者导致前者的修改丢失。比如 用户1打算让table1某个数据+10，用户2打算让某个数据*2，在用户1提交前，用户2进行了操作，覆盖了用户1的修改 ，使之丢失</li><li data-pid="qccNYxXW">脏读：某用户读取了一条未提交的修改。 用户1让数据A加10，随后B紧接着读取了数据A，此时A的修改未提交，是有可能被撤销的。 </li></ul><p data-pid="6iy6pKqt">为了避免这些问题，我们提出 事务(transaction)这个概念： 事务是一系列有序操作构成的整体，比如一段完整的SQL查询语句， 一件具体的事情（银行转账）。</p><blockquote data-pid="76lWzmmn">Our solution to those problems is to define a set of rules and guarantees about operations. We will do this by using transactions.<b> A transaction is a sequence of multiple actions that should be executed as a single, logical, atomic unit. </b>Transactions guarantee the ACID properties to avoid the problems discussed above。 </blockquote><p data-pid="rWwvWUOR">事务的四个属性 ACID：</p><ul><li data-pid="S00ON__B">原子性：事务是一个不可分割的单元，事务中的操作要么全部执行并提交，要么全部撤销。 </li><li data-pid="FdYgQz8Q">一致性：事务进行前后，数据满足的约束需要一致 （比如银行从A转40给B，转账前后总金额是一样的）</li><li data-pid="RNsWZXFg">隔离性：并发的实现中，结果必须看起来和所有事务单独按顺序实现一样，事务不相互影响。</li><li data-pid="aRu68_UR">持久性：事务一但提交，其修改是在磁盘中的，是永久的，即使之后DBMS发生故障也不影响其永久性。</li></ul><blockquote data-pid="-fZysccF">• Atomicity: A transaction ends in two ways: it either commits or aborts. Atomicity means that either all actions in the Xact happen, or none happen. <br/>• Consistency: If the DB starts out consistent, it ends up consistent at the end of the Xact.<br/>• Isolation: Execution of each Xact is isolated from that of others. In reality, the DBMS will interleave actions of many Xacts and not execute each in order of one after the other. The DBMS will ensure that each Xact executes as if it ran by itself. <br/>• Durabilty: If a Xact commits, its effects persist. The effects of a committed Xact must survive failures.</blockquote><p data-pid="_jLxz17w">事务最终要么提交，要么撤销。</p><p data-pid="H_sQdhLL">●<b>commit</b>: indicates <i>successful</i> transaction (save changes)</p><p data-pid="ensEd9L2">●<b>abort</b>: indicates <i>unsuccessful</i> transaction (revert changes)</p><p class="ztext-empty-paragraph"><br/></p><h3 id="h_504749706_46" data-into-catalog-status="">12.2 why concurrency </h3><p data-pid="0p2dupAY">并发的目的是什么？提升DBMS的运行效率：</p><ul><li data-pid="DWbxovgw">增加事务吞吐量，在事务A从磁盘读取pages时，cpu可能是空闲的，此时让它去处理事务B，增加性能利用率。</li><li data-pid="FmXV5-6_">当我们需要处理大量事务时，让大的事务和小的事务并发，可以减少后者等待时间</li></ul><p data-pid="4_1WzfM1"><b>schedule（调度）</b>: order in which we execute operations of a set of transactions</p><p data-pid="qrGUDynm">serial schedule（串行调度）：事务一个接一个进行，不存在操作交错。 这是最简单的实现隔离性的方法，但是0并发。 </p><p data-pid="sI2kP6AM">我们定义两个调度等价当且仅当：</p><p data-pid="zsyv0C2k">○1.他们包含的事务是同一组事务</p><p data-pid="TGMOabJJ">○2.对于每个事务，其操作在两个调度中是同样的顺序</p><p data-pid="B2gF7px1">○2.两个调度执行完后，数据库的状态是一样的。</p><p data-pid="OQeSosHS">我们在并发过程中要实现隔离，就相当于找到一个与串行调度等价的调度。 </p><p data-pid="AjrjPlwE">我们称这种调度为<b>可串行调度</b>。 （<b>serializable</b>）</p><p data-pid="69Fg_qqW">但是验证一个调度是否是可串行调度成本太大，因为要知道执行完后数据库的最终状态是否与串行调度相等。</p><p data-pid="r9GvLjFO">我们可以去验证其是否属于串行调度的一个子集：<b>冲突可串行调度 </b>（<b>conflict serializable</b>）</p><p data-pid="WYETF6Xq">●A schedule is <b>conflict serializable</b> if it is conflict equivalent to a serial schedule</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-3f66fa1e9b56b3eb584a030cd66f913f_b.jpg" data-caption="" data-size="normal" data-rawwidth="1542" data-rawheight="307" class="origin_image zh-lightbox-thumb" width="1542" data-original="https://pic4.zhimg.com/v2-3f66fa1e9b56b3eb584a030cd66f913f_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1542&#39; height=&#39;307&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1542" data-rawheight="307" class="origin_image zh-lightbox-thumb lazy" width="1542" data-original="https://pic4.zhimg.com/v2-3f66fa1e9b56b3eb584a030cd66f913f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-3f66fa1e9b56b3eb584a030cd66f913f_b.jpg" data-original-token="v2-3f66fa1e9b56b3eb584a030cd66f913f"/></figure><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-35d946db16e6d6b94d499420913b17e9_b.jpg" data-caption="" data-size="normal" data-rawwidth="1748" data-rawheight="989" class="origin_image zh-lightbox-thumb" width="1748" data-original="https://pic2.zhimg.com/v2-35d946db16e6d6b94d499420913b17e9_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1748&#39; height=&#39;989&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1748" data-rawheight="989" class="origin_image zh-lightbox-thumb lazy" width="1748" data-original="https://pic2.zhimg.com/v2-35d946db16e6d6b94d499420913b17e9_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-35d946db16e6d6b94d499420913b17e9_b.jpg" data-original-token="v2-35d946db16e6d6b94d499420913b17e9"/></figure><p class="ztext-empty-paragraph"><br/></p><p data-pid="D3uXxsMO">验证一个调度是否是冲突可串行，可以画一个依赖图：</p><ul><li data-pid="9_RGREzN">每个事务看成是一个顶点</li><li data-pid="pA3u7neJ">事务A的操作i与事务B的操作j冲突 （2个操作冲突的等价条件：2个操作属于不同事务，其中存在一个是write，操作对象是同一个resource），i在j前面（前后指在调度中的顺序），那么A有一条边指向B</li><li data-pid="vSw2rSyb">如果某个调度的依赖图是无环的，那么他一定是可串行调度</li></ul><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-efdf80678202271ea16e07b39a2ea163_b.jpg" data-caption="" data-size="normal" data-rawwidth="1476" data-rawheight="487" class="origin_image zh-lightbox-thumb" width="1476" data-original="https://pic4.zhimg.com/v2-efdf80678202271ea16e07b39a2ea163_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1476&#39; height=&#39;487&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1476" data-rawheight="487" class="origin_image zh-lightbox-thumb lazy" width="1476" data-original="https://pic4.zhimg.com/v2-efdf80678202271ea16e07b39a2ea163_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-efdf80678202271ea16e07b39a2ea163_b.jpg" data-original-token="v2-efdf80678202271ea16e07b39a2ea163"/></figure><p data-pid="fZ0ORRvz">我们看一个例题：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-92ec86bf7ebc75ae89d67db0c0492ea2_b.jpg" data-size="normal" data-rawwidth="1647" data-rawheight="957" class="origin_image zh-lightbox-thumb" width="1647" data-original="https://pic3.zhimg.com/v2-92ec86bf7ebc75ae89d67db0c0492ea2_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1647&#39; height=&#39;957&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1647" data-rawheight="957" class="origin_image zh-lightbox-thumb lazy" width="1647" data-original="https://pic3.zhimg.com/v2-92ec86bf7ebc75ae89d67db0c0492ea2_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-92ec86bf7ebc75ae89d67db0c0492ea2_b.jpg" data-original-token="v2-92ec86bf7ebc75ae89d67db0c0492ea2"/><figcaption>T1,T2有环，所以不是可串行调度</figcaption></figure><h3 id="h_504749706_47" data-into-catalog-status="">12.3 how to enforce conflict serializablity</h3><p data-pid="n25Vn1bj">如何执行一个冲突可串行调度呢？（即：如何在不同事务的操作交错执行的情况下，保证隔离性呢？</p><p data-pid="14ym5FHv">这就要用到 <b>锁 （lock）。</b></p><blockquote data-pid="ehGppEED">Locks are basically what allows a transaction to read and write data.</blockquote><p data-pid="TU1YzDmh">事务T1要读取对象A，那么要先请求A的共享锁 S（A）；需要修改对象A，那么需要请求A的排它锁，X（A） 。</p><p data-pid="Xrtumr5i">S X分别表示 share ， exclusive。前者可以多个事务共享，后者只能一个事务独占。</p><p data-pid="qgyJfC3s"><b>当一个事务请求一个锁后，所请求的锁如果与已存在的锁冲突，那么该请求被挂起，事务此时只能继续等待该请求，不能做别的事情。</b></p><p data-pid="BmSWkaxO">二阶段锁（2PL）：课程主要介绍了2阶段锁，来实现冲突可串行调度。</p><ul><li data-pid="DrSayRb-">2PL中，<b>所有的锁请求都在锁释放前进行。（通过这个协议实现了冲突可串行调度）</b></li><li data-pid="KRtikEXd">读取对象必须要持有该对象的共享锁 Share，修改对象前必须持有该对象的排它锁 Exclusive</li></ul><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-b44db9e461351b18a8a5492b5436d30d_b.jpg" data-caption="" data-size="normal" data-rawwidth="1762" data-rawheight="960" class="origin_image zh-lightbox-thumb" width="1762" data-original="https://pic2.zhimg.com/v2-b44db9e461351b18a8a5492b5436d30d_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1762&#39; height=&#39;960&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1762" data-rawheight="960" class="origin_image zh-lightbox-thumb lazy" width="1762" data-original="https://pic2.zhimg.com/v2-b44db9e461351b18a8a5492b5436d30d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-b44db9e461351b18a8a5492b5436d30d_b.jpg" data-original-token="v2-b44db9e461351b18a8a5492b5436d30d"/></figure><p data-pid="0UNYQYxS">但是2PL有个缺点，无法避免 <b>联级中止（cascading aborts）</b>：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-e1564b88e99c6697fb693c69dd80add9_b.jpg" data-caption="" data-size="normal" data-rawwidth="1671" data-rawheight="965" class="origin_image zh-lightbox-thumb" width="1671" data-original="https://pic2.zhimg.com/v2-e1564b88e99c6697fb693c69dd80add9_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1671&#39; height=&#39;965&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1671" data-rawheight="965" class="origin_image zh-lightbox-thumb lazy" width="1671" data-original="https://pic2.zhimg.com/v2-e1564b88e99c6697fb693c69dd80add9_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-e1564b88e99c6697fb693c69dd80add9_b.jpg" data-original-token="v2-e1564b88e99c6697fb693c69dd80add9"/></figure><p data-pid="IDP1_RbW">因为T1的X（A）锁，在最终提交（或撤销）前的一段时间就释放了，释放完到T1事务结束这段时间里，别的事物也会访问A，从而导致如果T1撤销了，其余涉及了A的事务也必须撤销。</p><p data-pid="bjvlLTtq">为了避免联级中止，我们可以用严格二阶段锁（strict 2pl）：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-29d7da07d43b54ae9212298400ec887c_b.jpg" data-caption="" data-size="normal" data-rawwidth="1677" data-rawheight="625" class="origin_image zh-lightbox-thumb" width="1677" data-original="https://pic1.zhimg.com/v2-29d7da07d43b54ae9212298400ec887c_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1677&#39; height=&#39;625&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1677" data-rawheight="625" class="origin_image zh-lightbox-thumb lazy" width="1677" data-original="https://pic1.zhimg.com/v2-29d7da07d43b54ae9212298400ec887c_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-29d7da07d43b54ae9212298400ec887c_b.jpg" data-original-token="v2-29d7da07d43b54ae9212298400ec887c"/></figure><p data-pid="YtF99RR6">在事务最终结束的时候，才一次性释放所有的锁。 </p><p data-pid="gqSXeqs2">这就让T1结束前，T2,T3都不能访问对象A了。</p><p data-pid="3RFJFThg">不过严格2pl降低了并发性。 </p><h3 id="h_504749706_48" data-into-catalog-status="">12.4 dead lock  </h3><p data-pid="B7wwuvkr">死锁 。</p><p data-pid="tELMuEfs">当事务T1请求一个锁，该请求需要等待T2释放一个锁，而T2此时也在等待T1，那么就构成了一个死锁。</p><p data-pid="GOYfjQ4e">如何避免死锁呢？一是通过策略预防死锁(avoidence)，二是定期地check一下，检查有无死锁产生，并处理(detect)。</p><ul><li data-pid="oj9O6ohs">avoidence 有两种策略：</li></ul><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-d70de32935384325a0400270a39c2b24_b.jpg" data-caption="" data-size="normal" data-rawwidth="1807" data-rawheight="832" class="origin_image zh-lightbox-thumb" width="1807" data-original="https://pic1.zhimg.com/v2-d70de32935384325a0400270a39c2b24_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1807&#39; height=&#39;832&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1807" data-rawheight="832" class="origin_image zh-lightbox-thumb lazy" width="1807" data-original="https://pic1.zhimg.com/v2-d70de32935384325a0400270a39c2b24_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-d70de32935384325a0400270a39c2b24_b.jpg" data-original-token="v2-d70de32935384325a0400270a39c2b24"/></figure><ul><li data-pid="rhOxyhyD">wait-die: 事务只会等待比自己优先度低的事务，所以不会产生环</li><li data-pid="tHIZFt5U">wound-wait:事务只会等待比自己优先度高的事务，所以不会产生环</li></ul><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-6d39ba61e6d461f2ad99277b6160688f_b.jpg" data-caption="" data-size="normal" data-rawwidth="1793" data-rawheight="482" class="origin_image zh-lightbox-thumb" width="1793" data-original="https://pic4.zhimg.com/v2-6d39ba61e6d461f2ad99277b6160688f_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1793&#39; height=&#39;482&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1793" data-rawheight="482" class="origin_image zh-lightbox-thumb lazy" width="1793" data-original="https://pic4.zhimg.com/v2-6d39ba61e6d461f2ad99277b6160688f_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-6d39ba61e6d461f2ad99277b6160688f_b.jpg" data-original-token="v2-6d39ba61e6d461f2ad99277b6160688f"/></figure><ul><li data-pid="LjIzdbu7">detect : <b>通过wait-for graph图来检查死锁，如果事务i请求一个锁，需要等待事务j释放，那么有一条有向边&lt;i,j&gt;, 如果图没有环，说明无死锁，否则，杀死一个事务解环。 </b></li></ul><p data-pid="regkS5jq">wait-for graph例子：</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-7d3ddb3cd4cb24572430e7fb4c1ac385_b.jpg" data-caption="" data-size="normal" data-rawwidth="1739" data-rawheight="977" class="origin_image zh-lightbox-thumb" width="1739" data-original="https://pic2.zhimg.com/v2-7d3ddb3cd4cb24572430e7fb4c1ac385_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1739&#39; height=&#39;977&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1739" data-rawheight="977" class="origin_image zh-lightbox-thumb lazy" width="1739" data-original="https://pic2.zhimg.com/v2-7d3ddb3cd4cb24572430e7fb4c1ac385_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-7d3ddb3cd4cb24572430e7fb4c1ac385_b.jpg" data-original-token="v2-7d3ddb3cd4cb24572430e7fb4c1ac385"/></figure><h3 id="h_504749706_49" data-into-catalog-status="">12.5 lock management</h3><p data-pid="6N6Wm5XV">锁的管理系统是如何处理锁的请求和释放的呢？ </p><p data-pid="qmSVXzr8">LM有一个hash表来存储一些信息：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-4a6b7733ed58d58321703bc98432bf67_b.jpg" data-caption="" data-size="normal" data-rawwidth="1109" data-rawheight="228" class="origin_image zh-lightbox-thumb" width="1109" data-original="https://pic4.zhimg.com/v2-4a6b7733ed58d58321703bc98432bf67_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1109&#39; height=&#39;228&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1109" data-rawheight="228" class="origin_image zh-lightbox-thumb lazy" width="1109" data-original="https://pic4.zhimg.com/v2-4a6b7733ed58d58321703bc98432bf67_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-4a6b7733ed58d58321703bc98432bf67_b.jpg" data-original-token="v2-4a6b7733ed58d58321703bc98432bf67"/></figure><p data-pid="fCDdGVVN">第一列是resource对象，第二列是该对象授予的锁的集合，第三列是锁的类型，第四列的wait queue。 </p><p data-pid="Eeyx1i9W">当一个锁的请求发出，假设是请求一个A的锁，LM先检查wait queue是否为空，如果不为空就加入队尾，否则检查请求的锁与被授予的锁是否兼容（兼容即：都是share锁），不兼容的话加入等待队列，兼容的话授予该锁。 </p><p data-pid="F5ay4smQ">当一个锁要释放，将他释放后，从等待队列的队首开始遍历，如果队首请求的锁兼容，加入，否则就中止遍历。</p><p data-pid="6gFuZ6u4">伪代码：</p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/v2-f6d46fb34105a6d8757b36687bf9ffd6_b.jpg" data-caption="" data-size="normal" data-rawwidth="1892" data-rawheight="1008" class="origin_image zh-lightbox-thumb" width="1892" data-original="https://pic3.zhimg.com/v2-f6d46fb34105a6d8757b36687bf9ffd6_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1892&#39; height=&#39;1008&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1892" data-rawheight="1008" class="origin_image zh-lightbox-thumb lazy" width="1892" data-original="https://pic3.zhimg.com/v2-f6d46fb34105a6d8757b36687bf9ffd6_r.jpg" data-actualsrc="https://pic3.zhimg.com/v2-f6d46fb34105a6d8757b36687bf9ffd6_b.jpg" data-original-token="v2-f6d46fb34105a6d8757b36687bf9ffd6"/></figure><p data-pid="nCToHCfK">当然还有一种做法是：</p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-3aec0ee66269a519150cdce25fe3c408_b.jpg" data-caption="" data-size="normal" data-rawwidth="1918" data-rawheight="1005" class="origin_image zh-lightbox-thumb" width="1918" data-original="https://pic1.zhimg.com/v2-3aec0ee66269a519150cdce25fe3c408_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1918&#39; height=&#39;1005&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1918" data-rawheight="1005" class="origin_image zh-lightbox-thumb lazy" width="1918" data-original="https://pic1.zhimg.com/v2-3aec0ee66269a519150cdce25fe3c408_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-3aec0ee66269a519150cdce25fe3c408_b.jpg" data-original-token="v2-3aec0ee66269a519150cdce25fe3c408"/></figure><h3 id="h_504749706_50" data-into-catalog-status="">12.6 锁的粒度 与 多粒度锁(Multi-granularity Locking)</h3><p data-pid="5HJHaEd3">我们讨论了什么是锁，但是锁究竟锁住的是什么呢？我们只是笼统地用了resource来表示，其实锁在不同资源层面拥有不同的粒度：</p><ul><li data-pid="kV5ETHW1">元组层面的锁：每个tuple一个锁，粒度精细，并发性高，但锁的开销大</li><li data-pid="wmpbKvQy">表层面的锁：每个表一个锁，粒度大，低并发，锁的开销小</li></ul><p data-pid="0f1QMRAs">我们使用多粒度锁，即：不同的场景采用不同粒度的锁，读取一个表采用table-level lock,修改一条数据采用tuple-level lock </p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/v2-0f33af7b5a7ce46af55692849f0c89b8_b.jpg" data-caption="" data-size="normal" data-rawwidth="1775" data-rawheight="342" class="origin_image zh-lightbox-thumb" width="1775" data-original="https://pic1.zhimg.com/v2-0f33af7b5a7ce46af55692849f0c89b8_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1775&#39; height=&#39;342&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1775" data-rawheight="342" class="origin_image zh-lightbox-thumb lazy" width="1775" data-original="https://pic1.zhimg.com/v2-0f33af7b5a7ce46af55692849f0c89b8_r.jpg" data-actualsrc="https://pic1.zhimg.com/v2-0f33af7b5a7ce46af55692849f0c89b8_b.jpg" data-original-token="v2-0f33af7b5a7ce46af55692849f0c89b8"/></figure><p data-pid="XdFTacuq">数据库系统层次结构是一棵树:</p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/v2-e0589bc59a7449f1da9875ab046f860d_b.jpg" data-size="normal" data-rawwidth="1641" data-rawheight="707" class="origin_image zh-lightbox-thumb" width="1641" data-original="https://pic2.zhimg.com/v2-e0589bc59a7449f1da9875ab046f860d_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1641&#39; height=&#39;707&#39;&gt;&lt;/svg&gt;" data-size="normal" data-rawwidth="1641" data-rawheight="707" class="origin_image zh-lightbox-thumb lazy" width="1641" data-original="https://pic2.zhimg.com/v2-e0589bc59a7449f1da9875ab046f860d_r.jpg" data-actualsrc="https://pic2.zhimg.com/v2-e0589bc59a7449f1da9875ab046f860d_b.jpg" data-original-token="v2-e0589bc59a7449f1da9875ab046f860d"/><figcaption>T1:table1，Pa：page a</figcaption></figure><p data-pid="hTJ4d4I7">事务T拥有了节点Pa的X锁，那么隐式地拥有Pa子树所有节点的X锁。 Pa的所有祖先节点都不能拥有X/S锁，为了方便知道这个信息，我们可以给所有祖先节点打上标记 IX， （intend to get X at finer granularity）. </p><p data-pid="LaetopCE">IS : intend to get S at finer granularity </p><p data-pid="9A1jJMsT">IX:  intend to get X at finer granularity </p><p data-pid="gqQktejS">SIX: grasnted S， and intend to get X at finer granularity</p><p data-pid="Ro9sScVM">前两种锁只是一种标记，并非真正意义上的锁，表示这个对象子树内有对应锁。</p><p data-pid="Y_3YLmLj">第三种锁是为了修改一个表：我们需要表的share 锁，tuple层面的exclusive锁。 </p><p data-pid="mg3rmNhm">兼容矩阵：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-5d57c4d03bb7b1356982671b85264253_b.jpg" data-caption="" data-size="normal" data-rawwidth="1163" data-rawheight="854" class="origin_image zh-lightbox-thumb" width="1163" data-original="https://pic4.zhimg.com/v2-5d57c4d03bb7b1356982671b85264253_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;1163&#39; height=&#39;854&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="1163" data-rawheight="854" class="origin_image zh-lightbox-thumb lazy" width="1163" data-original="https://pic4.zhimg.com/v2-5d57c4d03bb7b1356982671b85264253_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-5d57c4d03bb7b1356982671b85264253_b.jpg" data-original-token="v2-5d57c4d03bb7b1356982671b85264253"/></figure><p data-pid="m7fC_3aV">多粒度锁的协议：</p><figure data-size="normal"><noscript><img src="https://pic4.zhimg.com/v2-26545054885afc68d947e03a2a62a1d3_b.jpg" data-caption="" data-size="normal" data-rawwidth="2036" data-rawheight="728" class="origin_image zh-lightbox-thumb" width="2036" data-original="https://pic4.zhimg.com/v2-26545054885afc68d947e03a2a62a1d3_r.jpg"/></noscript><img src="data:image/svg+xml;utf8,&lt;svg xmlns=&#39;http://www.w3.org/2000/svg&#39; width=&#39;2036&#39; height=&#39;728&#39;&gt;&lt;/svg&gt;" data-caption="" data-size="normal" data-rawwidth="2036" data-rawheight="728" class="origin_image zh-lightbox-thumb lazy" width="2036" data-original="https://pic4.zhimg.com/v2-26545054885afc68d947e03a2a62a1d3_r.jpg" data-actualsrc="https://pic4.zhimg.com/v2-26545054885afc68d947e03a2a62a1d3_b.jpg" data-original-token="v2-26545054885afc68d947e03a2a62a1d3"/></figure><p></p></div></div></div></div><div role="button" tabindex="0" class="ContentItem-time">编辑于 2023-01-14 19:16<!-- -->・IP 属地江西</div><div class="Post-topicsAndReviewer"><div class="TopicList Post-Topics"><style data-emotion-css="1s3a4zw">.css-1s3a4zw{position:relative;display:inline-block;height:30px;padding:0 12px;font-size:14px;line-height:30px;color:#056DE8;vertical-align:top;border-radius:100px;background:rgba(5,109,232,0.1);}.css-1s3a4zw:hover{background-color:rgba(5,109,232,0.15);}</style><div class="Tag Topic css-1s3a4zw"><span class="Tag-content"><a class="TopicLink" href="//www.zhihu.com/topic/19614808" target="_blank"><style data-emotion-css="1xlfegr">.css-1xlfegr{background:transparent;box-shadow:none;}</style><style data-emotion-css="1gomreu">.css-1gomreu{position:relative;display:inline-block;}</style><div class="css-1gomreu">数据库设计</div></a></span></div></div></div><div><div class="Sticky RichContent-actions is-bottom"><div class="ContentItem-actions"><span><button aria-label="赞同 21 " aria-live="polite" type="button" class="Button VoteButton VoteButton--up FEfUrdfMIKpQDJDqkjte"><span style="display:inline-flex;align-items:center">​<svg width="10" height="10" viewBox="0 0 24 24" class="Zi Zi--TriangleUp VoteButton-TriangleUp" fill="currentColor"><path fill-rule="evenodd" d="M13.792 3.681c-.781-1.406-2.803-1.406-3.584 0l-7.79 14.023c-.76 1.367.228 3.046 1.791 3.046h15.582c1.563 0 2.55-1.68 1.791-3.046l-7.79-14.023Z" clip-rule="evenodd"></path></svg></span>赞同 21</button><button aria-label="反对" aria-live="polite" type="button" class="Button VoteButton VoteButton--down FEfUrdfMIKpQDJDqkjte"><span style="display:inline-flex;align-items:center">​<svg width="10" height="10" viewBox="0 0 24 24" class="Zi Zi--TriangleDown" fill="currentColor"><path fill-rule="evenodd" d="M13.792 20.319c-.781 1.406-2.803 1.406-3.584 0L2.418 6.296c-.76-1.367.228-3.046 1.791-3.046h15.582c1.563 0 2.55 1.68 1.791 3.046l-7.79 14.023Z" clip-rule="evenodd"></path></svg></span></button></span><button type="button" class="Button BottomActions-CommentBtn FEfUrdfMIKpQDJDqkjte Button--plain Button--withIcon Button--withLabel fEPKGkUK5jyc4fUuT0QP B46v1Ak6Gj5sL2JTS4PY RuuQ6TOh2cRzJr6WlyQp"><span style="display:inline-flex;align-items:center">​<svg width="1.2em" height="1.2em" viewBox="0 0 24 24" class="Zi Zi--Comment Button-zi t2ntD6J1DemdOdvh5FB4" fill="currentColor"><path fill-rule="evenodd" d="M12 2.75a9.25 9.25 0 1 0 4.737 17.197l2.643.817a1 1 0 0 0 1.25-1.25l-.8-2.588A9.25 9.25 0 0 0 12 2.75Z" clip-rule="evenodd"></path></svg></span>4 条评论</button><div class="Popover ShareMenu"><div class="ShareMenu-toggler" id="null-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="null-content"><button type="button" class="Button FEfUrdfMIKpQDJDqkjte Button--plain Button--withIcon Button--withLabel fEPKGkUK5jyc4fUuT0QP B46v1Ak6Gj5sL2JTS4PY RuuQ6TOh2cRzJr6WlyQp"><span style="display:inline-flex;align-items:center">​<svg width="1.2em" height="1.2em" viewBox="0 0 24 24" class="Zi Zi--Share Button-zi t2ntD6J1DemdOdvh5FB4" fill="currentColor"><path d="M19.47 1.914a.8.8 0 0 1 1.204.778l-1.872 16.386a.9.9 0 0 1-1.204.743l-4.615-1.692a.7.7 0 0 0-.831.28l-1.927 3.02c-.43.674-1.474.369-1.474-.43v-3.865a.8.8 0 0 1 .179-.504l5.808-7.148a.595.595 0 0 0-.897-.781l-5.93 6.354a1.1 1.1 0 0 1-1.258.252L2.57 13.46a.8.8 0 0 1-.08-1.415l16.98-10.13Z"></path></svg></span>分享</button></div></div><button aria-live="polite" type="button" class="Button ContentItem-action FEfUrdfMIKpQDJDqkjte Button--plain Button--withIcon Button--withLabel fEPKGkUK5jyc4fUuT0QP B46v1Ak6Gj5sL2JTS4PY RuuQ6TOh2cRzJr6WlyQp"><span style="display:inline-flex;align-items:center">​<svg width="1.2em" height="1.2em" viewBox="0 0 24 24" class="Zi Zi--Heart Button-zi t2ntD6J1DemdOdvh5FB4" fill="currentColor"><path fill-rule="evenodd" d="M12.004 4.934c1.015-.944 2.484-1.618 3.98-1.618 3.48 0 6.53 3.265 6.15 7.614-.11 1.254-.686 2.55-1.458 3.753-.778 1.215-1.79 2.392-2.845 3.419-1.054 1.028-2.168 1.923-3.161 2.566a9.96 9.96 0 0 1-1.41.777c-.418.182-.862.32-1.268.32s-.848-.137-1.267-.317a9.918 9.918 0 0 1-1.407-.771c-.992-.64-2.103-1.53-3.156-2.555-1.052-1.024-2.062-2.2-2.84-3.417-.77-1.208-1.346-2.51-1.456-3.775-.38-4.349 2.67-7.614 6.15-7.614 1.484 0 2.983.673 3.988 1.618Z" clip-rule="evenodd"></path></svg></span>喜欢</button><button type="button" class="Button FEfUrdfMIKpQDJDqkjte Button--plain Button--withIcon Button--withLabel fEPKGkUK5jyc4fUuT0QP B46v1Ak6Gj5sL2JTS4PY RuuQ6TOh2cRzJr6WlyQp"><span style="display:inline-flex;align-items:center">​<svg width="1.2em" height="1.2em" viewBox="0 0 24 24" class="Zi Zi--Star Button-zi t2ntD6J1DemdOdvh5FB4" fill="currentColor"><path d="M10.484 3.307c.673-1.168 2.358-1.168 3.032 0l2.377 4.122a.25.25 0 0 0 .165.12l4.655.987c1.319.28 1.84 1.882.937 2.884l-3.186 3.535a.25.25 0 0 0-.063.193l.5 4.733c.142 1.34-1.222 2.33-2.453 1.782l-4.346-1.938a.25.25 0 0 0-.204 0l-4.346 1.938c-1.231.549-2.595-.442-2.453-1.782l.5-4.733a.25.25 0 0 0-.064-.193L2.35 11.42c-.903-1.002-.382-2.604.937-2.884l4.655-.987a.25.25 0 0 0 .164-.12l2.378-4.122Z"></path></svg></span>收藏</button><button type="button" class="Button ContentItem-action FEfUrdfMIKpQDJDqkjte Button--plain Button--withIcon Button--withLabel fEPKGkUK5jyc4fUuT0QP B46v1Ak6Gj5sL2JTS4PY RuuQ6TOh2cRzJr6WlyQp"><span style="display:inline-flex;align-items:center">​<svg width="1.2em" height="1.2em" viewBox="0 0 24 24" class="Zi Zi--Deliver Button-zi t2ntD6J1DemdOdvh5FB4" fill="currentColor"><g fill-rule="evenodd" clip-rule="evenodd"><path d="M7.821 12a.75.75 0 0 1 .75-.75h6.857a.75.75 0 0 1 0 1.5H8.571a.75.75 0 0 1-.75-.75ZM8.965 8a.75.75 0 0 1 .75-.75h4.571a.75.75 0 0 1 0 1.5H9.715a.75.75 0 0 1-.75-.75Z"></path><path d="M7.527 3.15a2.35 2.35 0 0 0-2.309 1.91L3.165 15.84a.85.85 0 0 0-.015.16v2.5a2.35 2.35 0 0 0 2.35 2.35h13a2.35 2.35 0 0 0 2.35-2.35V16a.848.848 0 0 0-.015-.16L18.78 5.06a2.35 2.35 0 0 0-2.308-1.91H7.527Zm0 1.7a.65.65 0 0 0-.639.528l-1.88 9.872h13.984l-1.88-9.872a.65.65 0 0 0-.64-.528H7.528Z"></path></g></svg></span>申请转载</button><div class="Post-ActionMenuButton"><div class="Popover"><div id="null-toggle" aria-haspopup="true" aria-expanded="false" aria-owns="null-content"><button type="button" class="Button FEfUrdfMIKpQDJDqkjte Button--plain Button--withIcon Button--iconOnly fEPKGkUK5jyc4fUuT0QP B46v1Ak6Gj5sL2JTS4PY hIwDV_tcL6XN1HprrnAq"><span style="display:inline-flex;align-items:center">​<svg width="1.2em" height="1.2em" viewBox="0 0 24 24" class="Zi Zi--Dots Button-zi t2ntD6J1DemdOdvh5FB4" fill="currentColor"><path d="M5.165 13.665a1.665 1.665 0 1 0 0-3.33 1.665 1.665 0 0 0 0 3.33ZM13.665 12a1.665 1.665 0 1 1-3.33 0 1.665 1.665 0 0 1 3.33 0ZM18.835 13.665a1.665 1.665 0 1 0 0-3.33 1.665 1.665 0 0 0 0 3.33Z"></path></svg></span></button></div></div></div></div></div></div></article><div class="Post-Sub Post-NormalSub"></div></div></main></div></div><script id="js-clientConfig" type="text/json">{"fetchRoot":{"www":"https:\u002F\u002Fwww.zhihu.com","api":"https:\u002F\u002Fapi.zhihu.com","lens":"https:\u002F\u002Flens.zhihu.com","zhuanlan":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fapi\u002F","walletpay":"https:\u002F\u002Fwalletpay.zhihu.com","captcha":"https:\u002F\u002Fcaptcha.zhihu.com","vzuu":"https:\u002F\u002Fv.vzuu.com","openapi":"https:\u002F\u002Fopenapi.zhihu.com","svip":"https:\u002F\u002Fsvip.zhihu.com"},"host":"zhihu.com","protocol":"https:","wwwHost":"www.zhihu.com","videoHost":"video.zhihu.com","zhuanlanHost":"zhuanlan.zhihu.com","allowSignUp":true,"refreshValidityPeriod":"30","release":"1045-83eab294","currentEntry":"column","isMobileEntry":false,"apollo":{"env":"prod","globalSilence":"","ncgModeSign":"3f8e56febda4fb3bbea72e379d76de1e","topstory_rec_adp":"1","editor_adapt_native":"0","content_publish_pin":"1","test_canary":"member|0-100,1-0","use_new_player":"member|0-100,1-0","player_vendor":"member|0-100,1-0,2-0","use_hevc":"member|0-0,1-100","upload_use_signature":"member|0-0,1-100","use_backdrop_blur":"member|0-0,1-100","article_title_imagex":"member|0-0,1-100","play_station":"member|0-0,1-100","use_qrcode_login_v2":"member|0-100,1-0","contentItem_cover_imagex":"member|0-0,1-100"}}</script><script id="js-initialData" type="text/json">{"initialState":{"common":{"ask":{},"cities":{"cityData":[]}},"loading":{"global":{"count":0},"local":{"env\u002FgetIpinfo\u002F":false,"article\u002Fget\u002F":false,"brand\u002FgetUrl\u002F":false,"article\u002FloadPostSearchEntity\u002F":false}},"entities":{"users":{"zhong-ying-73-36-26":{"isFollowed":false,"avatarUrlTemplate":"https:\u002F\u002Fpicx.zhimg.com\u002Fv2-fd86dc089550597e6f32169769ee6133.jpg?source=172ae18b","uid":"1122050983038947328","userType":"people","isFollowing":false,"urlToken":"zhong-ying-73-36-26","id":"78fc253075af27faf2eb90f6b5b60217","description":"","name":"湖心亭","isAdvertiser":false,"headline":"独往湖心亭看雪","gender":0,"url":"\u002Fpeople\u002F78fc253075af27faf2eb90f6b5b60217","avatarUrl":"https:\u002F\u002Fpicx.zhimg.com\u002Fv2-fd86dc089550597e6f32169769ee6133_l.jpg?source=172ae18b","isOrg":false,"type":"people","badge":[],"badgeV2":{"title":"","mergedBadges":[],"detailBadges":[],"icon":"","nightIcon":""},"exposedMedal":{"medalId":"972460827463282688","medalName":"表示赞同","avatarUrl":"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-1df62083e2d16ce5e82c3049e5d11e14_r.png?source=172ae18b","miniAvatarUrl":"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-1df62083e2d16ce5e82c3049e5d11e14_l.png?source=172ae18b","description":"赞同 1000 次","medalAvatarFrame":""}}},"questions":{},"answers":{},"articles":{"504749706":{"trackUrl":["https:\u002F\u002Fsugar.zhihu.com\u002Fplutus_adreaper\u002Fcontent_monitor_log?si=__SESSIONID__&ti=__ATOKEN__&at=view&pf=__OS__&ed=BiBUKF0xBSkqGGJ-QhvjYHlDBQ==&idfa=__IDFA__&imei=__IMEI__&androidid=__ANDROIDID__&oaid=__OAID__&ci=__CREATIVEID__&zid=__ZONEID__"],"entityWords":[{"name":"inne","mention":"inne","matchorder":1,"begin":19674,"end":19678,"entityid":0,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"","score":0,"attachedInfoBytes":"sgJKCgRpbm5lEgAY2pkBIN6ZASgBNQAAAAA6B2FydGljbGVAAEgIUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyApcBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoEaW5uZUAASABSAF0AAAAAYkoKBGlubmUSABjamQEg3pkBKAE1AAAAADoHYXJ0aWNsZUAASAhSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YQ==","isOnAB":false,"isNatural":0,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"缓冲区管理器","mention":"缓冲区管理器","matchorder":1,"begin":21255,"end":21261,"entityid":6079252876007201000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0007280004483100275,"attachedInfoBytes":"sgJoChLnvJPlhrLljLrnrqHnkIblmagSCENvbXB1dGVyGIemASCNpgEoATVI1z46OgdhcnRpY2xlQOuxufGAifauVEgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAt0BCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoS57yT5Yay5Yy6566h55CG5ZmoQOuxufGAifauVEgBUhJhaV9lbnRpdHlfcmVjYWxsZXJdSNc+OmJoChLnvJPlhrLljLrnrqHnkIblmagSCENvbXB1dGVyGIemASCNpgEoATVI1z46OgdhcnRpY2xlQOuxufGAifauVEgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"规划算法","mention":"规划算法","matchorder":1,"begin":81960,"end":81964,"entityid":-7336108300966818000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.0005985914265766255,"attachedInfoBytes":"sgJiCgzop4TliJLnrpfms5USB1Vua25vd24YqIAFIKyABSgBNcrqHDo6B2FydGljbGVAkZ7Q+OWLupiaAUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAtcBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoM6KeE5YiS566X5rOVQJGe0Pjli7qYmgFIAlIXYmFpZHUtYmFpa2UtaXRlbS1yZWNhbGxdyuocOmJiCgzop4TliJLnrpfms5USB1Vua25vd24YqIAFIKyABSgBNcrqHDo6B2FydGljbGVAkZ7Q+OWLupiaAUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"关键词","mention":"关键词","matchorder":2,"begin":9115,"end":9118,"entityid":-8542523220924371000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Food","score":0.0007385773059690251,"attachedInfoBytes":"sgJaCgnlhbPplK7or40SBEZvb2QYm0cgnkcoAjUVnUE6OgdhcnRpY2xlQIjjm9rAjLe5iQFIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh8gLHAQokOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZhGgdhcnRpY2xlIgkyMDAyOTgyODI6CeWFs+mUruivjUCI45vawIy3uYkBSANSEmFpX2VudGl0eV9yZWNhbGxlcl0VnUE6YloKCeWFs+mUruivjRIERm9vZBibRyCeRygCNRWdQTo6B2FydGljbGVAiOOb2sCMt7mJAUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"节点分裂","mention":"节点分裂","matchorder":1,"begin":17602,"end":17606,"entityid":470406409522267840,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Math","score":0.0005478448254456342,"attachedInfoBytes":"sgJeCgzoioLngrnliIboo4ISBE1hdGgYwokBIMaJASgBNT6dDzo6B2FydGljbGVAo42R3bGEzsMGSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YfICzQEKJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YRoHYXJ0aWNsZSIJMjAwMjk4MjgyOgzoioLngrnliIboo4JAo42R3bGEzsMGSARSEmFpX2VudGl0eV9yZWNhbGxlcl0+nQ86Yl4KDOiKgueCueWIhuijghIETWF0aBjCiQEgxokBKAE1Pp0POjoHYXJ0aWNsZUCjjZHdsYTOwwZIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"根节点","mention":"根节点","matchorder":1,"begin":16196,"end":16199,"entityid":-2939944860726628000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Math","score":0.0005264873895936516,"attachedInfoBytes":"sgJaCgnmoLnoioLngrkSBE1hdGgYxH4gx34oATX4Awo6OgdhcnRpY2xlQJvknamc982Z1wFIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh8gLHAQokOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZhGgdhcnRpY2xlIgkyMDAyOTgyODI6CeagueiKgueCuUCb5J2pnPfNmdcBSAVSEmFpX2VudGl0eV9yZWNhbGxlcl34Awo6YloKCeagueiKgueCuRIETWF0aBjEfiDHfigBNfgDCjo6B2FydGljbGVAm+SdqZz3zZnXAUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"批量加载","mention":"批量加载","matchorder":1,"begin":15723,"end":15727,"entityid":-1141605059567321000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"OtherTerm","score":0.0006498854265181014,"attachedInfoBytes":"sgJiCgzmibnph4\u002FliqDovb0SCU90aGVyVGVybRjreiDveigBNRNdKjo6B2FydGljbGVAh4HO9fKHjZTwAUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAtIBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoM5om56YeP5Yqg6L29QIeBzvXyh42U8AFIBlISYWlfZW50aXR5X3JlY2FsbGVyXRNdKjpiYgoM5om56YeP5Yqg6L29EglPdGhlclRlcm0Y63og73ooATUTXSo6OgdhcnRpY2xlQIeBzvXyh42U8AFIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"数据库系统","mention":"数据库系统","matchorder":1,"begin":21190,"end":21195,"entityid":5723504219404077000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0008523657692189185,"attachedInfoBytes":"sgJlCg\u002FmlbDmja7lupPns7vnu58SCENvbXB1dGVyGMalASDLpQEoATVMcV86OgdhcnRpY2xlQOiPnuC1mP62T0gAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAtcBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoP5pWw5o2u5bqT57O757ufQOiPnuC1mP62T0gHUhJhaV9lbnRpdHlfcmVjYWxsZXJdTHFfOmJlCg\u002FmlbDmja7lupPns7vnu58SCENvbXB1dGVyGMalASDLpQEoATVMcV86OgdhcnRpY2xlQOiPnuC1mP62T0gAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"关系数据库","mention":"关系数据库","matchorder":1,"begin":1759,"end":1764,"entityid":6731456503697010000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0008467812398883987,"attachedInfoBytes":"sgJjCg\u002FlhbPns7vmlbDmja7lupMSCENvbXB1dGVyGN8NIOQNKAE1h\u002FpdOjoHYXJ0aWNsZUDx1une54C8tV1IAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh8gLVAQokOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZhGgdhcnRpY2xlIgkyMDAyOTgyODI6D+WFs+ezu+aVsOaNruW6k0Dx1une54C8tV1ICFISYWlfZW50aXR5X3JlY2FsbGVyXYf6XTpiYwoP5YWz57O75pWw5o2u5bqTEghDb21wdXRlchjfDSDkDSgBNYf6XTo6B2FydGljbGVA8dbp3ueAvLVdSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YQ==","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"访问模式","mention":"访问模式","matchorder":1,"begin":1932,"end":1936,"entityid":159523530604225200,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0006464416605826383,"attachedInfoBytes":"sgJgCgzorr\u002Fpl67mqKHlvI8SCENvbXB1dGVyGIwPIJAPKAE193UpOjoHYXJ0aWNsZUC+xez35LmvmwJIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh8gLPAQokOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZhGgdhcnRpY2xlIgkyMDAyOTgyODI6DOiuv+mXruaooeW8j0C+xez35LmvmwJICVISYWlfZW50aXR5X3JlY2FsbGVyXfd1KTpiYAoM6K6\u002F6Zeu5qih5byPEghDb21wdXRlchiMDyCQDygBNfd1KTo6B2FydGljbGVAvsXs9+S5r5sCSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YQ==","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"共享锁","mention":"共享锁","matchorder":1,"begin":89128,"end":89131,"entityid":1395980476570342000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.0005496671328608146,"attachedInfoBytes":"sgJeCgnlhbHkuqvplIESB1Vua25vd24YqLgFIKu4BSgBNYkXEDo6B2FydGljbGVAn6Tsmo6b4a8TSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YfICzwEKJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YRoHYXJ0aWNsZSIJMjAwMjk4MjgyOgnlhbHkuqvplIFAn6Tsmo6b4a8TSApSF2JhaWR1LWJhaWtlLWl0ZW0tcmVjYWxsXYkXEDpiXgoJ5YWx5Lqr6ZSBEgdVbmtub3duGKi4BSCruAUoATWJFxA6OgdhcnRpY2xlQJ+k7JqOm+GvE0gAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"数据库管理系统","mention":"数据库管理系统","matchorder":1,"begin":21137,"end":21144,"entityid":-7754775896578089000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.000913535103466992,"attachedInfoBytes":"sgJrChXmlbDmja7lupPnrqHnkIbns7vnu58SB1Vua25vd24YkaUBIJilASgBNU56bzo6B2FydGljbGVA8cLO3YmN4LCUAUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAukBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoV5pWw5o2u5bqT566h55CG57O757ufQPHCzt2JjeCwlAFIC1IXYmFpZHUtYmFpa2UtaXRlbS1yZWNhbGxdTnpvOmJrChXmlbDmja7lupPnrqHnkIbns7vnu58SB1Vua25vd24YkaUBIJilASgBNU56bzo6B2FydGljbGVA8cLO3YmN4LCUAUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"动态规划","mention":"动态规划","matchorder":1,"begin":81958,"end":81962,"entityid":8592629113082556000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.0010003281987922275,"attachedInfoBytes":"sgJhCgzliqjmgIHop4TliJISB1Vua25vd24YpoAFIKqABSgBNXIdgzo6B2FydGljbGVAoeHcn\u002FHUyZ93SABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YfIC3QEKJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YRoHYXJ0aWNsZSIJMjAwMjk4MjgyOgzliqjmgIHop4TliJJAoeHcn\u002FHUyZ93SAxSH25ld19iYWlkdS13aWtpcGVkaWEtaXRlbS1yZWNhbGxdch2DOmJhCgzliqjmgIHop4TliJISB1Vua25vd24YpoAFIKqABSgBNXIdgzo6B2FydGljbGVAoeHcn\u002FHUyZ93SABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YQ==","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"聚集索引","mention":"聚集索引","matchorder":3,"begin":17628,"end":17632,"entityid":8558205283353867000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0006901558695248597,"attachedInfoBytes":"sgJiCgzogZrpm4bntKLlvJUSCENvbXB1dGVyGNyJASDgiQEoAzWU6zQ6OgdhcnRpY2xlQObktqnKy7bidkgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAtEBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoM6IGa6ZuG57Si5byVQObktqnKy7bidkgNUhJhaV9lbnRpdHlfcmVjYWxsZXJdlOs0OmJiCgzogZrpm4bntKLlvJUSCENvbXB1dGVyGNyJASDgiQEoAzWU6zQ6OgdhcnRpY2xlQObktqnKy7bidkgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"不固定长度","mention":"不固定长度","matchorder":1,"begin":3527,"end":3532,"entityid":-6568408990000523000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0005895576050124821,"attachedInfoBytes":"sgJkCg\u002FkuI3lm7rlrprplb\u002FluqYSCENvbXB1dGVyGMcbIMwbKAE1i4waOjoHYXJ0aWNsZUDCraWcsdqU7KQBSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YfIC1wEKJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YRoHYXJ0aWNsZSIJMjAwMjk4MjgyOg\u002FkuI3lm7rlrprplb\u002FluqZAwq2lnLHalOykAUgOUhJhaV9lbnRpdHlfcmVjYWxsZXJdi4waOmJkCg\u002FkuI3lm7rlrprplb\u002FluqYSCENvbXB1dGVyGMcbIMwbKAE1i4waOjoHYXJ0aWNsZUDCraWcsdqU7KQBSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YQ==","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"迭代器","mention":"迭代器","matchorder":1,"begin":78094,"end":78097,"entityid":-316952798769198140,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.0005880080271699973,"attachedInfoBytes":"sgJfCgnov63ku6PlmagSB1Vua25vd24YjuIEIJHiBCgBNY0kGjo6B2FydGljbGVA2Zev1r2j\u002Fcz7AUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAtEBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoJ6L+t5Luj5ZmoQNmXr9a9o\u002F3M+wFID1IXYmFpZHUtYmFpa2UtaXRlbS1yZWNhbGxdjSQaOmJfCgnov63ku6PlmagSB1Vua25vd24YjuIEIJHiBCgBNY0kGjo6B2FydGljbGVA2Zev1r2j\u002Fcz7AUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"缓冲帧","mention":"缓冲帧","matchorder":1,"begin":22646,"end":22649,"entityid":-613364128081960100,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0005147264694076899,"attachedInfoBytes":"sgJgCgnnvJPlhrLluKcSCENvbXB1dGVyGPawASD5sAEoATW17gY6OgdhcnRpY2xlQLbH1J20krm+9wFIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh8gLNAQokOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZhGgdhcnRpY2xlIgkyMDAyOTgyODI6Cee8k+WGsuW4p0C2x9SdtJK5vvcBSBBSEmFpX2VudGl0eV9yZWNhbGxlcl217gY6YmAKCee8k+WGsuW4pxIIQ29tcHV0ZXIY9rABIPmwASgBNbXuBjo6B2FydGljbGVAtsfUnbSSub73AUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"hash函数","mention":"hash函数","matchorder":1,"begin":46144,"end":46150,"entityid":-1680777499224215300,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.0009205084028191535,"attachedInfoBytes":"sgJgCgpoYXNo5Ye95pWwEgdVbmtub3duGMDoAiDG6AIoATVGTnE6OgdhcnRpY2xlQOzhlaLQuKvW6AFIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh8gLTAQokOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZhGgdhcnRpY2xlIgkyMDAyOTgyODI6Cmhhc2jlh73mlbBA7OGVotC4q9boAUgSUhdiYWlkdS1iYWlrZS1pdGVtLXJlY2FsbF1GTnE6YmAKCmhhc2jlh73mlbASB1Vua25vd24YwOgCIMboAigBNUZOcTo6B2FydGljbGVA7OGVotC4q9boAUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"时间复杂度","mention":"时间复杂度","matchorder":1,"begin":9199,"end":9204,"entityid":-131970452204240370,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.0006927813222772777,"attachedInfoBytes":"sgJjCg\u002Fml7bpl7TlpI3mnYLluqYSB1Vua25vd24Y70cg9EcoATXEmzU6OgdhcnRpY2xlQIuEk9yqssmV\u002FgFIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh8gLjAQokOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZhGgdhcnRpY2xlIgkyMDAyOTgyODI6D+aXtumXtOWkjeadguW6pkCLhJPcqrLJlf4BSBNSH25ld19iYWlkdS13aWtpcGVkaWEtaXRlbS1yZWNhbGxdxJs1OmJjCg\u002Fml7bpl7TlpI3mnYLluqYSB1Vua25vd24Y70cg9EcoATXEmzU6OgdhcnRpY2xlQIuEk9yqssmV\u002FgFIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"磁盘空间管理","mention":"磁盘空间管理","matchorder":1,"begin":21149,"end":21155,"entityid":3285077935372638700,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"OtherTerm","score":0.0006871378786231369,"attachedInfoBytes":"sgJpChLno4Hnm5jnqbrpl7TnrqHnkIYSCU90aGVyVGVybRidpQEgo6UBKAE1CyE0OjoHYXJ0aWNsZUDHtPCqop+8yy1IAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh8gLeAQokOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZhGgdhcnRpY2xlIgkyMDAyOTgyODI6EuejgeebmOepuumXtOeuoeeQhkDHtPCqop+8yy1IFFISYWlfZW50aXR5X3JlY2FsbGVyXQshNDpiaQoS56OB55uY56m66Ze0566h55CGEglPdGhlclRlcm0YnaUBIKOlASgBNQshNDo6B2FydGljbGVAx7TwqqKfvMstSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YQ==","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"父节点","mention":"父节点","matchorder":2,"begin":13450,"end":13453,"entityid":4485001213905659000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Math","score":0.0005302826154999149,"attachedInfoBytes":"sgJZCgnniLboioLngrkSBE1hdGgYimkgjWkoAjWqAgs6OgdhcnRpY2xlQMrGq+D2mvuePkgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAsUBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoJ54i26IqC54K5QMrGq+D2mvuePkgVUhJhaV9lbnRpdHlfcmVjYWxsZXJdqgILOmJZCgnniLboioLngrkSBE1hdGgYimkgjWkoAjWqAgs6OgdhcnRpY2xlQMrGq+D2mvuePkgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"factor","mention":"factor","matchorder":2,"begin":16169,"end":16175,"entityid":361693365783625150,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Medical","score":0.0008986693866167988,"attachedInfoBytes":"sgJZCgZmYWN0b3ISB01lZGljYWwYqX4gr34oAjWvlGs6OgdhcnRpY2xlQMX7l8myxr+CBUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAsIBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoGZmFjdG9yQMX7l8myxr+CBUgWUhJhaV9lbnRpdHlfcmVjYWxsZXJdr5RrOmJZCgZmYWN0b3ISB01lZGljYWwYqX4gr34oAjWvlGs6OgdhcnRpY2xlQMX7l8myxr+CBUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"成本函数","mention":"成本函数","matchorder":1,"begin":74403,"end":74407,"entityid":6144060030279824000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.0007337550131501502,"attachedInfoBytes":"sgJhCgzmiJDmnKzlh73mlbASB1Vua25vd24Yo8UEIKfFBCgBNXdZQDo6B2FydGljbGVAxOuE\u002FLfBhaJVSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YfIC1QEKJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YRoHYXJ0aWNsZSIJMjAwMjk4MjgyOgzmiJDmnKzlh73mlbBAxOuE\u002FLfBhaJVSBdSF2JhaWR1LWJhaWtlLWl0ZW0tcmVjYWxsXXdZQDpiYQoM5oiQ5pys5Ye95pWwEgdVbmtub3duGKPFBCCnxQQoATV3WUA6OgdhcnRpY2xlQMTrhPy3wYWiVUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"数据结构","mention":"数据结构","matchorder":1,"begin":1712,"end":1716,"entityid":8175049225066598000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0006738721679029266,"attachedInfoBytes":"sgJgCgzmlbDmja7nu5PmnoQSCENvbXB1dGVyGLANILQNKAE1zKYwOjoHYXJ0aWNsZUCXobXLz\u002F7muXFIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh8gLPAQokOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZhGgdhcnRpY2xlIgkyMDAyOTgyODI6DOaVsOaNrue7k+aehECXobXLz\u002F7muXFIGFISYWlfZW50aXR5X3JlY2FsbGVyXcymMDpiYAoM5pWw5o2u57uT5p6EEghDb21wdXRlchiwDSC0DSgBNcymMDo6B2FydGljbGVAl6G1y8\u002F+5rlxSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YQ==","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"sql语句","mention":"sql语句","matchorder":1,"begin":0,"end":0,"entityid":-7903933116321249000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.0012046357982903322,"attachedInfoBytes":"sgJbCglzcWzor63lj6USB1Vua25vd24YACAAKAE13+SdOjoHYXJ0aWNsZUDMjeeJ0tblp5IBSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YfICzQEKJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YRoHYXJ0aWNsZSIJMjAwMjk4MjgyOglzcWzor63lj6VAzI3nidLW5aeSAUgaUhdiYWlkdS1iYWlrZS1pdGVtLXJlY2FsbF3f5J06YlsKCXNxbOivreWPpRIHVW5rbm93bhgAIAAoATXf5J06OgdhcnRpY2xlQMyN54nS1uWnkgFIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"叶子节点","mention":"叶子节点","matchorder":2,"begin":13214,"end":13218,"entityid":6062094603264387000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0006711743599322334,"attachedInfoBytes":"sgJgCgzlj7blrZDoioLngrkSCENvbXB1dGVyGJ5nIKJnKAI1wPEvOjoHYXJ0aWNsZUCizIvzxd24kFRIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh8gLPAQokOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZhGgdhcnRpY2xlIgkyMDAyOTgyODI6DOWPtuWtkOiKgueCuUCizIvzxd24kFRIG1ISYWlfZW50aXR5X3JlY2FsbGVyXcDxLzpiYAoM5Y+25a2Q6IqC54K5EghDb21wdXRlchieZyCiZygCNcDxLzo6B2FydGljbGVAosyL88XduJBUSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YQ==","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"平衡树","mention":"平衡树","matchorder":1,"begin":9341,"end":9344,"entityid":-7233886892294073000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0006640176529753433,"attachedInfoBytes":"sgJeCgnlubPooaHmoJESCENvbXB1dGVyGP1IIIBJKAE1eBEuOjoHYXJ0aWNsZUCGpNT7q8aEzpsBSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YfICywEKJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YRoHYXJ0aWNsZSIJMjAwMjk4MjgyOgnlubPooaHmoJFAhqTU+6vGhM6bAUgcUhJhaV9lbnRpdHlfcmVjYWxsZXJdeBEuOmJeCgnlubPooaHmoJESCENvbXB1dGVyGP1IIIBJKAE1eBEuOjoHYXJ0aWNsZUCGpNT7q8aEzpsBSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YQ==","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"排序文件","mention":"排序文件","matchorder":1,"begin":5127,"end":5131,"entityid":-5240103422825987000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0006456407925273955,"attachedInfoBytes":"sgJhCgzmjpLluo\u002Fmlofku7YSCENvbXB1dGVyGIcoIIsoKAE1OEApOjoHYXJ0aWNsZUCGh5iBtLbao7cBSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YfIC0QEKJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YRoHYXJ0aWNsZSIJMjAwMjk4MjgyOgzmjpLluo\u002Fmlofku7ZAhoeYgbS22qO3AUgdUhJhaV9lbnRpdHlfcmVjYWxsZXJdOEApOmJhCgzmjpLluo\u002Fmlofku7YSCENvbXB1dGVyGIcoIIsoKAE1OEApOjoHYXJ0aWNsZUCGh5iBtLbao7cBSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YQ==","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"数据库","mention":"数据库","matchorder":1,"begin":523,"end":526,"entityid":2020349860118997500,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Food","score":0.0006196173395276883,"attachedInfoBytes":"sgJZCgnmlbDmja7lupMSBEZvb2QYiwQgjgQoATXRbSI6OgdhcnRpY2xlQKrUnLPlr+6EHEgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAsUBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoJ5pWw5o2u5bqTQKrUnLPlr+6EHEgeUhJhaV9lbnRpdHlfcmVjYWxsZXJd0W0iOmJZCgnmlbDmja7lupMSBEZvb2QYiwQgjgQoATXRbSI6OgdhcnRpY2xlQKrUnLPlr+6EHEgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"伪代码","mention":"伪代码","matchorder":1,"begin":61928,"end":61931,"entityid":4330445928949996500,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.0005445180666639963,"attachedInfoBytes":"sgJeCgnkvKrku6PnoIESB1Vua25vd24Y6OMDIOvjAygBNf29Djo6B2FydGljbGVArrbnkI+0tYw8SABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YfICzwEKJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YRoHYXJ0aWNsZSIJMjAwMjk4MjgyOgnkvKrku6PnoIFArrbnkI+0tYw8SB9SF2JhaWR1LWJhaWtlLWl0ZW0tcmVjYWxsXf29DjpiXgoJ5Lyq5Luj56CBEgdVbmtub3duGOjjAyDr4wMoATX9vQ46OgdhcnRpY2xlQK6255CPtLWMPEgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"buffer pool","mention":"buffer pool","matchorder":1,"begin":21865,"end":21876,"entityid":-2867020219618300400,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Medical","score":0.0016436818685061638,"attachedInfoBytes":"sgJhCgtidWZmZXIgcG9vbBIHTWVkaWNhbBjpqgEg9KoBKAE10HDXOjoHYXJ0aWNsZUDJ3aeuzomTm9gBSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YfIC0AEKJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YRoHYXJ0aWNsZSIJMjAwMjk4MjgyOgtidWZmZXIgcG9vbEDJ3aeuzomTm9gBSCBSEmFpX2VudGl0eV9yZWNhbGxlcl3QcNc6YmEKC2J1ZmZlciBwb29sEgdNZWRpY2FsGOmqASD0qgEoATXQcNc6OgdhcnRpY2xlQMndp67OiZOb2AFIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"双向链表","mention":"双向链表","matchorder":1,"begin":9979,"end":9983,"entityid":-184258595912812580,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Computer","score":0.0006768666087095532,"attachedInfoBytes":"sgJhCgzlj4zlkJHpk77ooagSCENvbXB1dGVyGPtNIP9NKAE1wG8xOjoHYXJ0aWNsZUDf77eeiLnYuP0BSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YfIC0QEKJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YRoHYXJ0aWNsZSIJMjAwMjk4MjgyOgzlj4zlkJHpk77ooahA3++3noi52Lj9AUghUhJhaV9lbnRpdHlfcmVjYWxsZXJdwG8xOmJhCgzlj4zlkJHpk77ooagSCENvbXB1dGVyGPtNIP9NKAE1wG8xOjoHYXJ0aWNsZUDf77eeiLnYuP0BSABSJDhiNjZkMzE3LWQ1ODItNDFlYS05ZTljLTc3YTgxZDNkODM2YQ==","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"关系代数","mention":"关系代数","matchorder":1,"begin":74272,"end":74276,"entityid":-4905542829953507000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.0006574228794206105,"attachedInfoBytes":"sgJiCgzlhbPns7vku6PmlbASB1Vua25vd24YoMQEIKTEBCgBNedWLDo6B2FydGljbGVA7r2g8ZbZgPa7AUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAtcBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoM5YWz57O75Luj5pWwQO69oPGW2YD2uwFIIlIXYmFpZHUtYmFpa2UtaXRlbS1yZWNhbGxd51YsOmJiCgzlhbPns7vku6PmlbASB1Vua25vd24YoMQEIKTEBCgBNedWLDo6B2FydGljbGVA7r2g8ZbZgPa7AUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"内存地址","mention":"内存地址","matchorder":1,"begin":23140,"end":23144,"entityid":-6046742176151907000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Unknown","score":0.0005777479465558823,"attachedInfoBytes":"sgJiCgzlhoXlrZjlnLDlnYASB1Vua25vd24Y5LQBIOi0ASgBNQJ0Fzo6B2FydGljbGVA6qbf8PGA6oqsAUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAtcBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoM5YaF5a2Y5Zyw5Z2AQOqm3\u002FDxgOqKrAFII1IXYmFpZHUtYmFpa2UtaXRlbS1yZWNhbGxdAnQXOmJiCgzlhoXlrZjlnLDlnYASB1Vua25vd24Y5LQBIOi0ASgBNQJ0Fzo6B2FydGljbGVA6qbf8PGA6oqsAUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmE=","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""},{"name":"驱逐策略","mention":"驱逐策略","matchorder":1,"begin":21928,"end":21932,"entityid":-3791363698077925000,"isBookMark":false,"link":{"linkType":0,"linkUrl":"","docType":"","topicToken":""},"entityClass":"Psychology","score":0.000523820627918491,"attachedInfoBytes":"sgJlCgzpqbHpgJDnrZbnlaUSClBzeWNob2xvZ3kYqKsBIKyrASgBNQJRCTo6B2FydGljbGVAxoSEzt3Zl7HLAUgAUiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmHyAtUBCiQ4YjY2ZDMxNy1kNTgyLTQxZWEtOWU5Yy03N2E4MWQzZDgzNmEaB2FydGljbGUiCTIwMDI5ODI4MjoM6amx6YCQ562W55WlQMaEhM7d2ZexywFIJFISYWlfZW50aXR5X3JlY2FsbGVyXQJRCTpiZQoM6amx6YCQ562W55WlEgpQc3ljaG9sb2d5GKirASCsqwEoATUCUQk6OgdhcnRpY2xlQMaEhM7d2ZexywFIAFIkOGI2NmQzMTctZDU4Mi00MWVhLTllOWMtNzdhODFkM2Q4MzZh","isOnAB":false,"isNatural":1,"isDelete":false,"contentType":"","contentId":"","contentToken":""}],"id":504749706,"title":"CS186 2022 spring 个人笔记","type":"article","articleType":"normal","excerptTitle":"","url":"https:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F504749706","imageUrl":"","titleImage":"","excerpt":"\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-719006b34ad5610560ccadc9dd3de679_200x112.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1247\" data-rawheight=\"912\" data-watermark=\"original\" data-original-src=\"v2-719006b34ad5610560ccadc9dd3de679\" data-watermark-src=\"v2-e7630ef73ffcd0cbbcdd4ec31a7e81df\" data-private-watermark-src=\"\" class=\"origin_image inline-img zh-lightbox-thumb\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-719006b34ad5610560ccadc9dd3de679_r.jpg\"\u002F\u003E\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fcs186berkeley.net\u002F\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EHome\u003C\u002Fa\u003E \u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Fberkeley-cs186\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003Eproject &amp; source\u003C\u002Fa\u003E1+2. Introduction + SQL I &amp; SQL II前两节主要介绍了数据库的相关应用, 讲了点sql语言, 课程的精华都在 notes里。所以这两节就不做笔记了。 3. Disk, Buffers, Files IDBMS的结构: 特点: 分层构造每层都是下层的抽象 1 Memory and Di…","created":1650870508,"updated":1673694970,"author":{"isFollowed":false,"avatarUrlTemplate":"https:\u002F\u002Fpicx.zhimg.com\u002Fv2-fd86dc089550597e6f32169769ee6133.jpg?source=172ae18b","uid":"1122050983038947328","userType":"people","isFollowing":false,"urlToken":"zhong-ying-73-36-26","id":"78fc253075af27faf2eb90f6b5b60217","description":"","name":"湖心亭","isAdvertiser":false,"headline":"独往湖心亭看雪","gender":0,"url":"\u002Fpeople\u002F78fc253075af27faf2eb90f6b5b60217","avatarUrl":"https:\u002F\u002Fpicx.zhimg.com\u002Fv2-fd86dc089550597e6f32169769ee6133_l.jpg?source=172ae18b","isOrg":false,"type":"people","badge":[],"badgeV2":{"title":"","mergedBadges":[],"detailBadges":[],"icon":"","nightIcon":""},"exposedMedal":{"medalId":"972460827463282688","medalName":"表示赞同","avatarUrl":"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-1df62083e2d16ce5e82c3049e5d11e14_r.png?source=172ae18b","miniAvatarUrl":"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-1df62083e2d16ce5e82c3049e5d11e14_l.png?source=172ae18b","description":"赞同 1000 次","medalAvatarFrame":""}},"commentPermission":"all","copyrightPermission":"need_review","state":"published","ipInfo":"IP 属地江西","imageWidth":0,"imageHeight":0,"content":"\u003Cp\u003E\u003C\u002Fp\u003E\u003Cp\u003E\u003C\u002Fp\u003E\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fcs186berkeley.net\u002F\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003EHome\u003C\u002Fa\u003E\u003Cp\u003E\u003Cbr\u002F\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ca href=\"https:\u002F\u002Flink.zhihu.com\u002F?target=https%3A\u002F\u002Fgithub.com\u002Fberkeley-cs186\" data-draft-node=\"block\" data-draft-type=\"link-card\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003Eproject &amp; source\u003C\u002Fa\u003E\u003Ch2\u003E1+2. Introduction + SQL I &amp;  SQL II\u003C\u002Fh2\u003E\u003Cp data-pid=\"bSJvmP9q\"\u003E前两节主要介绍了数据库的相关应用, 讲了点sql语言, 课程的精华都在 notes里。所以这两节就不做笔记了。\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-2b032167c7b3c3809fd2bfb4515e902e_b.jpg\" data-size=\"normal\" class=\"content_image\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;0&#39; height=&#39;0&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" class=\"content_image lazy\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-2b032167c7b3c3809fd2bfb4515e902e_b.jpg\" data-original-token=\"v2-2b032167c7b3c3809fd2bfb4515e902e\"\u002F\u003E\u003Cfigcaption\u003EImage\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch2\u003E3. Disk, Buffers, Files I\u003C\u002Fh2\u003E\u003Cp data-pid=\"eBMpT3D-\"\u003EDBMS的结构:\u003C\u002Fp\u003E\u003Cp data-pid=\"1dyIpm0l\"\u003E特点:\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-719006b34ad5610560ccadc9dd3de679_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1247\" data-rawheight=\"912\" class=\"origin_image zh-lightbox-thumb\" width=\"1247\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-719006b34ad5610560ccadc9dd3de679_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1247&#39; height=&#39;912&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1247\" data-rawheight=\"912\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1247\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-719006b34ad5610560ccadc9dd3de679_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-719006b34ad5610560ccadc9dd3de679_b.jpg\" data-original-token=\"v2-719006b34ad5610560ccadc9dd3de679\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cul\u003E\u003Cli data-pid=\"VD2dT1CR\"\u003E分层构造\u003C\u002Fli\u003E\u003Cli data-pid=\"3v4mhM7B\"\u003E每层都是下层的抽象\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E1 Memory and Disk 内存和磁盘\u003C\u002Fh3\u003E\u003Cp data-pid=\"R_cIPQ4Y\"\u003E当数据库处理数据时,该数据必须存在于内存中.因为这样访问该数据的速度相对较快,但是一旦数据变得非常大,就不可能将所有数据都放入内存中.使用磁盘来存储数据相对于内存来说比较廉价,但是当访问数据或写入数据时,磁盘都会产生大量成本.\u003C\u002Fp\u003E\u003Ch3\u003E2 Files, Pages, Records 文件 页 记录\u003C\u002Fh3\u003E\u003Cp data-pid=\"D908LMXS\"\u003E文件是一种存储在外存上的数据结构, 它由大量性质相同的记录组成.\u003C\u002Fp\u003E\u003Cp data-pid=\"MeDN0GFy\"\u003E关系数据库的数据单位是一条记录（行）.这些记录被组织成关系（表）,并且可以在内存中进行修改,删除,搜索或创建.\u003C\u002Fp\u003E\u003Cp data-pid=\"fQ0-12ll\"\u003E磁盘的基本数据单位是页,这是从磁盘到内存的最小传输单位,反之亦然.为了与磁盘兼容的格式表示关系数据库,每个关系都存储在其自己的文件中,并且其记录被组织到文件中的页中.根据关系的模式和访问模式,数据库将确定：\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"yQlRI9Sa\"\u003E(1) 使用的文件类型\u003C\u002Fli\u003E\u003Cli data-pid=\"IDn0I-fH\"\u003E(2) 页在文件中的组织方式\u003C\u002Fli\u003E\u003Cli data-pid=\"7qsERHem\"\u003E(3) 每一页上的记录是如何组织的\u003C\u002Fli\u003E\u003Cli data-pid=\"HXJlDgJ7\"\u003E(4) 以及每个记录的格式\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch3\u003E3 表 页的结构\u003C\u002Fh3\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-c2dbad3582241b12d5c674e1bef56830_b.jpg\" data-size=\"normal\" data-rawwidth=\"1410\" data-rawheight=\"605\" class=\"origin_image zh-lightbox-thumb\" width=\"1410\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-c2dbad3582241b12d5c674e1bef56830_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1410&#39; height=&#39;605&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1410\" data-rawheight=\"605\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1410\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-c2dbad3582241b12d5c674e1bef56830_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-c2dbad3582241b12d5c674e1bef56830_b.jpg\" data-original-token=\"v2-c2dbad3582241b12d5c674e1bef56830\"\u002F\u003E\u003Cfigcaption\u003E表储存为许多逻辑文件，逻辑文件由许多页构成，（文件结构在后面会提到）。每个页可以存放多个records， records就是表的一行。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d30769f4ab79c15b29cb3915fc3179ba_b.jpg\" data-size=\"normal\" data-rawwidth=\"1399\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb\" width=\"1399\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d30769f4ab79c15b29cb3915fc3179ba_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1399&#39; height=&#39;649&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1399\" data-rawheight=\"649\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1399\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d30769f4ab79c15b29cb3915fc3179ba_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d30769f4ab79c15b29cb3915fc3179ba_b.jpg\" data-original-token=\"v2-d30769f4ab79c15b29cb3915fc3179ba\"\u002F\u003E\u003Cfigcaption\u003E页是I\u002FO的基本单位，通常页的大小为64kb。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-e4fb5f4328780eccdbfecd88907a5f46_b.jpg\" data-size=\"normal\" data-rawwidth=\"1426\" data-rawheight=\"662\" class=\"origin_image zh-lightbox-thumb\" width=\"1426\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-e4fb5f4328780eccdbfecd88907a5f46_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1426&#39; height=&#39;662&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1426\" data-rawheight=\"662\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1426\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-e4fb5f4328780eccdbfecd88907a5f46_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-e4fb5f4328780eccdbfecd88907a5f46_b.jpg\" data-original-token=\"v2-e4fb5f4328780eccdbfecd88907a5f46\"\u002F\u003E\u003Cfigcaption\u003E页的内部结构，页眉会保存页的相关信息：记录的records数量；指向free space的指针；位图（用于维护固定长度的records）；page的剩余空间..\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"JPK6X01n\"\u003Erecords分为固定长度（FLR）和不固定长度(VLR)，前者每个字段都是固定字节的类型，相同模式（schema）的FLR有相等的字节大小， VLR可以保存固定和可变的字段。\u003C\u002Fp\u003E\u003Cp data-pid=\"mAn4cdF8\"\u003E只储存FLR的page：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-6a167fc622fbaff0c83fe0593f07b734_b.jpg\" data-size=\"normal\" data-rawwidth=\"1453\" data-rawheight=\"770\" class=\"origin_image zh-lightbox-thumb\" width=\"1453\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-6a167fc622fbaff0c83fe0593f07b734_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1453&#39; height=&#39;770&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1453\" data-rawheight=\"770\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1453\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-6a167fc622fbaff0c83fe0593f07b734_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-6a167fc622fbaff0c83fe0593f07b734_b.jpg\" data-original-token=\"v2-6a167fc622fbaff0c83fe0593f07b734\"\u002F\u003E\u003Cfigcaption\u003Epacked方式：删除后需要调整使得每个record之间没有空袭，每次插入都在末尾。 unpacked 运用bitmap维护删除和插入。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"JBsECAzF\"\u003E存储VLR的page：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-0a938f64f3fbe8957adfc085ee52522d_b.jpg\" data-size=\"normal\" data-rawwidth=\"1327\" data-rawheight=\"742\" class=\"origin_image zh-lightbox-thumb\" width=\"1327\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-0a938f64f3fbe8957adfc085ee52522d_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1327&#39; height=&#39;742&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1327\" data-rawheight=\"742\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1327\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-0a938f64f3fbe8957adfc085ee52522d_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-0a938f64f3fbe8957adfc085ee52522d_b.jpg\" data-original-token=\"v2-0a938f64f3fbe8957adfc085ee52522d\"\u002F\u003E\u003Cfigcaption\u003E页眉并非在开头，而是在最后面，像链表一样往前增长，存储指针。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-99ee3d095b4557a5a0e48f27dd8674d3_b.jpg\" data-size=\"normal\" data-rawwidth=\"1421\" data-rawheight=\"707\" class=\"origin_image zh-lightbox-thumb\" width=\"1421\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-99ee3d095b4557a5a0e48f27dd8674d3_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1421&#39; height=&#39;707&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1421\" data-rawheight=\"707\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1421\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-99ee3d095b4557a5a0e48f27dd8674d3_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-99ee3d095b4557a5a0e48f27dd8674d3_b.jpg\" data-original-token=\"v2-99ee3d095b4557a5a0e48f27dd8674d3\"\u002F\u003E\u003Cfigcaption\u003E槽页的两种布局。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"li9R172E\"\u003E\u003Cb\u003E可以看出VLR 的 unpacked方式中，删除操作可能会造成磁盘碎片，造成空间的浪费。（\u003C\u002Fb\u003EFragmentation\u003Cb\u003E）\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Ch3\u003E4 Choosing File Types 选择文件类型\u003C\u002Fh3\u003E\u003Cp data-pid=\"iEkBzfFb\"\u003E文件有两种主要类型：堆文件和排序文件.对于每个关系,数据库都会根据该关系的访问模式的I\u002FO成本来选择要使用的文件类型.1个I\u002FO等效于从磁盘读取1页或写入磁盘1页,并且根据其访问模式中的插入,删除和扫描操作对每种文件类型进行I\u002FO计算.选择产生较少I\u002FO成本的文件类型.  \u003C\u002Fp\u003E\u003Cp data-pid=\"xAMrSM7r\"\u003E堆文件插入速度快 O(1)，但查找速度慢 O(N)；\u003C\u002Fp\u003E\u003Cp data-pid=\"09rogjLe\"\u003E排序文件插入速度慢，查找可以二分实现 O(logn)；\u003C\u002Fp\u003E\u003Cp data-pid=\"kwbPt8NI\"\u003E堆文件有两种实现方法： 链表和页目录。\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-6a7fcc928645d662d2b5fc4dde6af436_b.jpg\" data-size=\"normal\" data-rawwidth=\"1231\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb\" width=\"1231\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-6a7fcc928645d662d2b5fc4dde6af436_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1231&#39; height=&#39;387&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1231\" data-rawheight=\"387\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1231\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-6a7fcc928645d662d2b5fc4dde6af436_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-6a7fcc928645d662d2b5fc4dde6af436_b.jpg\" data-original-token=\"v2-6a7fcc928645d662d2b5fc4dde6af436\"\u002F\u003E\u003Cfigcaption\u003E链表实现堆文件。header page相当于链表表头，不存数据。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"ABeCe0up\"\u003E插入recode时遍历free page， 找到合适的page就写入。\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-63c5eb2c75e0ea7e425b1dc5c3af9c54_b.jpg\" data-size=\"normal\" data-rawwidth=\"604\" data-rawheight=\"472\" class=\"origin_image zh-lightbox-thumb\" width=\"604\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-63c5eb2c75e0ea7e425b1dc5c3af9c54_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;604&#39; height=&#39;472&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"604\" data-rawheight=\"472\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"604\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-63c5eb2c75e0ea7e425b1dc5c3af9c54_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-63c5eb2c75e0ea7e425b1dc5c3af9c54_b.jpg\" data-original-token=\"v2-63c5eb2c75e0ea7e425b1dc5c3af9c54\"\u002F\u003E\u003Cfigcaption\u003E页目录实现堆文件。每个Header Page有多个entry.\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"S0-xC4Sk\"\u003E●\u003Cb\u003EEach entry in a header page contains:\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"UuKP0w_y\"\u003E\u003Cb\u003EPointer to a data page \u003C\u002Fb\u003E\u003C\u002Fli\u003E\u003Cli data-pid=\"_vyxFuyc\"\u003E\u003Cb\u003EThe amount of free space for the data page \u003C\u002Fb\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"ZULPMWcn\"\u003E\u003Cb\u003E堆文件插入record：\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-cd3d4ad56ef5aeba45b372cdb3a8837c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1271\" data-rawheight=\"668\" class=\"origin_image zh-lightbox-thumb\" width=\"1271\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-cd3d4ad56ef5aeba45b372cdb3a8837c_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1271&#39; height=&#39;668&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1271\" data-rawheight=\"668\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1271\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-cd3d4ad56ef5aeba45b372cdb3a8837c_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-cd3d4ad56ef5aeba45b372cdb3a8837c_b.jpg\" data-original-token=\"v2-cd3d4ad56ef5aeba45b372cdb3a8837c\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-9fd4937f7a9bb5652cb0eb19a88bd134_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1395\" data-rawheight=\"743\" class=\"origin_image zh-lightbox-thumb\" width=\"1395\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-9fd4937f7a9bb5652cb0eb19a88bd134_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1395&#39; height=&#39;743&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1395\" data-rawheight=\"743\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1395\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-9fd4937f7a9bb5652cb0eb19a88bd134_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-9fd4937f7a9bb5652cb0eb19a88bd134_b.jpg\" data-original-token=\"v2-9fd4937f7a9bb5652cb0eb19a88bd134\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E5 Sorted Files 排序文件\u003C\u002Fh3\u003E\u003Cp data-pid=\"WwOwogX3\"\u003E排序文件是一种文件类型,其中页按顺序排序,并且每个页中的记录均按键排序.\u003C\u002Fp\u003E\u003Cp data-pid=\"zOTmi4PM\"\u003E这些文件是使用 \u003Ccode\u003E页目录\u003C\u002Fcode\u003E 实现的,并根据记录的排序方式对数据页执行排序.搜索排序的文件需要logN个I\u002FO,其中N=页数,因为可以使用二分搜索来查找包含记录的页.同时,通常情况下,插入需要logN+N个I\u002FO,因为需要二分搜索来找到要写入的页,并且该插入的记录可能会导致所有以后的记录都回退一个.平均而言,将需要推回N\u002F2页,这涉及到每个页的读取和写入IO,这将导致N I\u002FO项.\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-4b136d235fe1e793cbb88a25f3a840d0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"680\" data-rawheight=\"456\" class=\"origin_image zh-lightbox-thumb\" width=\"680\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-4b136d235fe1e793cbb88a25f3a840d0_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;680&#39; height=&#39;456&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"680\" data-rawheight=\"456\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"680\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-4b136d235fe1e793cbb88a25f3a840d0_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-4b136d235fe1e793cbb88a25f3a840d0_b.jpg\" data-original-token=\"v2-4b136d235fe1e793cbb88a25f3a840d0\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch2\u003E4.B+树\u003C\u002Fh2\u003E\u003Ch3\u003E4.0 index\u003C\u002Fh3\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-c46bd7ba33be7c423246933b3617159a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1772\" data-rawheight=\"590\" class=\"origin_image zh-lightbox-thumb\" width=\"1772\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-c46bd7ba33be7c423246933b3617159a_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1772&#39; height=&#39;590&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1772\" data-rawheight=\"590\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1772\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-c46bd7ba33be7c423246933b3617159a_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-c46bd7ba33be7c423246933b3617159a_b.jpg\" data-original-token=\"v2-c46bd7ba33be7c423246933b3617159a\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"Dr1m20t5\"\u003E索引可以存指向堆文件的指针， (&lt;key, recordId&gt;)\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-625629637c7c4f0d16e433c924f79f39_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1728\" data-rawheight=\"776\" class=\"origin_image zh-lightbox-thumb\" width=\"1728\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-625629637c7c4f0d16e433c924f79f39_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1728&#39; height=&#39;776&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1728\" data-rawheight=\"776\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1728\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-625629637c7c4f0d16e433c924f79f39_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-625629637c7c4f0d16e433c924f79f39_b.jpg\" data-original-token=\"v2-625629637c7c4f0d16e433c924f79f39\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003E\u003Cb\u003E4.1 引入\u003C\u002Fb\u003E\u003C\u002Fh3\u003E\u003Cp data-pid=\"KwF7u-11\"\u003E在介绍B+树之前， 我们需要引入一个问题： 如何在文件(表)中查找我们需要的数据（记录）呢？ \u003C\u002Fp\u003E\u003Cp data-pid=\"OO_7y6rm\"\u003E很直接的一个想法是把文件中的数据按关键词排序，然后二分，但是这样面对多次关键词查找就需要多次排序。\u003C\u002Fp\u003E\u003Cp data-pid=\"Cd3bCF8M\"\u003E改进 1：使用索引， 每次都对索引排序。 但这样的时间复杂度是 \u003Cimg src=\"https:\u002F\u002Fwww.zhihu.com\u002Fequation?tex=log_2n\" alt=\"log_2n\" eeimg=\"1\"\u002F\u003E , 底数是2与底数是100相比常数相差太大了。\u003C\u002Fp\u003E\u003Cp data-pid=\"WQdGFrg4\"\u003E改进 2：参考平衡树的构造，我们维护一个&#34;多叉的平衡树&#34;：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-0bdd5b073529ec554a87679dbcc5b798_b.jpg\" data-size=\"normal\" data-rawwidth=\"2346\" data-rawheight=\"841\" class=\"origin_image zh-lightbox-thumb\" width=\"2346\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-0bdd5b073529ec554a87679dbcc5b798_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;2346&#39; height=&#39;841&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"2346\" data-rawheight=\"841\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2346\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-0bdd5b073529ec554a87679dbcc5b798_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-0bdd5b073529ec554a87679dbcc5b798_b.jpg\" data-original-token=\"v2-0bdd5b073529ec554a87679dbcc5b798\"\u002F\u003E\u003Cfigcaption\u003EB+树\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cul\u003E\u003Cli data-pid=\"Ft8zm1I_\"\u003E每个节点有 2*d 个entries， 例子中 d = 2, 最多有 2d+1 个指向下一层的指针，称为 &#34;fanout&#34; , d称为阶\u003C\u002Fli\u003E\u003Cli data-pid=\"DJx41l4U\"\u003E叶节点保存date page的数据（page本身或者指向record的指针）， \u003Cb\u003E按键值维护排序。\u003C\u002Fb\u003E内部节点不保存record数据。相邻叶节点通过双向链表连接，便于进行范围查询。\u003C\u002Fli\u003E\u003Cli data-pid=\"14VWPN3G\"\u003E内部节点 ，比如 key = 24， 其左边的指针指向键值小于24的孩子， 右边指针指向键值大于等于24的孩子。\u003Cb\u003E内部节点的entries同样需要按键值维护排序。 \u003C\u002Fb\u003E\u003C\u002Fli\u003E\u003Cli data-pid=\"l0OxYmfp\"\u003E\u003Cb\u003EB+树有一个不变性（\u003C\u002Fb\u003Eoccupancy invariant\u003Cb\u003E）\u003C\u002Fb\u003E：每个节点的entry都大于等于 d ， （除非有删除操作，当然现实中删除和插入相比次数可以忽略不计），这是由B+树的构建，维护过程决定的。\u003C\u002Fli\u003E\u003Cli data-pid=\"Q52imFYi\"\u003EB+树的每个节点的entry都对应disk中的一个page。（也就意味着遍历树的过程中也有I\u002FO cost。叶节点如果是存指针的话也是对应一个page）\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp data-pid=\"okKc3Tw8\"\u003EB+树是一种有序的索引。\u003C\u002Fp\u003E\u003Ch3\u003E4.2 叶节点结构选择\u003C\u002Fh3\u003E\u003Cp data-pid=\"Za-2IRi8\"\u003EB+树的叶节点会保存数据，主要有三种选择：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-1e30ee91cad6ae219bd2c592506976d6_b.jpg\" data-size=\"normal\" data-rawwidth=\"2244\" data-rawheight=\"1212\" class=\"origin_image zh-lightbox-thumb\" width=\"2244\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-1e30ee91cad6ae219bd2c592506976d6_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;2244&#39; height=&#39;1212&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"2244\" data-rawheight=\"1212\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2244\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-1e30ee91cad6ae219bd2c592506976d6_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-1e30ee91cad6ae219bd2c592506976d6_b.jpg\" data-original-token=\"v2-1e30ee91cad6ae219bd2c592506976d6\"\u002F\u003E\u003Cfigcaption\u003E叶节点直接存data page\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-085ea5e39c2b3514f3e3980dc5daa9f7_b.jpg\" data-size=\"normal\" data-rawwidth=\"1711\" data-rawheight=\"959\" class=\"origin_image zh-lightbox-thumb\" width=\"1711\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-085ea5e39c2b3514f3e3980dc5daa9f7_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1711&#39; height=&#39;959&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1711\" data-rawheight=\"959\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1711\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-085ea5e39c2b3514f3e3980dc5daa9f7_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-085ea5e39c2b3514f3e3980dc5daa9f7_b.jpg\" data-original-token=\"v2-085ea5e39c2b3514f3e3980dc5daa9f7\"\u002F\u003E\u003Cfigcaption\u003E叶节点是一个存指针的page， 指针指向key对应的record。如果有多个records对应了这个key，这个key会被多次存储。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-2a22bffdf8d31002a1fe3a4b77a7b240_b.jpg\" data-size=\"normal\" data-rawwidth=\"2117\" data-rawheight=\"1215\" class=\"origin_image zh-lightbox-thumb\" width=\"2117\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-2a22bffdf8d31002a1fe3a4b77a7b240_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;2117&#39; height=&#39;1215&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"2117\" data-rawheight=\"1215\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2117\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-2a22bffdf8d31002a1fe3a4b77a7b240_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-2a22bffdf8d31002a1fe3a4b77a7b240_b.jpg\" data-original-token=\"v2-2a22bffdf8d31002a1fe3a4b77a7b240\"\u002F\u003E\u003Cfigcaption\u003E这里的ID pair就是指针。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-64f01d2d9030f20238cf4a50cab75f1e_b.jpg\" data-size=\"normal\" data-rawwidth=\"2258\" data-rawheight=\"1216\" class=\"origin_image zh-lightbox-thumb\" width=\"2258\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-64f01d2d9030f20238cf4a50cab75f1e_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;2258&#39; height=&#39;1216&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"2258\" data-rawheight=\"1216\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2258\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-64f01d2d9030f20238cf4a50cab75f1e_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-64f01d2d9030f20238cf4a50cab75f1e_b.jpg\" data-original-token=\"v2-64f01d2d9030f20238cf4a50cab75f1e\"\u002F\u003E\u003Cfigcaption\u003E相当于2的简洁版。key=2 可以对应多个指针，全部放在对应的列表中。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"_I_4GMbV\"\u003E总结一下就是一种是直接叶节点存数据页。\u003C\u002Fp\u003E\u003Cp data-pid=\"oZINXG3W\"\u003E二、三是存数据页的指针，（这个指针可以是id，也可以是多列联合的索引）\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-be8cce731bfbc1ab94ef15374346f478_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1634\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb\" width=\"1634\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-be8cce731bfbc1ab94ef15374346f478_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1634&#39; height=&#39;443&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1634\" data-rawheight=\"443\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1634\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-be8cce731bfbc1ab94ef15374346f478_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-be8cce731bfbc1ab94ef15374346f478_b.jpg\" data-original-token=\"v2-be8cce731bfbc1ab94ef15374346f478\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-1a44a100b840d2d1c0e548f7b9105563_b.jpg\" data-size=\"normal\" data-rawwidth=\"1154\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb\" width=\"1154\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-1a44a100b840d2d1c0e548f7b9105563_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1154&#39; height=&#39;241&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1154\" data-rawheight=\"241\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1154\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-1a44a100b840d2d1c0e548f7b9105563_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-1a44a100b840d2d1c0e548f7b9105563_b.jpg\" data-original-token=\"v2-1a44a100b840d2d1c0e548f7b9105563\"\u002F\u003E\u003Cfigcaption\u003EA1，存record本身（元组）；A2，存recordId（指针）；A3， 存指针列表\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003E4.3 B+树的维护与建树\u003C\u002Fh3\u003E\u003Cp data-pid=\"MGPdijX8\"\u003E\u003Cb\u003E插入一条record的过程：\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"DW3yvj0Q\"\u003E\u003Cb\u003E首先遍历树找到record的key所在的叶子节点，如果key存在， check这个key对应的所有record（或者指向的所有record）是否有等于要插入的这个record，如果不存在，就插入，并更新该叶子，否则do nothing.  如果key不存在， 就在叶子的entry中申请一个用来存放这个key并插入record， 最后对叶子排序。\u003C\u002Fb\u003E\u003C\u002Fli\u003E\u003Cli data-pid=\"MLUEKCAc\"\u003E\u003Cb\u003E如果更新完后叶子溢出了，（有2d+1个entry），进行分裂操作：中间项复制并push up给父节点，分裂成一个d ，一个d+1的叶子节点。比如下面我们插入21：\u003C\u002Fb\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-41c9c027b797fe0ba900331a2bbaf4d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1256\" data-rawheight=\"474\" class=\"origin_image zh-lightbox-thumb\" width=\"1256\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-41c9c027b797fe0ba900331a2bbaf4d4_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1256&#39; height=&#39;474&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1256\" data-rawheight=\"474\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1256\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-41c9c027b797fe0ba900331a2bbaf4d4_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-41c9c027b797fe0ba900331a2bbaf4d4_b.jpg\" data-original-token=\"v2-41c9c027b797fe0ba900331a2bbaf4d4\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-e7ea449a1b7a83d7ec0927464fbf552f_b.jpg\" data-size=\"normal\" data-rawwidth=\"1516\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb\" width=\"1516\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-e7ea449a1b7a83d7ec0927464fbf552f_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1516&#39; height=&#39;615&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1516\" data-rawheight=\"615\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1516\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-e7ea449a1b7a83d7ec0927464fbf552f_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-e7ea449a1b7a83d7ec0927464fbf552f_b.jpg\" data-original-token=\"v2-e7ea449a1b7a83d7ec0927464fbf552f\"\u002F\u003E\u003Cfigcaption\u003E19复制并push up。然后调整指针。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"EBcjGsRP\"\u003E如果push up后的父节点也溢出了，那么对父节点同样进行分裂操作，只不过区别在于内部节点的分裂过程中不需要把中间的值复制，直接push up即可。比如上图我们再插入36 ：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-7de81f7b9ab5800ab2a58b0adf436dfd_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1698\" data-rawheight=\"836\" class=\"origin_image zh-lightbox-thumb\" width=\"1698\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-7de81f7b9ab5800ab2a58b0adf436dfd_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1698&#39; height=&#39;836&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1698\" data-rawheight=\"836\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1698\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-7de81f7b9ab5800ab2a58b0adf436dfd_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-7de81f7b9ab5800ab2a58b0adf436dfd_b.jpg\" data-original-token=\"v2-7de81f7b9ab5800ab2a58b0adf436dfd\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b1f037ef2bc3d1c6cd122fef38785291_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1411\" data-rawheight=\"627\" class=\"origin_image zh-lightbox-thumb\" width=\"1411\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b1f037ef2bc3d1c6cd122fef38785291_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1411&#39; height=&#39;627&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1411\" data-rawheight=\"627\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1411\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b1f037ef2bc3d1c6cd122fef38785291_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b1f037ef2bc3d1c6cd122fef38785291_b.jpg\" data-original-token=\"v2-b1f037ef2bc3d1c6cd122fef38785291\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"GA8-XLq9\"\u003E\u003Cb\u003E删除：遍历找到对应的叶子节点并把record删掉即可。 B+树中删除只会删叶子节点，内部节点不会删除。\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-08dc5af6cf5f1c9883f6f379008c062a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1858\" data-rawheight=\"250\" class=\"origin_image zh-lightbox-thumb\" width=\"1858\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-08dc5af6cf5f1c9883f6f379008c062a_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1858&#39; height=&#39;250&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1858\" data-rawheight=\"250\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1858\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-08dc5af6cf5f1c9883f6f379008c062a_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-08dc5af6cf5f1c9883f6f379008c062a_b.jpg\" data-original-token=\"v2-08dc5af6cf5f1c9883f6f379008c062a\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"BMpwx4js\"\u003E\u003Cb\u003EB+树的构建：\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"YCl3AV7l\"\u003E如果采取将record逐条插入，效率很低，我们采取一种 批量加载(bulk loading) 的方法。\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-b0f767bb9e5b6b6269c588300a2ea4c6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1882\" data-rawheight=\"617\" class=\"origin_image zh-lightbox-thumb\" width=\"1882\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-b0f767bb9e5b6b6269c588300a2ea4c6_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1882&#39; height=&#39;617&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1882\" data-rawheight=\"617\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1882\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-b0f767bb9e5b6b6269c588300a2ea4c6_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-b0f767bb9e5b6b6269c588300a2ea4c6_b.jpg\" data-original-token=\"v2-b0f767bb9e5b6b6269c588300a2ea4c6\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"cm3PD9Xy\"\u003E简单点说就是先定一个fill factor，比如对于一个d=2的B+树，首先只有一个根节点(根节点刚开始是一个叶节点)，是一棵空树。设定fill factor = 3\u002F4 , 我们把data按key排好序后，每次加入一个填了4格的节点(分裂一个entry到右边，左边就是只有3个entry的节点)：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fd4179b96dc3c3bc876ea397e1360b8a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"585\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb\" width=\"585\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fd4179b96dc3c3bc876ea397e1360b8a_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;585&#39; height=&#39;357&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"585\" data-rawheight=\"357\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"585\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fd4179b96dc3c3bc876ea397e1360b8a_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fd4179b96dc3c3bc876ea397e1360b8a_b.jpg\" data-original-token=\"v2-fd4179b96dc3c3bc876ea397e1360b8a\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-8593e0232554e5a36d1c0f59aeb6ac75_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1370\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb\" width=\"1370\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-8593e0232554e5a36d1c0f59aeb6ac75_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1370&#39; height=&#39;554&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1370\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1370\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-8593e0232554e5a36d1c0f59aeb6ac75_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-8593e0232554e5a36d1c0f59aeb6ac75_b.jpg\" data-original-token=\"v2-8593e0232554e5a36d1c0f59aeb6ac75\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"ONEIcB61\"\u003E如果parent节点满了，就分裂：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3dfb91334f8f425c226f2ad09312ae2d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1449\" data-rawheight=\"759\" class=\"origin_image zh-lightbox-thumb\" width=\"1449\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3dfb91334f8f425c226f2ad09312ae2d_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1449&#39; height=&#39;759&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1449\" data-rawheight=\"759\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1449\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3dfb91334f8f425c226f2ad09312ae2d_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3dfb91334f8f425c226f2ad09312ae2d_b.jpg\" data-original-token=\"v2-3dfb91334f8f425c226f2ad09312ae2d\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"BBtlXS4D\"\u003E这样B+树构建出来即是一个方便插入和查询的状态了。\u003C\u002Fp\u003E\u003Cp data-pid=\"rAWDBHB3\"\u003Ebulk loading的具体实现可以看看project2的实现，涉及节点分裂和push up。 \u003C\u002Fp\u003E\u003Ch3\u003E4.4 聚集索引和非聚集索引\u003C\u002Fh3\u003E\u003Cp data-pid=\"FR79LioY\"\u003E现在我们已经讨论了如何将记录存储在叶结点中，我们还将讨论如何组织数据页。\u003C\u002Fp\u003E\u003Cp data-pid=\"q8DqrWKC\"\u003E\u003Ccode\u003Eclustered\u002Funclustered\u003C\u002Fcode\u003E指的是数据页的结构方式。\u003Ccode\u003Eunclustered\u003C\u002Fcode\u003E仅适用于备选方案2或3（叶节点存指针的情况）。\u003C\u002Fp\u003E\u003Cp data-pid=\"MUrKgXms\"\u003E索引键值的逻辑顺序与索引所服务的表中相应行的物理顺序相同的索引，被称为\u003Cb\u003E聚集索引\u003C\u002Fb\u003E，反之为\u003Cb\u003E非聚集索引。\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"cgnGnyk0\"\u003E1.Unclustered 非聚集索引：\u003C\u002Fp\u003E\u003Cp data-pid=\"zvQaV8Xt\"\u003E在非聚集索引中，数据页是完全混乱的。因此，您可能需要为需要的每个记录读取单独的页。比如：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e50f4ea3bfa25c7049b3403518a6b345_b.jpg\" data-size=\"normal\" data-rawwidth=\"1365\" data-rawheight=\"1113\" class=\"origin_image zh-lightbox-thumb\" width=\"1365\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e50f4ea3bfa25c7049b3403518a6b345_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1365&#39; height=&#39;1113&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1365\" data-rawheight=\"1113\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1365\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e50f4ea3bfa25c7049b3403518a6b345_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e50f4ea3bfa25c7049b3403518a6b345_b.jpg\" data-original-token=\"v2-e50f4ea3bfa25c7049b3403518a6b345\"\u002F\u003E\u003Cfigcaption\u003E如果我们想读取带有12和24的记录，那么我们必须读取它们所指向的每个数据页，以便检索与这些键相关联的所有记录。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"cW0mHvRW\"\u003E\u003Cb\u003E2.Clustered 聚集\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"KxcMnlLZ\"\u003E在聚集索引中，数据页在构建B+树的同一索引上排序。这并不意味着数据页是精确排序的，只是键与数据的顺序大致相同。因此，I\u002FO成本的差异来自于缓存，在缓存中，两个带有关闭键的记录很可能位于同一个页，因此可以从缓存的页读取第二个记录。通常只需要读取一页就可以获得所有具有公共\u002F类似键的记录。\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-201305fc3f8323fcf8f77b550275e9b2_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1815\" data-rawheight=\"676\" class=\"origin_image zh-lightbox-thumb\" width=\"1815\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-201305fc3f8323fcf8f77b550275e9b2_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1815&#39; height=&#39;676&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1815\" data-rawheight=\"676\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1815\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-201305fc3f8323fcf8f77b550275e9b2_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-201305fc3f8323fcf8f77b550275e9b2_b.jpg\" data-original-token=\"v2-201305fc3f8323fcf8f77b550275e9b2\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"A3xNMqbO\"\u003E但是随着插入次数增加，会破坏聚集索引的有序性，所以需要额外代节去维护。\u003C\u002Fp\u003E\u003Cp data-pid=\"AtMqMnyt\"\u003E\u003Cb\u003E聚集索引因为与表的元组物理顺序一一对应，所以只有一种排序，即一个数据表只有一个聚集索引。\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"MsCJ3W0C\"\u003E非聚集索引和聚集索引的IO花费对比：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b23da5d5d2287dc909b78d8e3f2e0aa7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1622\" data-rawheight=\"816\" class=\"origin_image zh-lightbox-thumb\" width=\"1622\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b23da5d5d2287dc909b78d8e3f2e0aa7_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1622&#39; height=&#39;816&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1622\" data-rawheight=\"816\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1622\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b23da5d5d2287dc909b78d8e3f2e0aa7_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b23da5d5d2287dc909b78d8e3f2e0aa7_b.jpg\" data-original-token=\"v2-b23da5d5d2287dc909b78d8e3f2e0aa7\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"xUKUTuno\"\u003EIO=8，2 inner node + 3 leaf node + 3 data page\u003C\u002Fp\u003E\u003Cp data-pid=\"bwliWDHS\"\u003E聚集索引：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-991128099e648a632afba82284c93d1c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1622\" data-rawheight=\"813\" class=\"origin_image zh-lightbox-thumb\" width=\"1622\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-991128099e648a632afba82284c93d1c_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1622&#39; height=&#39;813&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1622\" data-rawheight=\"813\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1622\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-991128099e648a632afba82284c93d1c_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-991128099e648a632afba82284c93d1c_b.jpg\" data-original-token=\"v2-991128099e648a632afba82284c93d1c\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"wEikZ9dS\"\u003EIO=9，2 inner node + 3 leaf node + 4 data page\u003C\u002Fp\u003E\u003Cp data-pid=\"QJL9Gnnj\"\u003E在更大的数据中，聚集索引对速度的优化是非常可观的。\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b7566444388b62aeba53b769056c94d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1218\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb\" width=\"1218\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b7566444388b62aeba53b769056c94d3_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1218&#39; height=&#39;219&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1218\" data-rawheight=\"219\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1218\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b7566444388b62aeba53b769056c94d3_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b7566444388b62aeba53b769056c94d3_b.jpg\" data-original-token=\"v2-b7566444388b62aeba53b769056c94d3\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-5b7da6dc84fe73d82ceeab09a7c52d64_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2126\" data-rawheight=\"1182\" class=\"origin_image zh-lightbox-thumb\" width=\"2126\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-5b7da6dc84fe73d82ceeab09a7c52d64_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;2126&#39; height=&#39;1182&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2126\" data-rawheight=\"1182\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2126\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-5b7da6dc84fe73d82ceeab09a7c52d64_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-5b7da6dc84fe73d82ceeab09a7c52d64_b.jpg\" data-original-token=\"v2-5b7da6dc84fe73d82ceeab09a7c52d64\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch2\u003E5.Buffer management\u003C\u002Fh2\u003E\u003Ch3\u003E5.0 引入\u003C\u002Fh3\u003E\u003Cp data-pid=\"GVKesuDC\"\u003E到目前为止，我们已经讨论了数据库管理系统的最底层 磁盘空间管理（disk space management） ，以及如何在基于页面的数据库系统中管理文件和索引(file and index manegement)。现在我们将探讨DBMS上这两个层次之间的接口--缓冲区管理器.\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-925bb28c90d0e51af03ce09418bccbc8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1093\" data-rawheight=\"903\" class=\"origin_image zh-lightbox-thumb\" width=\"1093\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-925bb28c90d0e51af03ce09418bccbc8_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1093&#39; height=&#39;903&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1093\" data-rawheight=\"903\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1093\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-925bb28c90d0e51af03ce09418bccbc8_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-925bb28c90d0e51af03ce09418bccbc8_b.jpg\" data-original-token=\"v2-925bb28c90d0e51af03ce09418bccbc8\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"cloWruEK\"\u003EBuffer management is responsible for managing pages in memory and process requests from the file and index manager. Because space on memory is limited, we cannot afford to store all pages in the buffer pool, so the buffer manager should take evition policy (驱逐策略) and choose which pages to evict when space is filled up. When pages are evicted or new pages are read in memory, buffer manager communicates with the disk space manager to perform the required disk operations.\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-9aaae366a1f439e7eb6d27e08737f9b4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1237\" data-rawheight=\"776\" class=\"origin_image zh-lightbox-thumb\" width=\"1237\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-9aaae366a1f439e7eb6d27e08737f9b4_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1237&#39; height=&#39;776&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1237\" data-rawheight=\"776\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1237\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-9aaae366a1f439e7eb6d27e08737f9b4_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-9aaae366a1f439e7eb6d27e08737f9b4_b.jpg\" data-original-token=\"v2-9aaae366a1f439e7eb6d27e08737f9b4\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003E5.1 buffer pool \u003C\u002Fh3\u003E\u003Cp data-pid=\"Rei3oCHa\"\u003E将内存划分成用来存放磁盘中的page的帧(frame), 这块内存就成为了缓冲池。\u003C\u002Fp\u003E\u003Cp data-pid=\"vsCqLyxB\"\u003E一个缓冲帧恰好可以存一个page。\u003C\u002Fp\u003E\u003Cp data-pid=\"337ttL5A\"\u003E此外，缓冲池中还有一个表来存放其相关的数据。\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-1238fef5cecbff72636b49aadc80031d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"982\" data-rawheight=\"401\" class=\"origin_image zh-lightbox-thumb\" width=\"982\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-1238fef5cecbff72636b49aadc80031d_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;982&#39; height=&#39;401&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"982\" data-rawheight=\"401\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"982\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-1238fef5cecbff72636b49aadc80031d_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-1238fef5cecbff72636b49aadc80031d_b.jpg\" data-original-token=\"v2-1238fef5cecbff72636b49aadc80031d\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cul\u003E\u003Cli data-pid=\"pbSnLTOq\"\u003Eframe ID ： 可以看成缓冲池的内存地址\u003C\u002Fli\u003E\u003Cli data-pid=\"jOJYlU2-\"\u003Epage ID ：  对应的frame ID存放的page\u003C\u002Fli\u003E\u003Cli data-pid=\"JXpcEW6-\"\u003EDity Bit ： 这个frame 存的page是否被修改过,如果被修改过，驱逐前要写回磁盘对应的page。\u003C\u002Fli\u003E\u003Cli data-pid=\"WqT6-pHo\"\u003Epin count ： take the number of requestors currently using the page, once the requestor completes its wordloads, it is responsible for telling the buffer manager to dercrese the pin cout.\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch3\u003E5.2 Handling Page Requests \u003C\u002Fh3\u003E\u003Cul\u003E\u003Cli data-pid=\"PU0LMEqZ\"\u003E如果page在缓冲池中，page ID 对应的pin count += 1, 返回\u003Cb\u003Epage在缓冲池中的地址\u003C\u002Fb\u003E。\u003C\u002Fli\u003E\u003Cli data-pid=\"y-qYoYYG\"\u003E如果page不在缓冲池，而且缓冲池有空余帧，则从disk读取该page并写在空余帧中，pin count += 1, 返回page在缓冲池中的地址。 如果无空余帧，必须先执行一个驱逐策略（驱逐一个dirty page前需要先把它写回磁盘以更新修改信息）。当然，pin count &gt; 0 的page不可以被驱逐。\u003C\u002Fli\u003E\u003Cli data-pid=\"z3Vml4ZM\"\u003E驱逐策略的好坏是取决于命中率的，即 \u003Cb\u003Epage hit rate.  page hit \u003C\u002Fb\u003E指向缓冲池请求一个page时正好存在。命中率越高说明这个驱逐策略越适用。\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch3\u003E5.3 LRU 算法\u003C\u002Fh3\u003E\u003Cp data-pid=\"1F4vu4oB\"\u003ELRU算法：当我们需要驱逐某个page以腾出其占据的frame时，我们优先驱逐最早被请求过的page，即：时间戳最小的。 \u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-e63883d2e81e049b2ec47e7ee2cb630c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1454\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb\" width=\"1454\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-e63883d2e81e049b2ec47e7ee2cb630c_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1454&#39; height=&#39;554&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1454\" data-rawheight=\"554\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1454\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-e63883d2e81e049b2ec47e7ee2cb630c_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-e63883d2e81e049b2ec47e7ee2cb630c_b.jpg\" data-original-token=\"v2-e63883d2e81e049b2ec47e7ee2cb630c\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"b5EYHphr\"\u003E时间戳是指 Last Used的时间，代表刚加入缓冲池的时间 或者 最近一次pin count --的时间。（最近一次被结束请求的时间）\u003C\u002Fp\u003E\u003Cp data-pid=\"qcBzDYLA\"\u003E总结一下LRU需要实现\u002F维护的信息：\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"MZYPbjdj\"\u003E需要驱逐时，将pin count=0且last used最小的page驱逐。 由于数据量大，我们希望O(1)删除。\u003C\u002Fli\u003E\u003Cli data-pid=\"7nmhV4Gc\"\u003E当加入page，如果已满则驱逐，然后加入。O（1）\u003C\u002Fli\u003E\u003Cli data-pid=\"XaVuPz8N\"\u003E查询缓冲池是否存在某个page，返回其。 O（1）查询。\u003C\u002Fli\u003E\u003Cli data-pid=\"L_45XQLb\"\u003E每当一个page被结束请求，我们就得更新其last used。\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp data-pid=\"UsPGgBGB\"\u003E我们可以用双向链表来实现LRU，key代表page id，值代表page在缓冲池的address。 删除和插入操作都是O（1），具体定位某个节点利用hash ： page id -&gt; double link list address .\u003C\u002Fp\u003E\u003Cp data-pid=\"LWQS5WTu\"\u003E我们将最左边的节点视为时间戳最大的，每当有节点被访问完就将它移到最左边，那么需要驱逐的时候就只需要驱逐最右边的节点了。 下面是c++实现：\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-cpp\"\u003E\u003Cspan class=\"cp\"\u003E#include\u003C\u002Fspan\u003E \u003Cspan class=\"cpf\"\u003E&lt;bits\u002Fstdc++.h&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"cp\"\u003E\n\u003C\u002Fspan\u003E\u003Cspan class=\"cp\"\u003E\u003C\u002Fspan\u003E\u003Cspan class=\"k\"\u003Eusing\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Enamespace\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Estd\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Eclass\u003C\u002Fspan\u003E \u003Cspan class=\"nc\"\u003ELRUCache\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n\u003Cspan class=\"k\"\u003Epublic\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002F定义双向链表的节点\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E    \u003Cspan class=\"k\"\u003Estruct\u003C\u002Fspan\u003E \u003Cspan class=\"nc\"\u003ENode\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eleft\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eright\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_key\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003E_value\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E:\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003E_key\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003E_value\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eleft\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003ENULL\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E),\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eright\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"nb\"\u003ENULL\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E){}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003EL\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ER\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Eunordered_map\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E*&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ehash\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003ELRUCache\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecapacity\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003En\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ecapacity\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003EL\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003ER\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003EL\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eright\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ER\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003ER\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eleft\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EL\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002Ferase p from doublelink, not delete\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E    \u003Cspan class=\"kt\"\u003Evoid\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003EremoveNode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eleft\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eright\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eright\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eright\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eleft\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eleft\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002Finsert p to the head (L-&gt;right)\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E    \u003Cspan class=\"kt\"\u003Evoid\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003EinsertNode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003EL\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eright\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eleft\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eright\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EL\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eright\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eleft\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003EL\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"n\"\u003EL\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eright\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Eget\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehash\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ecount\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E))\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Etemp\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ehash\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n            \u003Cspan class=\"c1\"\u003E\u002F\u002Fremove it to the most left\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E            \u003Cspan class=\"n\"\u003EremoveNode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Etemp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003EinsertNode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Etemp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n            \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Etemp\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"k\"\u003Ereturn\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E-\u003C\u002Fspan\u003E\u003Cspan class=\"mi\"\u003E1\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"kt\"\u003Evoid\u003C\u002Fspan\u003E \u003Cspan class=\"nf\"\u003Eput\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"kt\"\u003Eint\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n        \u003Cspan class=\"c1\"\u003E\u002F\u002F midify\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E        \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehash\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ecount\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E))\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Etemp\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ehash\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E];\u003C\u002Fspan\u003E\n            \u003Cspan class=\"c1\"\u003E\u002F\u002Fremove it to the most left\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E            \u003Cspan class=\"n\"\u003EremoveNode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Etemp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003EinsertNode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Etemp\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003Etemp\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n        \u003Cspan class=\"c1\"\u003E\u002F\u002F add a new page into buffer pool\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E        \u003Cspan class=\"k\"\u003Eelse\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n            \u003Cspan class=\"c1\"\u003E\u002F\u002Fif it is full, evict the last recently page, update the hash table\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E            \u003Cspan class=\"k\"\u003Eif\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ehash\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Esize\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E()\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003En\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"p\"\u003E{\u003C\u002Fspan\u003E\n                \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ER\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eleft\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n                \u003Cspan class=\"n\"\u003EremoveNode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n                \u003Cspan class=\"n\"\u003Ehash\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E.\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Eerase\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E-&gt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u002F\u002Fdelete if from hash table\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E                \u003Cspan class=\"k\"\u003Edelete\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Ep\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E*\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Et\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"k\"\u003Enew\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003ENode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Evalue\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003Ehash\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E[\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Ekey\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E]\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E=\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Et\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E;\u003C\u002Fspan\u003E\n            \u003Cspan class=\"n\"\u003EinsertNode\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Et\u003C\u002Fspan\u003E\u003Cspan class=\"p\"\u003E);\u003C\u002Fspan\u003E\n        \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\n    \u003Cspan class=\"p\"\u003E}\u003C\u002Fspan\u003E\n\u003Cspan class=\"p\"\u003E};\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Ch3\u003E5.4 Clock算法 \u003C\u002Fh3\u003E\u003Cp data-pid=\"rUdAj2Z6\"\u003EClock相当于是LRU的一种改进版本。它把buffer pool看成一个时钟（指针循环扫描的数组）。指针指向下一个可以插入的帧，每个帧额外多一个属性 ： ref bit。 \u003C\u002Fp\u003E\u003Cp data-pid=\"yQDGCroV\"\u003E插入一个新的page：\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"rcuhXsQH\"\u003E当指针位置是空，将page写入并将ref bit设为1，然后 p = (p+1)%size 。 \u003C\u002Fli\u003E\u003Cli data-pid=\"5VwfcWtC\"\u003E否则，指针p持续移动。如果遇到pin cout &gt; 0, 继续移动； 如果遇到pin count == 0 &amp;&amp; ref bit==1,将ref bit设为0；如果遇到pin count == 0 &amp;&amp; ref bit==0， 驱逐它并写入。将ref bit设为1，然后 p = (p+1)%size 。\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp data-pid=\"9HDeHvFh\"\u003E如果查询某个page且击中了，只需要将其ref bit设为1即可。不用移动指针。\u003C\u002Fp\u003E\u003Ch3\u003E5.5 MRU算法 \u003C\u002Fh3\u003E\u003Cp data-pid=\"7l9TeG3e\"\u003EMRU和LRU唯一的不同点就是每次驱逐的不是last recently，而是most recently， 也就是把时间戳最大的驱逐掉了。 \u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-28c52a78e4a137fa4ab4dd03ac5343b9_b.jpg\" data-size=\"normal\" data-rawwidth=\"1706\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb\" width=\"1706\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-28c52a78e4a137fa4ab4dd03ac5343b9_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1706&#39; height=&#39;610&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1706\" data-rawheight=\"610\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1706\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-28c52a78e4a137fa4ab4dd03ac5343b9_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-28c52a78e4a137fa4ab4dd03ac5343b9_b.jpg\" data-original-token=\"v2-28c52a78e4a137fa4ab4dd03ac5343b9\"\u002F\u003E\u003Cfigcaption\u003E所以LRU到底适用啥..没看懂什么是temporal locality.\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Ch2\u003E6. sorting\u003C\u002Fh2\u003E\u003Cp data-pid=\"3B-ujpi5\"\u003E当我们需要对磁盘中的超大文件进行排序，我们无法将它一次项读入内存然后排序，可以采取divide-conquer-merge的方法。先分成独立的page，读进来排序。然后用归并的思路合并有序文件，最终形成一个有序的唯一文件。 （文件是一种存储在外存上的数据结构, 它由大量性质相同的记录组成.）\u003C\u002Fp\u003E\u003Ch3\u003E6.1二路归并\u003C\u002Fh3\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-fba9e60cdb13bc2673a542bf2fe4be20_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2266\" data-rawheight=\"1226\" class=\"origin_image zh-lightbox-thumb\" width=\"2266\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-fba9e60cdb13bc2673a542bf2fe4be20_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;2266&#39; height=&#39;1226&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2266\" data-rawheight=\"1226\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2266\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-fba9e60cdb13bc2673a542bf2fe4be20_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-fba9e60cdb13bc2673a542bf2fe4be20_b.jpg\" data-original-token=\"v2-fba9e60cdb13bc2673a542bf2fe4be20\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"SNbcYNqf\"\u003E二路归并只需要3个buffer page，（以下简称B），其中两个作为input B， 一个作为output B 。\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"m6PDhjX5\"\u003E先把N个page依次读进内存排序并写回disk的文件中，最终得到n个各自有序的data page。这一布只用到了1个buffer page 。（cost = one pass）\u003C\u002Fli\u003E\u003Cli data-pid=\"z-JmCkBq\"\u003E两个B作为input依次读取2个data page，进行归并，如图中 读入[3,4],[2,6]，归并后写入output B，先写入[2,3]，output B 满了，写入disk中的对应的有序文件，再写入 [4,6]，满了，写入disk中的对应的有序文件。重复8\u002F2 = 4次，得到4个sorted 2-pages runs。\u003Cb\u003EA sorted run is a sequence of pages that is sorted.\u003C\u002Fb\u003E\u003C\u002Fli\u003E\u003Cli data-pid=\"_kKSQY31\"\u003E重复这个归并操作，每次都将两个runs 归并成一个。最终得到一个 n-pages runs，写入disk得到最终的一个有序文件。\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp data-pid=\"taQcfbTO\"\u003EI\u002FO cost ：  2N* passes\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-44833a3f5952bab1ab0826c2f1407201_b.jpg\" data-size=\"normal\" data-rawwidth=\"1059\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb\" width=\"1059\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-44833a3f5952bab1ab0826c2f1407201_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1059&#39; height=&#39;383&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1059\" data-rawheight=\"383\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1059\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-44833a3f5952bab1ab0826c2f1407201_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-44833a3f5952bab1ab0826c2f1407201_b.jpg\" data-original-token=\"v2-44833a3f5952bab1ab0826c2f1407201\"\u002F\u003E\u003Cfigcaption\u003E+1 是最开始对n个pages内部排序的那次pass。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003E6.2Full External Merge Sort \u003C\u002Fh3\u003E\u003Cp data-pid=\"yzLTglDD\"\u003E二路归并只需要用上3个buffer page， 多路归并意味着充分利用全部的buffer pages，假设有 k 个 B，n 个 data pages。\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"tsNhQC55\"\u003E首先k个B分别读取1个pages到内存（对比一下,二路归并这里只用了1个B），k个page的数据一起排序，然后写到disk成为有序文件。重复 Ceil（N\u002FK）次，最终得到 Ceil（n\u002Fk） 个有序文件，每个文件大小是 k-pages。记这里得到的文件为file0 。\u003C\u002Fli\u003E\u003Cli data-pid=\"GLXXVQ-v\"\u003E利用 k - 1 个B作为input读取 k - 1 个 file0 进行归并 (这里的读取当然不是指一次性读进来，而是类似用k个指针指向每个file0最小的page,边读进来排序边移动指针)，执行完后得到一个大小为 k(k-1) -pages 的文件，记作file1 ，最终得到 Ceil(Ceil（n\u002Fk）\u002F (k-1)) 个file1 。（注意这里结束后我们总共把n个pages传递了两趟，如果n=k*(k-1),那么此时得到的就是最终的唯一一个有序文件）。 \u003C\u002Fli\u003E\u003Cli data-pid=\"p8sXFsk5\"\u003E重复归并过程，每次归并都将k-1个文件合并成一个，最终得到唯一一个有序文件。 (注意每个sorted runs在disk上都是page连续的文件)\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp data-pid=\"YqcCP7tY\"\u003EI\u002FO cost：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-25873a7cc9cdebf6678cb934d70a87a9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1949\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb\" width=\"1949\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-25873a7cc9cdebf6678cb934d70a87a9_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1949&#39; height=&#39;244&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1949\" data-rawheight=\"244\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1949\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-25873a7cc9cdebf6678cb934d70a87a9_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-25873a7cc9cdebf6678cb934d70a87a9_b.jpg\" data-original-token=\"v2-25873a7cc9cdebf6678cb934d70a87a9\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-3bb477c0b11af57ae4f1e0e413c51a4a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1592\" data-rawheight=\"693\" class=\"origin_image zh-lightbox-thumb\" width=\"1592\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-3bb477c0b11af57ae4f1e0e413c51a4a_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1592&#39; height=&#39;693&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1592\" data-rawheight=\"693\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1592\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-3bb477c0b11af57ae4f1e0e413c51a4a_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-3bb477c0b11af57ae4f1e0e413c51a4a_b.jpg\" data-original-token=\"v2-3bb477c0b11af57ae4f1e0e413c51a4a\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"UWwyln7Y\"\u003E来个full external merge sort 的例子：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-f3bfe9f2dddd3ca7d974c71b73b9fa38_b.jpg\" data-size=\"normal\" data-rawwidth=\"1679\" data-rawheight=\"939\" class=\"origin_image zh-lightbox-thumb\" width=\"1679\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-f3bfe9f2dddd3ca7d974c71b73b9fa38_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1679&#39; height=&#39;939&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1679\" data-rawheight=\"939\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1679\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-f3bfe9f2dddd3ca7d974c71b73b9fa38_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-f3bfe9f2dddd3ca7d974c71b73b9fa38_b.jpg\" data-original-token=\"v2-f3bfe9f2dddd3ca7d974c71b73b9fa38\"\u002F\u003E\u003Cfigcaption\u003E目标是一个有序的，page连续的文件。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-60b95e550b051f8d2aa7d1344be8d953_b.jpg\" data-size=\"normal\" data-rawwidth=\"1705\" data-rawheight=\"832\" class=\"origin_image zh-lightbox-thumb\" width=\"1705\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-60b95e550b051f8d2aa7d1344be8d953_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1705&#39; height=&#39;832&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1705\" data-rawheight=\"832\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1705\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-60b95e550b051f8d2aa7d1344be8d953_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-60b95e550b051f8d2aa7d1344be8d953_b.jpg\" data-original-token=\"v2-60b95e550b051f8d2aa7d1344be8d953\"\u002F\u003E\u003Cfigcaption\u003E4个B各读入一个page。用内部排序算法进行排序。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-f234cc3dc12f93be20417effe8984101_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1660\" data-rawheight=\"809\" class=\"origin_image zh-lightbox-thumb\" width=\"1660\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-f234cc3dc12f93be20417effe8984101_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1660&#39; height=&#39;809&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1660\" data-rawheight=\"809\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1660\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-f234cc3dc12f93be20417effe8984101_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-f234cc3dc12f93be20417effe8984101_b.jpg\" data-original-token=\"v2-f234cc3dc12f93be20417effe8984101\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-15946fd8a92fc377d33421cceb75cbf7_b.jpg\" data-size=\"normal\" data-rawwidth=\"1813\" data-rawheight=\"830\" class=\"origin_image zh-lightbox-thumb\" width=\"1813\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-15946fd8a92fc377d33421cceb75cbf7_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1813&#39; height=&#39;830&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1813\" data-rawheight=\"830\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1813\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-15946fd8a92fc377d33421cceb75cbf7_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-15946fd8a92fc377d33421cceb75cbf7_b.jpg\" data-original-token=\"v2-15946fd8a92fc377d33421cceb75cbf7\"\u002F\u003E\u003Cfigcaption\u003E最终的排序结果写进disk中，是4个连续、有序的page。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-724d0603d3f7b3f04ad89a889e278e60_b.jpg\" data-size=\"normal\" data-rawwidth=\"1769\" data-rawheight=\"836\" class=\"origin_image zh-lightbox-thumb\" width=\"1769\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-724d0603d3f7b3f04ad89a889e278e60_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1769&#39; height=&#39;836&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1769\" data-rawheight=\"836\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1769\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-724d0603d3f7b3f04ad89a889e278e60_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-724d0603d3f7b3f04ad89a889e278e60_b.jpg\" data-original-token=\"v2-724d0603d3f7b3f04ad89a889e278e60\"\u002F\u003E\u003Cfigcaption\u003E另外4个data page也同样读进来排序。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c6f28c1096af6efd22b1889fbf8c5ce1_b.jpg\" data-size=\"normal\" data-rawwidth=\"1775\" data-rawheight=\"902\" class=\"origin_image zh-lightbox-thumb\" width=\"1775\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c6f28c1096af6efd22b1889fbf8c5ce1_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1775&#39; height=&#39;902&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1775\" data-rawheight=\"902\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1775\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c6f28c1096af6efd22b1889fbf8c5ce1_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c6f28c1096af6efd22b1889fbf8c5ce1_b.jpg\" data-original-token=\"v2-c6f28c1096af6efd22b1889fbf8c5ce1\"\u002F\u003E\u003Cfigcaption\u003E两个buffer page来合并得到的两个大小为4page的sorted runs。由于只有两个runs，所以一个B是用不上的。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-defe8456dd3034178520df7466e2492b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1729\" data-rawheight=\"924\" class=\"origin_image zh-lightbox-thumb\" width=\"1729\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-defe8456dd3034178520df7466e2492b_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1729&#39; height=&#39;924&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1729\" data-rawheight=\"924\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1729\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-defe8456dd3034178520df7466e2492b_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-defe8456dd3034178520df7466e2492b_b.jpg\" data-original-token=\"v2-defe8456dd3034178520df7466e2492b\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-22a9f44f6dcae11a660efca68c2cebb3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1743\" data-rawheight=\"901\" class=\"origin_image zh-lightbox-thumb\" width=\"1743\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-22a9f44f6dcae11a660efca68c2cebb3_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1743&#39; height=&#39;901&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1743\" data-rawheight=\"901\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1743\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-22a9f44f6dcae11a660efca68c2cebb3_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-22a9f44f6dcae11a660efca68c2cebb3_b.jpg\" data-original-token=\"v2-22a9f44f6dcae11a660efca68c2cebb3\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-56103cc7c6af1caa46b135e3edb78e8d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1739\" data-rawheight=\"905\" class=\"origin_image zh-lightbox-thumb\" width=\"1739\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-56103cc7c6af1caa46b135e3edb78e8d_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1739&#39; height=&#39;905&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1739\" data-rawheight=\"905\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1739\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-56103cc7c6af1caa46b135e3edb78e8d_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-56103cc7c6af1caa46b135e3edb78e8d_b.jpg\" data-original-token=\"v2-56103cc7c6af1caa46b135e3edb78e8d\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-1d53a45dc0f6cfb282312e4447d331df_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1726\" data-rawheight=\"918\" class=\"origin_image zh-lightbox-thumb\" width=\"1726\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-1d53a45dc0f6cfb282312e4447d331df_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1726&#39; height=&#39;918&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1726\" data-rawheight=\"918\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1726\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-1d53a45dc0f6cfb282312e4447d331df_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-1d53a45dc0f6cfb282312e4447d331df_b.jpg\" data-original-token=\"v2-1d53a45dc0f6cfb282312e4447d331df\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-47322d32199a8308e03b905e7893a4ff_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1721\" data-rawheight=\"935\" class=\"origin_image zh-lightbox-thumb\" width=\"1721\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-47322d32199a8308e03b905e7893a4ff_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1721&#39; height=&#39;935&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1721\" data-rawheight=\"935\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1721\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-47322d32199a8308e03b905e7893a4ff_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-47322d32199a8308e03b905e7893a4ff_b.jpg\" data-original-token=\"v2-47322d32199a8308e03b905e7893a4ff\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"WywwnsVG\"\u003E每当outpu buffer满了就写入disk， input buffer空了就读入（较小的那个page）。\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-aae6e1771aac5b7316577356f39bb192_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1755\" data-rawheight=\"938\" class=\"origin_image zh-lightbox-thumb\" width=\"1755\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-aae6e1771aac5b7316577356f39bb192_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1755&#39; height=&#39;938&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1755\" data-rawheight=\"938\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1755\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-aae6e1771aac5b7316577356f39bb192_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-aae6e1771aac5b7316577356f39bb192_b.jpg\" data-original-token=\"v2-aae6e1771aac5b7316577356f39bb192\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-0b14a6b58077bb1654ce0455e7834c21_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1751\" data-rawheight=\"962\" class=\"origin_image zh-lightbox-thumb\" width=\"1751\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-0b14a6b58077bb1654ce0455e7834c21_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1751&#39; height=&#39;962&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1751\" data-rawheight=\"962\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1751\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-0b14a6b58077bb1654ce0455e7834c21_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-0b14a6b58077bb1654ce0455e7834c21_b.jpg\" data-original-token=\"v2-0b14a6b58077bb1654ce0455e7834c21\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-16285462855dd15ad29b9802f42ca82b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1844\" data-rawheight=\"969\" class=\"origin_image zh-lightbox-thumb\" width=\"1844\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-16285462855dd15ad29b9802f42ca82b_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1844&#39; height=&#39;969&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1844\" data-rawheight=\"969\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1844\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-16285462855dd15ad29b9802f42ca82b_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-16285462855dd15ad29b9802f42ca82b_b.jpg\" data-original-token=\"v2-16285462855dd15ad29b9802f42ca82b\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-7369046eb6606cff5c134ea26a4bb8bc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1739\" data-rawheight=\"929\" class=\"origin_image zh-lightbox-thumb\" width=\"1739\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-7369046eb6606cff5c134ea26a4bb8bc_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1739&#39; height=&#39;929&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1739\" data-rawheight=\"929\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1739\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-7369046eb6606cff5c134ea26a4bb8bc_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-7369046eb6606cff5c134ea26a4bb8bc_b.jpg\" data-original-token=\"v2-7369046eb6606cff5c134ea26a4bb8bc\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch2\u003E7. Hashing\u003C\u002Fh2\u003E\u003Ch3\u003E7.0 引入 \u003C\u002Fh3\u003E\u003Cp data-pid=\"LZ5zd55R\"\u003E有时候我们要对数据库中&#34;相似&#34;的值聚集在一起进行操作，但并不关心这些值的顺序，比如 GROUP BY , de-duplication。\u003C\u002Fp\u003E\u003Cblockquote data-pid=\"OXyyFs6O\"\u003EIn a database, grouping like values together is called hashing。\u003C\u002Fblockquote\u003E\u003Cp data-pid=\"IvwV30vm\"\u003E&#34;like value&#34;的理解：可以是拥有相同key的record；拷贝值。\u003C\u002Fp\u003E\u003Cp data-pid=\"wIlzBsPv\"\u003E由于我们无法把所有的数据都加载到内存，所以不能一次性对所有数据建hash表并写回磁盘， 我们需要一个 out-of-core hashing algorithm 。 \u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-665109ca84760fe3f93f8fd73e7cf872_b.jpg\" data-size=\"normal\" data-rawwidth=\"1722\" data-rawheight=\"872\" class=\"origin_image zh-lightbox-thumb\" width=\"1722\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-665109ca84760fe3f93f8fd73e7cf872_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1722&#39; height=&#39;872&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1722\" data-rawheight=\"872\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1722\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-665109ca84760fe3f93f8fd73e7cf872_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-665109ca84760fe3f93f8fd73e7cf872_b.jpg\" data-original-token=\"v2-665109ca84760fe3f93f8fd73e7cf872\"\u002F\u003E\u003Cfigcaption\u003E由于无序，范围查找是不行的。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"53KAtIVx\"\u003E算法的大致思路：\u003C\u002Fp\u003E\u003Cp data-pid=\"TYMKN4dO\"\u003E我们现在有一个超大的文件，我们采取divide-conquer策略，通过一个hash函数把大文件分成若干个小文件（小的可以完整读进内存），对每个小文件建hash表，再写回磁盘。 \u003C\u002Fp\u003E\u003Cp data-pid=\"EWm_fdgY\"\u003Edivide部分有个注意点：我们需要保证所有 “相似”的record都分在同一个小文件里面，（相似可以理解为GROUP BY中关键字相同，hash函数值相同）。 \u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"uY2urwwi\"\u003E假设大文件有n个data pages， 我们有B个buffer pages \u003C\u002Fli\u003E\u003Cli data-pid=\"IY35ThFL\"\u003Edivide阶段： 用一个buffer page去逐个读取page，逐条映射record到其余B-1个buffer page， B-1个buffer page对应B-1个哈希值，也就是说最终可以得到B-1个小文件。 写在磁盘中就是B-1个分区，每个分区都是有相同hash值的record。\u003C\u002Fli\u003E\u003Cli data-pid=\"2-gSrTDV\"\u003E假设B-1个小文件的大小都小于等于B pages （能被内存装下），（如果大于的话需要继续divide下去，并且每次都使用不同的hash函数）， 接着对每个小文件建hash表并写回disk即可。\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch3\u003E7.1 流程\u003C\u002Fh3\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fa88c73e29eec3dd60f843ca4a7df0a6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1706\" data-rawheight=\"921\" class=\"origin_image zh-lightbox-thumb\" width=\"1706\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fa88c73e29eec3dd60f843ca4a7df0a6_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1706&#39; height=&#39;921&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1706\" data-rawheight=\"921\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1706\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fa88c73e29eec3dd60f843ca4a7df0a6_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fa88c73e29eec3dd60f843ca4a7df0a6_b.jpg\" data-original-token=\"v2-fa88c73e29eec3dd60f843ca4a7df0a6\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-80d5cf116333e8923b45f87031b422b4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1773\" data-rawheight=\"990\" class=\"origin_image zh-lightbox-thumb\" width=\"1773\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-80d5cf116333e8923b45f87031b422b4_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1773&#39; height=&#39;990&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1773\" data-rawheight=\"990\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1773\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-80d5cf116333e8923b45f87031b422b4_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-80d5cf116333e8923b45f87031b422b4_b.jpg\" data-original-token=\"v2-80d5cf116333e8923b45f87031b422b4\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e2c3a966937cf647cc11cb1156531365_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1714\" data-rawheight=\"944\" class=\"origin_image zh-lightbox-thumb\" width=\"1714\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e2c3a966937cf647cc11cb1156531365_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1714&#39; height=&#39;944&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1714\" data-rawheight=\"944\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1714\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e2c3a966937cf647cc11cb1156531365_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e2c3a966937cf647cc11cb1156531365_b.jpg\" data-original-token=\"v2-e2c3a966937cf647cc11cb1156531365\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-4700714ea72d863720e0d0ed32e01224_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1732\" data-rawheight=\"939\" class=\"origin_image zh-lightbox-thumb\" width=\"1732\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-4700714ea72d863720e0d0ed32e01224_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1732&#39; height=&#39;939&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1732\" data-rawheight=\"939\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1732\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-4700714ea72d863720e0d0ed32e01224_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-4700714ea72d863720e0d0ed32e01224_b.jpg\" data-original-token=\"v2-4700714ea72d863720e0d0ed32e01224\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-984116afe8221c23e42084a8f479c8ef_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1730\" data-rawheight=\"986\" class=\"origin_image zh-lightbox-thumb\" width=\"1730\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-984116afe8221c23e42084a8f479c8ef_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1730&#39; height=&#39;986&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1730\" data-rawheight=\"986\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1730\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-984116afe8221c23e42084a8f479c8ef_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-984116afe8221c23e42084a8f479c8ef_b.jpg\" data-original-token=\"v2-984116afe8221c23e42084a8f479c8ef\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-4ef8ea5a9fedda023b4406234cbb1ad1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1753\" data-rawheight=\"965\" class=\"origin_image zh-lightbox-thumb\" width=\"1753\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-4ef8ea5a9fedda023b4406234cbb1ad1_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1753&#39; height=&#39;965&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1753\" data-rawheight=\"965\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1753\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-4ef8ea5a9fedda023b4406234cbb1ad1_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-4ef8ea5a9fedda023b4406234cbb1ad1_b.jpg\" data-original-token=\"v2-4ef8ea5a9fedda023b4406234cbb1ad1\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-291e2df0022395dbc7129dd0b1a6699c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1546\" data-rawheight=\"971\" class=\"origin_image zh-lightbox-thumb\" width=\"1546\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-291e2df0022395dbc7129dd0b1a6699c_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1546&#39; height=&#39;971&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1546\" data-rawheight=\"971\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1546\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-291e2df0022395dbc7129dd0b1a6699c_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-291e2df0022395dbc7129dd0b1a6699c_b.jpg\" data-original-token=\"v2-291e2df0022395dbc7129dd0b1a6699c\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-ae2864eff987b2a43c6672891ec716fc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1564\" data-rawheight=\"958\" class=\"origin_image zh-lightbox-thumb\" width=\"1564\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-ae2864eff987b2a43c6672891ec716fc_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1564&#39; height=&#39;958&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1564\" data-rawheight=\"958\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1564\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-ae2864eff987b2a43c6672891ec716fc_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-ae2864eff987b2a43c6672891ec716fc_b.jpg\" data-original-token=\"v2-ae2864eff987b2a43c6672891ec716fc\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"S01zYw27\"\u003E.........  最终所有的record分到了三个不同的分区中。\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-3f459ef046a7588b772be9a127cdfff4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1822\" data-rawheight=\"986\" class=\"origin_image zh-lightbox-thumb\" width=\"1822\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-3f459ef046a7588b772be9a127cdfff4_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1822&#39; height=&#39;986&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1822\" data-rawheight=\"986\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1822\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-3f459ef046a7588b772be9a127cdfff4_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-3f459ef046a7588b772be9a127cdfff4_b.jpg\" data-original-token=\"v2-3f459ef046a7588b772be9a127cdfff4\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"-mv2O30e\"\u003E接下来对每个分区建hash表：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-871ccc0c638675762c855f2407a987d6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1852\" data-rawheight=\"959\" class=\"origin_image zh-lightbox-thumb\" width=\"1852\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-871ccc0c638675762c855f2407a987d6_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1852&#39; height=&#39;959&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1852\" data-rawheight=\"959\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1852\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-871ccc0c638675762c855f2407a987d6_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-871ccc0c638675762c855f2407a987d6_b.jpg\" data-original-token=\"v2-871ccc0c638675762c855f2407a987d6\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-5b66e3d40382180b2a6c8dc464c78515_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1414\" data-rawheight=\"954\" class=\"origin_image zh-lightbox-thumb\" width=\"1414\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-5b66e3d40382180b2a6c8dc464c78515_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1414&#39; height=&#39;954&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1414\" data-rawheight=\"954\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1414\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-5b66e3d40382180b2a6c8dc464c78515_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-5b66e3d40382180b2a6c8dc464c78515_b.jpg\" data-original-token=\"v2-5b66e3d40382180b2a6c8dc464c78515\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"iTuwNzhI\"\u003E.... \u003C\u002Fp\u003E\u003Cp data-pid=\"yjD2QElT\"\u003E如果某个分区所有的值都相等，并且大于内存，此时再优秀的hash函数都无法拆分该分区。\u003C\u002Fp\u003E\u003Cp data-pid=\"g2KIF3Eo\"\u003E所以为了处理这种情况，我们需要检查分区所有record是否都相等，如果是的话可以直接退出算法流程。\u003C\u002Fp\u003E\u003Cp data-pid=\"86kToARC\"\u003E最终hash得到的结果是，在磁盘中若干个分区， 每个分区的值都是相似的。通过hash函数可以找到record所在的分区。\u003C\u002Fp\u003E\u003Ch3\u003E7.2 I\u002FO cost \u003C\u002Fh3\u003E\u003Cp data-pid=\"MY0LQMwu\"\u003E由于分治过程可能不同的分区需要递归拆分，所以I\u002FO需要针对具体的数据来计算。\u003C\u002Fp\u003E\u003Cp data-pid=\"MU7Vy0Lq\"\u003E来看几个具体的练习题：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-6c50aa56a89f594b6db8f22dca84306a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1869\" data-rawheight=\"142\" class=\"origin_image zh-lightbox-thumb\" width=\"1869\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-6c50aa56a89f594b6db8f22dca84306a_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1869&#39; height=&#39;142&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1869\" data-rawheight=\"142\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1869\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-6c50aa56a89f594b6db8f22dca84306a_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-6c50aa56a89f594b6db8f22dca84306a_b.jpg\" data-original-token=\"v2-6c50aa56a89f594b6db8f22dca84306a\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cul\u003E\u003Cli data-pid=\"Uyv5gTCV\"\u003Eperfect hash functions 意味着records程度的均分。 \u003C\u002Fli\u003E\u003Cli data-pid=\"D8ociaKA\"\u003E首先读入,r0=500,  分成了9个分区，每个分区有 ceil(500\u002F9)=56个pages， w=56*9=504， 所以第一次I\u002FO 总次数ret0=500+504=1004 .\u003C\u002Fli\u003E\u003Cli data-pid=\"cDEkQgWV\"\u003E对大小为56的9个分区继续拆分，r1=504, 拆完后每个分区有 ceil(56\u002F9)=7 个pages， 所以w1=9x9x7=567.ret1=1071\u003C\u002Fli\u003E\u003Cli data-pid=\"nxEgQfo8\"\u003E对81个大小为7 page的分区建hash表，读、写各一次，ret2=81x7x2=1134 \u003C\u002Fli\u003E\u003Cli data-pid=\"2DZgxNWR\"\u003E总的IO=1004 + 1071 + 1134 = 3209 \u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-edbf4467f5086fc698b13dcf6299fb58_b.jpg\" data-size=\"normal\" data-rawwidth=\"1755\" data-rawheight=\"614\" class=\"origin_image zh-lightbox-thumb\" width=\"1755\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-edbf4467f5086fc698b13dcf6299fb58_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1755&#39; height=&#39;614&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1755\" data-rawheight=\"614\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1755\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-edbf4467f5086fc698b13dcf6299fb58_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-edbf4467f5086fc698b13dcf6299fb58_b.jpg\" data-original-token=\"v2-edbf4467f5086fc698b13dcf6299fb58\"\u002F\u003E\u003Cfigcaption\u003E除了第一次外，其余都是perfect hash 。\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cul\u003E\u003Cli data-pid=\"qvw1_TTO\"\u003E首先r0=100, w0=100\u003C\u002Fli\u003E\u003Cli data-pid=\"zPV2yIKI\"\u003E对于size =10 page的分区, ret = 10+10=20 \u003C\u002Fli\u003E\u003Cli data-pid=\"fs1AylIf\"\u003E对于size =20 page的分区, 由于ceil(20\u002F9)=3, 所以 ret = 20 + 3x9 + 2 x 3x9 = 101 \u003C\u002Fli\u003E\u003Cli data-pid=\"aZWGXhKN\"\u003E对于size =50 page的分区, 由于ceil(50\u002F9)=6, 所以 ret = 50 + 6x9 + 2 x 6x9 = 212\u003C\u002Fli\u003E\u003Cli data-pid=\"2gsnPJPT\"\u003Eret = 200 + 20 +101x2 + 212 = 634 I\u002FO \u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-52e0580f4fb7cfd182e2136b8d16eb90_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1767\" data-rawheight=\"878\" class=\"origin_image zh-lightbox-thumb\" width=\"1767\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-52e0580f4fb7cfd182e2136b8d16eb90_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1767&#39; height=&#39;878&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1767\" data-rawheight=\"878\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1767\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-52e0580f4fb7cfd182e2136b8d16eb90_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-52e0580f4fb7cfd182e2136b8d16eb90_b.jpg\" data-original-token=\"v2-52e0580f4fb7cfd182e2136b8d16eb90\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e12b3f6e415189b2b53b84a6a9d9a84d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1794\" data-rawheight=\"294\" class=\"origin_image zh-lightbox-thumb\" width=\"1794\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e12b3f6e415189b2b53b84a6a9d9a84d_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1794&#39; height=&#39;294&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1794\" data-rawheight=\"294\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1794\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e12b3f6e415189b2b53b84a6a9d9a84d_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e12b3f6e415189b2b53b84a6a9d9a84d_b.jpg\" data-original-token=\"v2-e12b3f6e415189b2b53b84a6a9d9a84d\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cul\u003E\u003Cli data-pid=\"AL-GCCAR\"\u003E由于允许3次pass， 第一次分成9块分区，第二次把9块分区分成共81块分区，每个大小正好等于10B，所以答案=9^2 * 10=810.\u003C\u002Fli\u003E\u003Cli data-pid=\"Sll-mJun\"\u003E同样的，允许k次pass的话， 理论上最多可以对一个大小为 B*(B-1)^(K-1) page的文件进行hash 。 \u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-fd6e2bb25e78b2ee9a8efc7bd39f6f14_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1909\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb\" width=\"1909\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-fd6e2bb25e78b2ee9a8efc7bd39f6f14_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1909&#39; height=&#39;141&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1909\" data-rawheight=\"141\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1909\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-fd6e2bb25e78b2ee9a8efc7bd39f6f14_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-fd6e2bb25e78b2ee9a8efc7bd39f6f14_b.jpg\" data-original-token=\"v2-fd6e2bb25e78b2ee9a8efc7bd39f6f14\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cul\u003E\u003Cli data-pid=\"_QgBHloK\"\u003E如果不递归地进行分区，也就是只divide一次，那么我们最多可以处理20x19=380个page，所以答案是381 。  \u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch2\u003E8. Joins and Iterators \u003C\u002Fh2\u003E\u003Ch3\u003E8.1 Joins introduction \u003C\u002Fh3\u003E\u003Cp data-pid=\"iRXf_4KS\"\u003E这节会讲数据库查询的算法及其优化。我们先补充一下课中没有提到的数据库优化的一些背景：\u003C\u002Fp\u003E\u003Cblockquote data-pid=\"WsrDfdxb\"\u003E    数据库优化有2个大方向，\u003Ccode\u003E数据库调优\u003C\u002Fcode\u003E 和 \u003Ccode\u003E查询优化技术\u003C\u002Fcode\u003E。其中 \u003Ccode\u003E数据库调优\u003C\u002Fcode\u003E 主要偏向与对业务的理解，通过架构设计和人工调优或基于经验案例调优的方式进行。这一点不在此课程和讨论的范围内。\u003Cbr\u002F\u003E    另一个 \u003Ccode\u003E查询优化技术\u003C\u002Fcode\u003E，是指SQL层面的优化，有别于 \u003Ccode\u003E数据库调优\u003C\u002Fcode\u003E 式的全局优化，该技术主要包括以下六个分支： \u003Cb\u003E查询重用，查询重写规则，查询算法优化，并行查询优化，分布式查询的优化\u003C\u002Fb\u003E，\u003Cb\u003E其他优化。这六个分支，与我们这次课程学习的比较相近的是 \u003Ccode\u003E查询算法优化\u003C\u002Fcode\u003E\u003C\u002Fb\u003E。\u003Cbr\u002F\u003E在进行查询优化时有两个阶段，\u003Ccode\u003E逻辑查询优化\u003C\u002Fcode\u003E 和 \u003Ccode\u003E物理查询优化\u003C\u002Fcode\u003E。\u003Cbr\u002F\u003E逻辑查询优化主要解决的问题是：如何找出SQL语句等价的变换形式，使得SQL执行更高效。\u003Cbr\u002F\u003E物理查询优化主要解决的问题是：\u003Cb\u003E比如我们这节课学的在两个表需要连接时，如何连接是最优的。\u003C\u002Fb\u003E和其他我们需要介绍的。\u003Cbr\u002F\u003E所以我们这节课学的是物理查询优化中的一种，\u003Ccode\u003E两表连接算法\u003C\u002Fcode\u003E，除了这些还有 \u003Ccode\u003E单表扫描算法\u003C\u002Fcode\u003E、\u003Ccode\u003E多表连接算法\u003C\u002Fcode\u003E、\u003Ccode\u003E索引优化\u003C\u002Fcode\u003E，等。\u003C\u002Fblockquote\u003E\u003Cp data-pid=\"E_jWr5zM\"\u003E ●\u003Cb\u003EA join is: taking one relation, and matching each tuple with tuples from another relation\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"DgE02L9h\"\u003E●\u003Cb\u003EThe join condition\u002Fpredicate determines what rows in the other relation match to a row in the first relation 。\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"Bl3iioom\"\u003E讲具体的join算法前，我们先规定：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-43dc32404dba1a6a2e91abda069520dc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1706\" data-rawheight=\"734\" class=\"origin_image zh-lightbox-thumb\" width=\"1706\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-43dc32404dba1a6a2e91abda069520dc_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1706&#39; height=&#39;734&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1706\" data-rawheight=\"734\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1706\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-43dc32404dba1a6a2e91abda069520dc_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-43dc32404dba1a6a2e91abda069520dc_b.jpg\" data-original-token=\"v2-43dc32404dba1a6a2e91abda069520dc\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003E8.2 Simple Nested Loop Join (SNLJ)\u003C\u002Fh3\u003E\u003Cp data-pid=\"QWrPoQeK\"\u003E最朴素的想法，对于左表每条record ， 都去右表全体record扫描一遍，记录matching result。 \u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-33135052c40d3c88f138e1642f43ce8a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1681\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb\" width=\"1681\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-33135052c40d3c88f138e1642f43ce8a_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1681&#39; height=&#39;424&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1681\" data-rawheight=\"424\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1681\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-33135052c40d3c88f138e1642f43ce8a_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-33135052c40d3c88f138e1642f43ce8a_b.jpg\" data-original-token=\"v2-33135052c40d3c88f138e1642f43ce8a\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"g39z1Lqz\"\u003E\u003Cb\u003ECOST = [R] + |R| * [s] \u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Ch3\u003E8.3 Page Nested Loop Join (PNLJ) \u003C\u002Fh3\u003E\u003Cp data-pid=\"-6RdCLXv\"\u003E遍历左表的一个page， 对于每个左表page，遍历右表的每个page依次读进buffer，找到这两个page的匹配record。 \u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b04126d7bc6b6aee4daa5b443cfffec9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1581\" data-rawheight=\"602\" class=\"origin_image zh-lightbox-thumb\" width=\"1581\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b04126d7bc6b6aee4daa5b443cfffec9_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1581&#39; height=&#39;602&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1581\" data-rawheight=\"602\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1581\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b04126d7bc6b6aee4daa5b443cfffec9_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b04126d7bc6b6aee4daa5b443cfffec9_b.jpg\" data-original-token=\"v2-b04126d7bc6b6aee4daa5b443cfffec9\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"AyiNBbbN\"\u003E\u003Cb\u003ECOST = [R] + [R][S] \u003C\u002Fb\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E8.3 Block Nested Loop Join (BNLJ) \u003C\u002Fh3\u003E\u003Cp data-pid=\"806znbl4\"\u003E这是对 PNLJ的一种改进，我们可以充分利用全部的buffer page，留出2个 buffer page作为S page的读入 与output page。 每次读入 B-2个 R表page，然后遍历S表的page。 \u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-dc8218683e6956cc5ceec89e693e4125_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1737\" data-rawheight=\"555\" class=\"origin_image zh-lightbox-thumb\" width=\"1737\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-dc8218683e6956cc5ceec89e693e4125_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1737&#39; height=&#39;555&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1737\" data-rawheight=\"555\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1737\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-dc8218683e6956cc5ceec89e693e4125_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-dc8218683e6956cc5ceec89e693e4125_b.jpg\" data-original-token=\"v2-dc8218683e6956cc5ceec89e693e4125\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"6uiPVeoj\"\u003ECOST =\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-f82fa9c584ea63eae8ffa6014ccdfe00_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1352\" data-rawheight=\"288\" class=\"origin_image zh-lightbox-thumb\" width=\"1352\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-f82fa9c584ea63eae8ffa6014ccdfe00_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1352&#39; height=&#39;288&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1352\" data-rawheight=\"288\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1352\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-f82fa9c584ea63eae8ffa6014ccdfe00_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-f82fa9c584ea63eae8ffa6014ccdfe00_b.jpg\" data-original-token=\"v2-f82fa9c584ea63eae8ffa6014ccdfe00\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003E 8.4 Index Nested Loop Join (INLJ) \u003C\u002Fh3\u003E\u003Cp data-pid=\"XsMD5x65\"\u003E如果我们对其中一个表（比如S表）已经建了索引（比如B+树），（能高效查找key对应的record），那么我们可以遍历R表的每个record，然后通过索引找到S表中匹配的record。 \u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-785ae68ed74ef40433db38ec1995614d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"994\" data-rawheight=\"218\" class=\"origin_image zh-lightbox-thumb\" width=\"994\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-785ae68ed74ef40433db38ec1995614d_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;994&#39; height=&#39;218&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"994\" data-rawheight=\"218\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"994\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-785ae68ed74ef40433db38ec1995614d_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-785ae68ed74ef40433db38ec1995614d_b.jpg\" data-original-token=\"v2-785ae68ed74ef40433db38ec1995614d\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"vWZjjDD0\"\u003ECOST = |R| * （cost for finding matching tuples in S）\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d83e70cafe1c9b15632dd08129d1baaa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1786\" data-rawheight=\"635\" class=\"origin_image zh-lightbox-thumb\" width=\"1786\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d83e70cafe1c9b15632dd08129d1baaa_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1786&#39; height=&#39;635&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1786\" data-rawheight=\"635\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1786\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d83e70cafe1c9b15632dd08129d1baaa_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d83e70cafe1c9b15632dd08129d1baaa_b.jpg\" data-original-token=\"v2-d83e70cafe1c9b15632dd08129d1baaa\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"wbGC9QuD\"\u003E这里的IO计算需要具体的情况，我们看几个例题：\u003C\u002Fp\u003E\u003Cp data-pid=\"nM_xE5GM\"\u003E\u003Cb\u003E1.\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a5ed66a371be3318afb6ed764de3b9dc_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1767\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb\" width=\"1767\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a5ed66a371be3318afb6ed764de3b9dc_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1767&#39; height=&#39;810&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1767\" data-rawheight=\"810\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1767\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a5ed66a371be3318afb6ed764de3b9dc_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a5ed66a371be3318afb6ed764de3b9dc_b.jpg\" data-original-token=\"v2-a5ed66a371be3318afb6ed764de3b9dc\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"RCYEoacA\"\u003E以company_id为key对C N表都各自建了B+树，而且是非聚集索引。 \u003C\u002Fp\u003E\u003Cp data-pid=\"mZPO6-EN\"\u003EC表的每个record，在N表中都对应了4个tuples，由于是非聚集索引，所以4个tuples需要看成分散在4个不用的page中。 在B+树中搜索的cost = 2+4 （高度是1，4个page） 。 \u003C\u002Fp\u003E\u003Cp data-pid=\"4QOERGFs\"\u003EC join N的代节：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-1fbde39482c200f7f8639bd7e5b8ca18_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"189\" class=\"origin_image zh-lightbox-thumb\" width=\"719\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-1fbde39482c200f7f8639bd7e5b8ca18_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;719&#39; height=&#39;189&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"719\" data-rawheight=\"189\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"719\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-1fbde39482c200f7f8639bd7e5b8ca18_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-1fbde39482c200f7f8639bd7e5b8ca18_b.jpg\" data-original-token=\"v2-1fbde39482c200f7f8639bd7e5b8ca18\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"52V7jx_Z\"\u003E同理，N join C的代节： \u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-37c556bb7587e151c32a6d287a1819d7_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb\" width=\"777\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-37c556bb7587e151c32a6d287a1819d7_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;777&#39; height=&#39;206&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"777\" data-rawheight=\"206\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"777\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-37c556bb7587e151c32a6d287a1819d7_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-37c556bb7587e151c32a6d287a1819d7_b.jpg\" data-original-token=\"v2-37c556bb7587e151c32a6d287a1819d7\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-79439610d9605134b3cfe847ee9a576d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"829\" data-rawheight=\"95\" class=\"origin_image zh-lightbox-thumb\" width=\"829\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-79439610d9605134b3cfe847ee9a576d_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;829&#39; height=&#39;95&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"829\" data-rawheight=\"95\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"829\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-79439610d9605134b3cfe847ee9a576d_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-79439610d9605134b3cfe847ee9a576d_b.jpg\" data-original-token=\"v2-79439610d9605134b3cfe847ee9a576d\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"Jscyir7c\"\u003E2. \u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-ae92d00b5fffb66c86fafaee0226f41d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1919\" data-rawheight=\"637\" class=\"origin_image zh-lightbox-thumb\" width=\"1919\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-ae92d00b5fffb66c86fafaee0226f41d_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1919&#39; height=&#39;637&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1919\" data-rawheight=\"637\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1919\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-ae92d00b5fffb66c86fafaee0226f41d_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-ae92d00b5fffb66c86fafaee0226f41d_b.jpg\" data-original-token=\"v2-ae92d00b5fffb66c86fafaee0226f41d\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"-q37BIHe\"\u003E这题需要注意的是， \u003Cimg src=\"https:\u002F\u002Fwww.zhihu.com\u002Fequation?tex=%5Crho_R\" alt=\"\\rho_R\" eeimg=\"1\"\u002F\u003E = 10, 而S中的每个record可以匹配R表中的20个tuples ，R表是聚集索引，所以20个tuples会在2个page上。  \u003C\u002Fp\u003E\u003Cp data-pid=\"82s6C8b_\"\u003E其余计算就没啥了。\u003C\u002Fp\u003E\u003Ch3\u003E8.5 Sort-Merge Join (SMJ)\u003C\u002Fh3\u003E\u003Cp data-pid=\"FQ0wGgx4\"\u003E有时候我们可以在联表前先对两个表按某些列（联表所需的列）进行排序，然后再通过双指针算法进行tuple-match，最后得到的结果是一个有序的表。  \u003C\u002Fp\u003E\u003Cp data-pid=\"k5HgjsOw\"\u003ESMJ有两个步骤：\u003C\u002Fp\u003E\u003Col\u003E\u003Cli data-pid=\"qWToKfPB\"\u003Esort R , sort S on specified key \u003C\u002Fli\u003E\u003Cli data-pid=\"LuC8ocqE\"\u003Emerge matching tuples in R and S together  \u003C\u002Fli\u003E\u003C\u002Fol\u003E\u003Cp data-pid=\"b1m8STd0\"\u003E伪代码描述双指针merge过程：\u003C\u002Fp\u003E\u003Cdiv class=\"highlight\"\u003E\u003Cpre\u003E\u003Ccode class=\"language-java\"\u003E\u003Cspan class=\"k\"\u003Ewhile\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Enot\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Edone\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n  \u003Cspan class=\"c1\"\u003E\u002F\u002F调整r s指针，找到r==s，第一处s\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E  \u003Cspan class=\"k\"\u003Ewhile\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Es\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eadvance\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n  \u003Cspan class=\"k\"\u003Ewhile\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Es\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eadvance\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Es\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n \n  \u003Cspan class=\"n\"\u003Emark\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Es\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002F save start of “block”\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E  \u003Cspan class=\"k\"\u003Ewhile\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Es\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n    \u003Cspan class=\"c1\"\u003E\u002F\u002F Outer loop over r\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E    \u003Cspan class=\"k\"\u003Ewhile\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E(\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E==\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Es\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E)\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E{\u003C\u002Fspan\u003E\n      \u003Cspan class=\"c1\"\u003E\u002F\u002F Inner loop over s\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E      \u003Cspan class=\"n\"\u003Eyield\u003C\u002Fspan\u003E \u003Cspan class=\"o\"\u003E&lt;\u003C\u002Fspan\u003E\u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E,\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Es\u003C\u002Fspan\u003E\u003Cspan class=\"o\"\u003E&gt;\u003C\u002Fspan\u003E\n      \u003Cspan class=\"n\"\u003Eadvance\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Es\u003C\u002Fspan\u003E\n    \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n    \u003Cspan class=\"n\"\u003Ereset\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Es\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Eto\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Emark\u003C\u002Fspan\u003E \u003Cspan class=\"c1\"\u003E\u002F\u002Fs回到第一处匹配的位置，以防止下一个r和当前r相等\n\u003C\u002Fspan\u003E\u003Cspan class=\"c1\"\u003E\u003C\u002Fspan\u003E    \u003Cspan class=\"n\"\u003Eadvance\u003C\u002Fspan\u003E \u003Cspan class=\"n\"\u003Er\u003C\u002Fspan\u003E    \n  \u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E \n\u003Cspan class=\"o\"\u003E}\u003C\u002Fspan\u003E\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003C\u002Fdiv\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d791bbdbe63fea832505187194779fd2_b.jpg\" data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"470\" class=\"origin_image zh-lightbox-thumb\" width=\"902\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d791bbdbe63fea832505187194779fd2_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;902&#39; height=&#39;470&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"902\" data-rawheight=\"470\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"902\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d791bbdbe63fea832505187194779fd2_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d791bbdbe63fea832505187194779fd2_b.jpg\" data-original-token=\"v2-d791bbdbe63fea832505187194779fd2\"\u002F\u003E\u003Cfigcaption\u003E左R，右S\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"HM5tf9k-\"\u003E对于R表的每个tuple，我们要在S表中找到一段与之sid相等的区间。 \u003C\u002Fp\u003E\u003Cp data-pid=\"z15h6zy7\"\u003E对于指针r，我们找打一个相等的s位置，需要记录下s目前的位置mark，然后s不断往后找到所有sid相同的row，找完后让r++，s回到mark，因为r中可能存在相同行，所以要回来重复找。 理论上这会导致时间复杂度退化到|R|*|S|, 但是现实中不会出现这种情况。\u003C\u002Fp\u003E\u003Cp data-pid=\"WVT27lUG\"\u003E当R表遍历结束，退出算法流程。\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-1a01efc14000e41b447bfe7aacaa200a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1850\" data-rawheight=\"999\" class=\"origin_image zh-lightbox-thumb\" width=\"1850\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-1a01efc14000e41b447bfe7aacaa200a_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1850&#39; height=&#39;999&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1850\" data-rawheight=\"999\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1850\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-1a01efc14000e41b447bfe7aacaa200a_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-1a01efc14000e41b447bfe7aacaa200a_b.jpg\" data-original-token=\"v2-1a01efc14000e41b447bfe7aacaa200a\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"c2ezlizv\"\u003E一般来说，COST = (cost for sort R) + (cost for sort S) + |R| + |S| ，我们假设重复项很少，不会超过1 page的容量。\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"BJX7WiVb\"\u003E\u003Cb\u003E优化: 对于external merge sort，如果我们能够将倒数第二个runs保存在缓冲区，并可以留出1个page用于output，那么我们此时可以一遍进行最后一次归并，一边进行SMJ算法。 可以省出 2* ([R]+[S])的I\u002FO.\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"XuRqngfv\"\u003E\u003Cb\u003E例题：\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c3c3ede6a0ca7b3c6d7ad2e54f751ad5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1811\" data-rawheight=\"394\" class=\"origin_image zh-lightbox-thumb\" width=\"1811\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c3c3ede6a0ca7b3c6d7ad2e54f751ad5_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1811&#39; height=&#39;394&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1811\" data-rawheight=\"394\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1811\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c3c3ede6a0ca7b3c6d7ad2e54f751ad5_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c3c3ede6a0ca7b3c6d7ad2e54f751ad5_b.jpg\" data-original-token=\"v2-c3c3ede6a0ca7b3c6d7ad2e54f751ad5\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cul\u003E\u003Cli data-pid=\"58a-Z-i0\"\u003Eunoptimize : sort R: 200+200=400, sort S:100+100=200, ans = 400+200+100+50 = 750\u003C\u002Fli\u003E\u003Cli data-pid=\"0Cvgma9s\"\u003Eoptimieze: \u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp data-pid=\"z_1lufmY\"\u003E第一次merge R并写回disk：200， 第一次merge S并写回disk：100\u003C\u002Fp\u003E\u003Cp data-pid=\"vHuKa7K_\"\u003E发现此时\u003Cb\u003Eruns of R=5, runs of S=3, 3+5 &lt;= 19,\u003C\u002Fb\u003E可以同时做最后一次merge了，所以SMJ和最后merge sort同时进行， cost=100+50 .\u003C\u002Fp\u003E\u003Cp data-pid=\"FZDxolwr\"\u003E\u003Cb\u003Eans=200+100+150=450 \u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-f7ddbaefc161c06af779836b6a6be70e_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1874\" data-rawheight=\"980\" class=\"origin_image zh-lightbox-thumb\" width=\"1874\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-f7ddbaefc161c06af779836b6a6be70e_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1874&#39; height=&#39;980&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1874\" data-rawheight=\"980\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1874\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-f7ddbaefc161c06af779836b6a6be70e_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-f7ddbaefc161c06af779836b6a6be70e_b.jpg\" data-original-token=\"v2-f7ddbaefc161c06af779836b6a6be70e\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003E8.6 Grace Hash join \u003C\u002Fh3\u003E\u003Cp data-pid=\"8hBcHQMj\"\u003E和SMJ一样，我们可以换一种预处理方式，建hash table。假设R表映射得到B-1个分区，每个分区构都&lt;=B-2 pages, 我们可以将R表每个分区各自读进内存建一个 in-memory hash table, 然后将S表按page读入并探测。 \u003C\u002Fp\u003E\u003Cp data-pid=\"TTFK-X9K\"\u003E但是现实中R S表往往都很大，不能直接读进来构造in-memory table, 此时我们仍可以采取分区的方式，将R S不断分区成更小的表(需要保证所有可能匹配的record都在同一个分区)，直到满足条件。 具体做法：\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"PcnDTSmS\"\u003E我们将R S用\u003Cb\u003E同一hash函数\u003C\u002Fb\u003E进行分区，得到B-1个 partition ，每个partition由两个表组成Ri，Si，是R S经过hash函数得到的子表。（这里很关键，我们举例说明一下，假设联表条件是R.id=S.id, hash函数可以是 id&lt;=10,to partition 1; 11&lt;=id&lt;=20; to partition 2 ,\u003Cb\u003E这样可以保证id可能相等的tuple都分在同一分区\u003C\u002Fb\u003E）\u003C\u002Fli\u003E\u003Cli data-pid=\"RVdlJ0HU\"\u003E对于每个分区，如果存在一个表 &lt;= B-2, 那么就可以读进来建hash表，然后把另一个表按page读进来匹配。由于每个分区都是由两个表组成，所以可以采取递归。 \u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-ab0edc4559a5a23fe60e0af391de4ae6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1756\" data-rawheight=\"958\" class=\"origin_image zh-lightbox-thumb\" width=\"1756\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-ab0edc4559a5a23fe60e0af391de4ae6_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1756&#39; height=&#39;958&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1756\" data-rawheight=\"958\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1756\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-ab0edc4559a5a23fe60e0af391de4ae6_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-ab0edc4559a5a23fe60e0af391de4ae6_b.jpg\" data-original-token=\"v2-ab0edc4559a5a23fe60e0af391de4ae6\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch2\u003E9. Relational Algebra \u003C\u002Fh2\u003E\u003Ch3\u003E9.1 Motivation\u003C\u002Fh3\u003E\u003Cp data-pid=\"YTw3w2QI\"\u003E前面我们接触的SQL是一种声明式语言，对查询者是很友好的，但是对于数据库设计者来说，需要另一种更具有表达功能的语言，\u003Cb\u003EFor this we will use Relational Algebra, a procedural programming language (meaning that the query specifies exactly what operators to use and in what order).\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-a68e4d79663b6c944ad8a8dab016a17b_b.jpg\" data-size=\"normal\" data-rawwidth=\"1741\" data-rawheight=\"700\" class=\"origin_image zh-lightbox-thumb\" width=\"1741\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-a68e4d79663b6c944ad8a8dab016a17b_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1741&#39; height=&#39;700&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1741\" data-rawheight=\"700\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1741\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-a68e4d79663b6c944ad8a8dab016a17b_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-a68e4d79663b6c944ad8a8dab016a17b_b.jpg\" data-original-token=\"v2-a68e4d79663b6c944ad8a8dab016a17b\"\u002F\u003E\u003Cfigcaption\u003Erealtion : 一个关系表\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-101b5570e96da445bd05b0f83b161685_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1287\" data-rawheight=\"1017\" class=\"origin_image zh-lightbox-thumb\" width=\"1287\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-101b5570e96da445bd05b0f83b161685_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1287&#39; height=&#39;1017&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1287\" data-rawheight=\"1017\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1287\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-101b5570e96da445bd05b0f83b161685_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-101b5570e96da445bd05b0f83b161685_b.jpg\" data-original-token=\"v2-101b5570e96da445bd05b0f83b161685\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-f5b332e1b277eb35232f3718610a155b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1414\" data-rawheight=\"998\" class=\"origin_image zh-lightbox-thumb\" width=\"1414\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-f5b332e1b277eb35232f3718610a155b_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1414&#39; height=&#39;998&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1414\" data-rawheight=\"998\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1414\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-f5b332e1b277eb35232f3718610a155b_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-f5b332e1b277eb35232f3718610a155b_b.jpg\" data-original-token=\"v2-f5b332e1b277eb35232f3718610a155b\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-a81c029ed770062c36b26ee0614d8335_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1745\" data-rawheight=\"1023\" class=\"origin_image zh-lightbox-thumb\" width=\"1745\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-a81c029ed770062c36b26ee0614d8335_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1745&#39; height=&#39;1023&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1745\" data-rawheight=\"1023\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1745\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-a81c029ed770062c36b26ee0614d8335_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-a81c029ed770062c36b26ee0614d8335_b.jpg\" data-original-token=\"v2-a81c029ed770062c36b26ee0614d8335\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-ddf11e3b2e07879df06d939740419522_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"1025\" class=\"origin_image zh-lightbox-thumb\" width=\"1536\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-ddf11e3b2e07879df06d939740419522_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1536&#39; height=&#39;1025&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1536\" data-rawheight=\"1025\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1536\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-ddf11e3b2e07879df06d939740419522_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-ddf11e3b2e07879df06d939740419522_b.jpg\" data-original-token=\"v2-ddf11e3b2e07879df06d939740419522\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-2913fe41e04c07aba96bd832dd30a3b1_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1768\" data-rawheight=\"977\" class=\"origin_image zh-lightbox-thumb\" width=\"1768\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-2913fe41e04c07aba96bd832dd30a3b1_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1768&#39; height=&#39;977&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1768\" data-rawheight=\"977\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1768\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-2913fe41e04c07aba96bd832dd30a3b1_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-2913fe41e04c07aba96bd832dd30a3b1_b.jpg\" data-original-token=\"v2-2913fe41e04c07aba96bd832dd30a3b1\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-03a15491031378bb4d49c0234f3ebff5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1808\" data-rawheight=\"846\" class=\"origin_image zh-lightbox-thumb\" width=\"1808\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-03a15491031378bb4d49c0234f3ebff5_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1808&#39; height=&#39;846&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1808\" data-rawheight=\"846\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1808\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-03a15491031378bb4d49c0234f3ebff5_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-03a15491031378bb4d49c0234f3ebff5_b.jpg\" data-original-token=\"v2-03a15491031378bb4d49c0234f3ebff5\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e6b74953a651c9ff43236e19e0f67555_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1885\" data-rawheight=\"887\" class=\"origin_image zh-lightbox-thumb\" width=\"1885\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e6b74953a651c9ff43236e19e0f67555_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1885&#39; height=&#39;887&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1885\" data-rawheight=\"887\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1885\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e6b74953a651c9ff43236e19e0f67555_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e6b74953a651c9ff43236e19e0f67555_b.jpg\" data-original-token=\"v2-e6b74953a651c9ff43236e19e0f67555\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d5c315eee06825c8a8ccae45eee160d2_b.jpg\" data-size=\"normal\" data-rawwidth=\"1879\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb\" width=\"1879\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d5c315eee06825c8a8ccae45eee160d2_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1879&#39; height=&#39;794&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1879\" data-rawheight=\"794\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1879\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d5c315eee06825c8a8ccae45eee160d2_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-d5c315eee06825c8a8ccae45eee160d2_b.jpg\" data-original-token=\"v2-d5c315eee06825c8a8ccae45eee160d2\"\u002F\u003E\u003Cfigcaption\u003EIntersection is a compound operator. \u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-e3d44f4783e53431ce726043eb1ca4c8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1264\" data-rawheight=\"401\" class=\"origin_image zh-lightbox-thumb\" width=\"1264\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-e3d44f4783e53431ce726043eb1ca4c8_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1264&#39; height=&#39;401&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1264\" data-rawheight=\"401\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1264\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-e3d44f4783e53431ce726043eb1ca4c8_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-e3d44f4783e53431ce726043eb1ca4c8_b.jpg\" data-original-token=\"v2-e3d44f4783e53431ce726043eb1ca4c8\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"Y4hAtWEA\"\u003E我们应该尽量避免笛卡尔积，因此需要用优秀的join算法(这里指逻辑层面)。\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-11a9ace44db01620703002d148558da0_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1683\" data-rawheight=\"714\" class=\"origin_image zh-lightbox-thumb\" width=\"1683\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-11a9ace44db01620703002d148558da0_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1683&#39; height=&#39;714&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1683\" data-rawheight=\"714\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1683\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-11a9ace44db01620703002d148558da0_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-11a9ace44db01620703002d148558da0_b.jpg\" data-original-token=\"v2-11a9ace44db01620703002d148558da0\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b83b5d44823855c140719ba26d0c6ff3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1946\" data-rawheight=\"936\" class=\"origin_image zh-lightbox-thumb\" width=\"1946\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b83b5d44823855c140719ba26d0c6ff3_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1946&#39; height=&#39;936&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1946\" data-rawheight=\"936\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1946\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b83b5d44823855c140719ba26d0c6ff3_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-b83b5d44823855c140719ba26d0c6ff3_b.jpg\" data-original-token=\"v2-b83b5d44823855c140719ba26d0c6ff3\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-fc8e772398c3540f7f748ab31f5c6839_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1938\" data-rawheight=\"664\" class=\"origin_image zh-lightbox-thumb\" width=\"1938\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-fc8e772398c3540f7f748ab31f5c6839_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1938&#39; height=&#39;664&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1938\" data-rawheight=\"664\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1938\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-fc8e772398c3540f7f748ab31f5c6839_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-fc8e772398c3540f7f748ab31f5c6839_b.jpg\" data-original-token=\"v2-fc8e772398c3540f7f748ab31f5c6839\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-5df3bccae5a8c73f6a599119be6a2e6c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1851\" data-rawheight=\"929\" class=\"origin_image zh-lightbox-thumb\" width=\"1851\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-5df3bccae5a8c73f6a599119be6a2e6c_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1851&#39; height=&#39;929&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1851\" data-rawheight=\"929\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1851\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-5df3bccae5a8c73f6a599119be6a2e6c_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-5df3bccae5a8c73f6a599119be6a2e6c_b.jpg\" data-original-token=\"v2-5df3bccae5a8c73f6a599119be6a2e6c\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-52eeb0fc8c12138df6ec11ef5a8951a8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1241\" data-rawheight=\"678\" class=\"origin_image zh-lightbox-thumb\" width=\"1241\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-52eeb0fc8c12138df6ec11ef5a8951a8_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1241&#39; height=&#39;678&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1241\" data-rawheight=\"678\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1241\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-52eeb0fc8c12138df6ec11ef5a8951a8_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-52eeb0fc8c12138df6ec11ef5a8951a8_b.jpg\" data-original-token=\"v2-52eeb0fc8c12138df6ec11ef5a8951a8\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-cc6271ef958cc3c7af0be662e35a53f4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1766\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb\" width=\"1766\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-cc6271ef958cc3c7af0be662e35a53f4_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1766&#39; height=&#39;768&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1766\" data-rawheight=\"768\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1766\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-cc6271ef958cc3c7af0be662e35a53f4_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-cc6271ef958cc3c7af0be662e35a53f4_b.jpg\" data-original-token=\"v2-cc6271ef958cc3c7af0be662e35a53f4\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"6o_v5YMg\"\u003E再次回到刚开始的问题，我们为什么需要学关系代数？ \u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"M1Jv3mDT\"\u003E关系代数可以很简洁地描述问题，方便DBMS去操作。（逻辑上重写和优化查询）\u003C\u002Fli\u003E\u003Cli data-pid=\"DnjeAPY9\"\u003EDBMS为了重写和简化关系代数表达式，使用各自启发式、成本函数。（没看懂）\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-cb7449c8ff615f0332a51869da98d91a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1783\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb\" width=\"1783\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-cb7449c8ff615f0332a51869da98d91a_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1783&#39; height=&#39;850&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1783\" data-rawheight=\"850\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1783\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-cb7449c8ff615f0332a51869da98d91a_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-cb7449c8ff615f0332a51869da98d91a_b.jpg\" data-original-token=\"v2-cb7449c8ff615f0332a51869da98d91a\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"3OMRshol\"\u003E例。\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-12a3bd61566be5d3007015ba5f9935b3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1742\" data-rawheight=\"716\" class=\"origin_image zh-lightbox-thumb\" width=\"1742\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-12a3bd61566be5d3007015ba5f9935b3_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1742&#39; height=&#39;716&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1742\" data-rawheight=\"716\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1742\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-12a3bd61566be5d3007015ba5f9935b3_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-12a3bd61566be5d3007015ba5f9935b3_b.jpg\" data-original-token=\"v2-12a3bd61566be5d3007015ba5f9935b3\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"8057peVH\"\u003E1.\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c1917c12decc32760ab734ce09e7559d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"753\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb\" width=\"753\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c1917c12decc32760ab734ce09e7559d_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;753&#39; height=&#39;285&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"753\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"753\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c1917c12decc32760ab734ce09e7559d_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-c1917c12decc32760ab734ce09e7559d_b.jpg\" data-original-token=\"v2-c1917c12decc32760ab734ce09e7559d\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"4qEJ7zQ9\"\u003E2.\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3ef738c615da72f77a776fd07a303c95_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"442\" class=\"origin_image zh-lightbox-thumb\" width=\"800\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3ef738c615da72f77a776fd07a303c95_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;800&#39; height=&#39;442&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"800\" data-rawheight=\"442\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"800\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3ef738c615da72f77a776fd07a303c95_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-3ef738c615da72f77a776fd07a303c95_b.jpg\" data-original-token=\"v2-3ef738c615da72f77a776fd07a303c95\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch2\u003E10&amp;11. Query Optimization (plan space and search)\u003C\u002Fh2\u003E\u003Ch3\u003E.0  \u003C\u002Fh3\u003E\u003Cp data-pid=\"WOLmguhp\"\u003E前两讲介绍了连表算法，关系代数，在关系代数中我们知道SQL查询可以转化成一串关系代数表达式，（也可以写成树的形式），而数据库内部可以改变关系代数的执行顺序，从而获得更优的查询算法。 \u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-406d04634d7123ae1096f89af66ebb7b_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"551\" class=\"origin_image zh-lightbox-thumb\" width=\"632\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-406d04634d7123ae1096f89af66ebb7b_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;632&#39; height=&#39;551&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"632\" data-rawheight=\"551\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"632\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-406d04634d7123ae1096f89af66ebb7b_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-406d04634d7123ae1096f89af66ebb7b_b.jpg\" data-original-token=\"v2-406d04634d7123ae1096f89af66ebb7b\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"PF_psoue\"\u003Equery plan: 一串关系代数表达式，可以返回SQL查询需要的结果\u003C\u002Fp\u003E\u003Cp data-pid=\"m3LZlPYK\"\u003Equery space： 对于一个查询的所有query plan的集合\u003C\u002Fp\u003E\u003Cp data-pid=\"K-QXut0M\"\u003EQuery Optimization ： 对于给定的查询，设计一个算法找出(近似)最优的查询策略(query plan)。 \u003C\u002Fp\u003E\u003Cp data-pid=\"-9QlRrjV\"\u003EQuery operator ：操作符，关系代数中的 \u003Cimg src=\"https:\u002F\u002Fwww.zhihu.com\u002Fequation?tex=%5Cpi\" alt=\"\\pi\" eeimg=\"1\"\u002F\u003E （ project）， \u003Cimg src=\"https:\u002F\u002Fwww.zhihu.com\u002Fequation?tex=%5Csigma\" alt=\"\\sigma\" eeimg=\"1\"\u002F\u003E （select predicate），join，order by， group by....  在的项目proj3中，每种操作符都是一个类。\u003Cb\u003E操作符本质是一个 Iterable&lt;Record&gt; . \u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"qp34UXt4\"\u003E\u003Cb\u003E即：操作符接受一个 \u003C\u002Fb\u003E Iterable&lt;Record&gt; ， 返回一个 Iterable&lt;Record&gt;作为下一个操作符的输入。\u003C\u002Fp\u003E\u003Cp data-pid=\"ObhCUmxU\"\u003Eproj3中采用火山模型：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-af82a2787d7331847f7b9977e757d3fb_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"950\" class=\"origin_image zh-lightbox-thumb\" width=\"1440\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-af82a2787d7331847f7b9977e757d3fb_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1440&#39; height=&#39;950&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1440\" data-rawheight=\"950\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1440\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-af82a2787d7331847f7b9977e757d3fb_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-af82a2787d7331847f7b9977e757d3fb_b.jpg\" data-original-token=\"v2-af82a2787d7331847f7b9977e757d3fb\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cblockquote data-pid=\"pLwVLMGS\"\u003EThis is the \u003Ci\u003Evolcano model\u003C\u002Fi\u003E, where the operators are layered atop one another, and each operator requests tuples from the input operator(s) as it needs to generate its next output tuple. \u003Cb\u003ENote that each operator only fetches tuples from its input operator(s) as needed, rather than all at once!\u003C\u002Fb\u003E\u003C\u002Fblockquote\u003E\u003Ch3\u003E\u003Cb\u003E所以在实现火山模型的时候采用传递数据迭代器的形式。\u003C\u002Fb\u003E\u003C\u002Fh3\u003E\u003Ch3\u003E.1 Selectivity Estimation \u003C\u002Fh3\u003E\u003Cp data-pid=\"iZx_vVd5\"\u003E查询优化的一个需要注意地方是，在我们执行一个计划之前，我们无法知道该计划将花费多少I\u002FO。这有两个重要的含义。首先，我们不可能保证我们会找到最佳的查询计划--我们只能希望通过启发式方法和估计来找到一个好的（足够的）计划。第二，我们需要某种方式来估计一个查询计划的成本。我们将使用一个工具来预估一个查询计划的成本，这叫做选择性估计。操作符的选择性是指通过操作符进入上面的操作符的页面的百分比的近似值。这一点很重要， 因为如果我们有一个操作符，并且它大大减少了进入下一阶段的页面数量 （比如WHERE子句），我们可能想尽快完成这个操作，这样的话接下来的操作符就可以处理更少的数据了。\u003C\u002Fp\u003E\u003Cp data-pid=\"OrAMME0B\"\u003E\u003Cb\u003E选择性是是针对操作符而言的。\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"xvzLWcXJ\"\u003E操作符的选择性有其自己的算法。这里不展开细说了。\u003C\u002Fp\u003E\u003Ch3\u003E.2 Common Heuristics\u003C\u002Fh3\u003E\u003Cp data-pid=\"-HmcrQLu\"\u003E查询优化算法是基于搜索，我们可以用一些启发式策略剪枝。\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"B-2oAFAh\"\u003EPush down projects (π) and selects (σ) as far as they can go .  后者很好理解，比如让可以减少records数量的where操作符尽早使用； 前者可以让每条record变小，使得1个page可以存放更多的record，从而减少page占用。 \u003C\u002Fli\u003E\u003Cli data-pid=\"41RPyC1a\"\u003EOnly consider left deep plans 。 只考虑左深树，意思就是每次join结果作为左表，新加入的表作为右表。\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-f12466fdef05e3a46b7df49bc2544075_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"841\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb\" width=\"841\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-f12466fdef05e3a46b7df49bc2544075_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;841&#39; height=&#39;285&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"841\" data-rawheight=\"285\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"841\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-f12466fdef05e3a46b7df49bc2544075_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-f12466fdef05e3a46b7df49bc2544075_b.jpg\" data-original-token=\"v2-f12466fdef05e3a46b7df49bc2544075\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"bdaEmgt8\"\u003E用左深树可以使得使得查询计划以&#34;流水线&#34;形式进行，即：操作符的结果不需要写回磁盘，可以按record流入下一个操作符，实战项目中这里是通过迭代器 Iterator&lt;Reocrd&gt;来实现的。 即：每个操作符的input是一个迭代器（遍历表的每行），output 也是一个迭代器，遍历结果表的每一行。 （当然，我们可以把结果表写回磁盘，即： materialize，后面会提到）\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"P7kBQjHw\"\u003E尽量避免笛卡尔积 。 \u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Ch3\u003E.3 materialize \u003C\u002Fh3\u003E\u003Cp data-pid=\"7LlBXLnH\"\u003E”物质化“就是把操作符的结果写回磁盘，这个操作符返回的迭代器就是磁盘中数据的迭代器。 比如之前我们学过的GHJ, SortOperator ，最终结果都会写回磁盘。 即把它写到一个临时文件中，这个过程会产生额外的I\u002FO。当下一个运算符需要使用这个表时，我们必须再次将其从磁盘读入内存。如果不选择物质化，直接将一个运算符的输出流向下一个运算符，我们就不会将中间表写入磁盘。\u003C\u002Fp\u003E\u003Cp data-pid=\"rkYXYF4O\"\u003E可以通过一个题来理解其作用：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-83b62c901cd5286cd77eac40ebedc25f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1650\" data-rawheight=\"552\" class=\"origin_image zh-lightbox-thumb\" width=\"1650\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-83b62c901cd5286cd77eac40ebedc25f_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1650&#39; height=&#39;552&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1650\" data-rawheight=\"552\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1650\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-83b62c901cd5286cd77eac40ebedc25f_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-83b62c901cd5286cd77eac40ebedc25f_b.jpg\" data-original-token=\"v2-83b62c901cd5286cd77eac40ebedc25f\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-96adb8fcfc6b9d06082da2492a7c6c49_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1622\" data-rawheight=\"774\" class=\"origin_image zh-lightbox-thumb\" width=\"1622\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-96adb8fcfc6b9d06082da2492a7c6c49_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1622&#39; height=&#39;774&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1622\" data-rawheight=\"774\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1622\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-96adb8fcfc6b9d06082da2492a7c6c49_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-96adb8fcfc6b9d06082da2492a7c6c49_b.jpg\" data-original-token=\"v2-96adb8fcfc6b9d06082da2492a7c6c49\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"bf8Ev7hI\"\u003E右表的 \u003Cimg src=\"https:\u002F\u002Fwww.zhihu.com\u002Fequation?tex=%5Csigma\" alt=\"\\sigma\" eeimg=\"1\"\u002F\u003E 操作符没有物质化，所以没有连接的时候右表每次都是扫描全表。所以 \u003Cimg src=\"https:\u002F\u002Fwww.zhihu.com\u002Fequation?tex=%5Csigma\" alt=\"\\sigma\" eeimg=\"1\"\u002F\u003E 的push down没有起到优化作用。\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a0ced79409ad935edd8c4ffee227883c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1393\" data-rawheight=\"697\" class=\"origin_image zh-lightbox-thumb\" width=\"1393\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a0ced79409ad935edd8c4ffee227883c_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1393&#39; height=&#39;697&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1393\" data-rawheight=\"697\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1393\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a0ced79409ad935edd8c4ffee227883c_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-a0ced79409ad935edd8c4ffee227883c_b.jpg\" data-original-token=\"v2-a0ced79409ad935edd8c4ffee227883c\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fb9e23b0df3d2cd03cf9b3de4b458a0a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1630\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb\" width=\"1630\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fb9e23b0df3d2cd03cf9b3de4b458a0a_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1630&#39; height=&#39;100&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1630\" data-rawheight=\"100\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1630\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fb9e23b0df3d2cd03cf9b3de4b458a0a_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-fb9e23b0df3d2cd03cf9b3de4b458a0a_b.jpg\" data-original-token=\"v2-fb9e23b0df3d2cd03cf9b3de4b458a0a\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"4xFOlQSI\"\u003E100+40 ： 物质化的读与写的IO cost。 \u003C\u002Fp\u003E\u003Cp data-pid=\"sk-yxv_u\"\u003E新表的大小是40 pages。 \u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E.4 通过dp解决plan space search\u003C\u002Fh3\u003E\u003Cp data-pid=\"Oj4jzOX4\"\u003E我们需要解决的问题是找到IO 最少的plan，\u003Cb\u003E优化的核心在于找到连接plan中所有的表最少的IO\u003C\u002Fb\u003E，连接完所有的表后，group by ，project， order by等等依次加上即可。\u003C\u002Fp\u003E\u003Cp data-pid=\"-8Fgtyhu\"\u003E\u003Cb\u003E我们采用动态规划算法，dp&lt;set,QueryOperator&gt; 表示把set中的表连接起来 代节最小的plan的 最后一次join操作符 （我们对最后一次join操作符调用 this.estimateIOCost()可以得到整个plan的IO cost）\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"AxMCjE0x\"\u003E这个dp本质是一个状压dp，所以最多用来处理十多个表的连接。\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"PgInB0sn\"\u003E先处理set中只有1个表的情况,对于1个表返回遍历最小代节的操作符。（需要用上select predicate） 实现 \u003Ccode\u003EminCostSingleAccess(String table)\u003C\u002Fcode\u003E ,对于一个表，要么文件扫描，要么索引扫描。后者需要满足条件：select predicate所在列具有索引，且这个过滤条件不能为 &#39;!=&#39; .\u003C\u002Fli\u003E\u003Cli data-pid=\"4jn7X0Ll\"\u003Edp[set(i)]表示连接set(i)表的状态，dp[set(i)] = minCostJoins(dp[set(i-1)], dp[single]) , minCostJoins函数的文档提供了基本思路，照着写即可。 \u003Cb\u003E这里有个地方需要注意，我们需要严格遵守左深树 ,dp[set(i-1)]必须是左表。\u003C\u002Fb\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp data-pid=\"rh_-9QS-\"\u003E这里是proj3相关lab的思路，这里忽略了interesting order，写起来更简单。\u003C\u002Fp\u003E\u003Cp data-pid=\"KZt9I3Vx\"\u003E所谓 interesting order ：\u003C\u002Fp\u003E\u003Cp data-pid=\"LO0q3s7F\"\u003EAn interesting order is when the table is sorted on a column that is either: \u003C\u002Fp\u003E\u003Cp data-pid=\"6_kbGZBe\"\u003E• Used in an ORDER BY \u003C\u002Fp\u003E\u003Cp data-pid=\"Svtfj2Jq\"\u003E• Used in a GROUP BY\u003C\u002Fp\u003E\u003Cp data-pid=\"hQI7T6lI\"\u003E• Used in a downstream join (a join that hasn’t yet been evaluated. For pass 1, this is all joins).\u003C\u002Fp\u003E\u003Cp data-pid=\"z5qILU1x\"\u003E\u003Cb\u003EAnyway，this order is only interesting if it used later in our query!  \u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"Mrz-WUyg\"\u003E\u003Cb\u003E可能产生interest order的操作符可能有：indexScanOperator, SMJ ..\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"TR-ydY9M\"\u003E这几节课的收获主要在project中体现~ 很有趣的实验。\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch2\u003E12&amp;13. Transactions &amp; Concurrency\u003C\u002Fh2\u003E\u003Cp data-pid=\"8QXT-qQT\"\u003E这一讲开始介绍事务，DBMS如何保证其ACID四个属性。\u003C\u002Fp\u003E\u003Cp data-pid=\"xGgajB5n\"\u003E其中隔离性（isolation）与并发（concurrency）有关，其余3个与恢复（recovery）有关，内容在下一节。 \u003C\u002Fp\u003E\u003Ch3\u003E12.1 what is transaction \u003C\u002Fh3\u003E\u003Cp data-pid=\"GtuMslq7\"\u003E我们在此前的学习中一直假设数据库只支持一个用户同时访问，但实际上许多用户是可以同时使用DBMS的，这就涉及到并发。同时访问DBMS可能会出现以下问题：\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"AprLyYZO\"\u003E不一致性读取: 某个用户只读取了部分更新的内容，比如user1打算修改更新table1, table2， 但是user2在user1只修改了table1后，就读取了table1，table2的内容。 （更具体一点，银行要从A账户转40元给B账户，在A账户减40后，B账户加40前，另一个用户读取了A B账户）\u003C\u002Fli\u003E\u003Cli data-pid=\"MdBy3E2D\"\u003E丢失修改：两个用户修改同一条数据，后者导致前者的修改丢失。比如 用户1打算让table1某个数据+10，用户2打算让某个数据*2，在用户1提交前，用户2进行了操作，覆盖了用户1的修改 ，使之丢失\u003C\u002Fli\u003E\u003Cli data-pid=\"qccNYxXW\"\u003E脏读：某用户读取了一条未提交的修改。 用户1让数据A加10，随后B紧接着读取了数据A，此时A的修改未提交，是有可能被撤销的。 \u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp data-pid=\"6iy6pKqt\"\u003E为了避免这些问题，我们提出 事务(transaction)这个概念： 事务是一系列有序操作构成的整体，比如一段完整的SQL查询语句， 一件具体的事情（银行转账）。\u003C\u002Fp\u003E\u003Cblockquote data-pid=\"76lWzmmn\"\u003EOur solution to those problems is to define a set of rules and guarantees about operations. We will do this by using transactions.\u003Cb\u003E A transaction is a sequence of multiple actions that should be executed as a single, logical, atomic unit. \u003C\u002Fb\u003ETransactions guarantee the ACID properties to avoid the problems discussed above。 \u003C\u002Fblockquote\u003E\u003Cp data-pid=\"rWwvWUOR\"\u003E事务的四个属性 ACID：\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"S00ON__B\"\u003E原子性：事务是一个不可分割的单元，事务中的操作要么全部执行并提交，要么全部撤销。 \u003C\u002Fli\u003E\u003Cli data-pid=\"FdYgQz8Q\"\u003E一致性：事务进行前后，数据满足的约束需要一致 （比如银行从A转40给B，转账前后总金额是一样的）\u003C\u002Fli\u003E\u003Cli data-pid=\"RNsWZXFg\"\u003E隔离性：并发的实现中，结果必须看起来和所有事务单独按顺序实现一样，事务不相互影响。\u003C\u002Fli\u003E\u003Cli data-pid=\"aRu68_UR\"\u003E持久性：事务一但提交，其修改是在磁盘中的，是永久的，即使之后DBMS发生故障也不影响其永久性。\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cblockquote data-pid=\"-fZysccF\"\u003E• Atomicity: A transaction ends in two ways: it either commits or aborts. Atomicity means that either all actions in the Xact happen, or none happen. \u003Cbr\u002F\u003E• Consistency: If the DB starts out consistent, it ends up consistent at the end of the Xact.\u003Cbr\u002F\u003E• Isolation: Execution of each Xact is isolated from that of others. In reality, the DBMS will interleave actions of many Xacts and not execute each in order of one after the other. The DBMS will ensure that each Xact executes as if it ran by itself. \u003Cbr\u002F\u003E• Durabilty: If a Xact commits, its effects persist. The effects of a committed Xact must survive failures.\u003C\u002Fblockquote\u003E\u003Cp data-pid=\"_jLxz17w\"\u003E事务最终要么提交，要么撤销。\u003C\u002Fp\u003E\u003Cp data-pid=\"H_sQdhLL\"\u003E●\u003Cb\u003Ecommit\u003C\u002Fb\u003E: indicates \u003Ci\u003Esuccessful\u003C\u002Fi\u003E transaction (save changes)\u003C\u002Fp\u003E\u003Cp data-pid=\"ensEd9L2\"\u003E●\u003Cb\u003Eabort\u003C\u002Fb\u003E: indicates \u003Ci\u003Eunsuccessful\u003C\u002Fi\u003E transaction (revert changes)\u003C\u002Fp\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Ch3\u003E12.2 why concurrency \u003C\u002Fh3\u003E\u003Cp data-pid=\"0p2dupAY\"\u003E并发的目的是什么？提升DBMS的运行效率：\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"DWbxovgw\"\u003E增加事务吞吐量，在事务A从磁盘读取pages时，cpu可能是空闲的，此时让它去处理事务B，增加性能利用率。\u003C\u002Fli\u003E\u003Cli data-pid=\"FmXV5-6_\"\u003E当我们需要处理大量事务时，让大的事务和小的事务并发，可以减少后者等待时间\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp data-pid=\"4_1WzfM1\"\u003E\u003Cb\u003Eschedule（调度）\u003C\u002Fb\u003E: order in which we execute operations of a set of transactions\u003C\u002Fp\u003E\u003Cp data-pid=\"qrGUDynm\"\u003Eserial schedule（串行调度）：事务一个接一个进行，不存在操作交错。 这是最简单的实现隔离性的方法，但是0并发。 \u003C\u002Fp\u003E\u003Cp data-pid=\"sI2kP6AM\"\u003E我们定义两个调度等价当且仅当：\u003C\u002Fp\u003E\u003Cp data-pid=\"zsyv0C2k\"\u003E○1.他们包含的事务是同一组事务\u003C\u002Fp\u003E\u003Cp data-pid=\"TGMOabJJ\"\u003E○2.对于每个事务，其操作在两个调度中是同样的顺序\u003C\u002Fp\u003E\u003Cp data-pid=\"B2gF7px1\"\u003E○2.两个调度执行完后，数据库的状态是一样的。\u003C\u002Fp\u003E\u003Cp data-pid=\"OQeSosHS\"\u003E我们在并发过程中要实现隔离，就相当于找到一个与串行调度等价的调度。 \u003C\u002Fp\u003E\u003Cp data-pid=\"AjrjPlwE\"\u003E我们称这种调度为\u003Cb\u003E可串行调度\u003C\u002Fb\u003E。 （\u003Cb\u003Eserializable\u003C\u002Fb\u003E）\u003C\u002Fp\u003E\u003Cp data-pid=\"69Fg_qqW\"\u003E但是验证一个调度是否是可串行调度成本太大，因为要知道执行完后数据库的最终状态是否与串行调度相等。\u003C\u002Fp\u003E\u003Cp data-pid=\"r9GvLjFO\"\u003E我们可以去验证其是否属于串行调度的一个子集：\u003Cb\u003E冲突可串行调度 \u003C\u002Fb\u003E（\u003Cb\u003Econflict serializable\u003C\u002Fb\u003E）\u003C\u002Fp\u003E\u003Cp data-pid=\"WYETF6Xq\"\u003E●A schedule is \u003Cb\u003Econflict serializable\u003C\u002Fb\u003E if it is conflict equivalent to a serial schedule\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-3f66fa1e9b56b3eb584a030cd66f913f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1542\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb\" width=\"1542\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-3f66fa1e9b56b3eb584a030cd66f913f_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1542&#39; height=&#39;307&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1542\" data-rawheight=\"307\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1542\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-3f66fa1e9b56b3eb584a030cd66f913f_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-3f66fa1e9b56b3eb584a030cd66f913f_b.jpg\" data-original-token=\"v2-3f66fa1e9b56b3eb584a030cd66f913f\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-35d946db16e6d6b94d499420913b17e9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1748\" data-rawheight=\"989\" class=\"origin_image zh-lightbox-thumb\" width=\"1748\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-35d946db16e6d6b94d499420913b17e9_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1748&#39; height=&#39;989&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1748\" data-rawheight=\"989\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1748\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-35d946db16e6d6b94d499420913b17e9_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-35d946db16e6d6b94d499420913b17e9_b.jpg\" data-original-token=\"v2-35d946db16e6d6b94d499420913b17e9\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp class=\"ztext-empty-paragraph\"\u003E\u003Cbr\u002F\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"D3uXxsMO\"\u003E验证一个调度是否是冲突可串行，可以画一个依赖图：\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"9_RGREzN\"\u003E每个事务看成是一个顶点\u003C\u002Fli\u003E\u003Cli data-pid=\"pA3u7neJ\"\u003E事务A的操作i与事务B的操作j冲突 （2个操作冲突的等价条件：2个操作属于不同事务，其中存在一个是write，操作对象是同一个resource），i在j前面（前后指在调度中的顺序），那么A有一条边指向B\u003C\u002Fli\u003E\u003Cli data-pid=\"vSw2rSyb\"\u003E如果某个调度的依赖图是无环的，那么他一定是可串行调度\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-efdf80678202271ea16e07b39a2ea163_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1476\" data-rawheight=\"487\" class=\"origin_image zh-lightbox-thumb\" width=\"1476\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-efdf80678202271ea16e07b39a2ea163_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1476&#39; height=&#39;487&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1476\" data-rawheight=\"487\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1476\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-efdf80678202271ea16e07b39a2ea163_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-efdf80678202271ea16e07b39a2ea163_b.jpg\" data-original-token=\"v2-efdf80678202271ea16e07b39a2ea163\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"fZ0ORRvz\"\u003E我们看一个例题：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-92ec86bf7ebc75ae89d67db0c0492ea2_b.jpg\" data-size=\"normal\" data-rawwidth=\"1647\" data-rawheight=\"957\" class=\"origin_image zh-lightbox-thumb\" width=\"1647\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-92ec86bf7ebc75ae89d67db0c0492ea2_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1647&#39; height=&#39;957&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1647\" data-rawheight=\"957\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1647\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-92ec86bf7ebc75ae89d67db0c0492ea2_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-92ec86bf7ebc75ae89d67db0c0492ea2_b.jpg\" data-original-token=\"v2-92ec86bf7ebc75ae89d67db0c0492ea2\"\u002F\u003E\u003Cfigcaption\u003ET1,T2有环，所以不是可串行调度\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003E12.3 how to enforce conflict serializablity\u003C\u002Fh3\u003E\u003Cp data-pid=\"n25Vn1bj\"\u003E如何执行一个冲突可串行调度呢？（即：如何在不同事务的操作交错执行的情况下，保证隔离性呢？\u003C\u002Fp\u003E\u003Cp data-pid=\"14ym5FHv\"\u003E这就要用到 \u003Cb\u003E锁 （lock）。\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cblockquote data-pid=\"ehGppEED\"\u003ELocks are basically what allows a transaction to read and write data.\u003C\u002Fblockquote\u003E\u003Cp data-pid=\"TU1YzDmh\"\u003E事务T1要读取对象A，那么要先请求A的共享锁 S（A）；需要修改对象A，那么需要请求A的排它锁，X（A） 。\u003C\u002Fp\u003E\u003Cp data-pid=\"Xrtumr5i\"\u003ES X分别表示 share ， exclusive。前者可以多个事务共享，后者只能一个事务独占。\u003C\u002Fp\u003E\u003Cp data-pid=\"qgyJfC3s\"\u003E\u003Cb\u003E当一个事务请求一个锁后，所请求的锁如果与已存在的锁冲突，那么该请求被挂起，事务此时只能继续等待该请求，不能做别的事情。\u003C\u002Fb\u003E\u003C\u002Fp\u003E\u003Cp data-pid=\"BmSWkaxO\"\u003E二阶段锁（2PL）：课程主要介绍了2阶段锁，来实现冲突可串行调度。\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"DrSayRb-\"\u003E2PL中，\u003Cb\u003E所有的锁请求都在锁释放前进行。（通过这个协议实现了冲突可串行调度）\u003C\u002Fb\u003E\u003C\u002Fli\u003E\u003Cli data-pid=\"KRtikEXd\"\u003E读取对象必须要持有该对象的共享锁 Share，修改对象前必须持有该对象的排它锁 Exclusive\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b44db9e461351b18a8a5492b5436d30d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1762\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb\" width=\"1762\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b44db9e461351b18a8a5492b5436d30d_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1762&#39; height=&#39;960&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1762\" data-rawheight=\"960\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1762\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b44db9e461351b18a8a5492b5436d30d_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-b44db9e461351b18a8a5492b5436d30d_b.jpg\" data-original-token=\"v2-b44db9e461351b18a8a5492b5436d30d\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"0UNYQYxS\"\u003E但是2PL有个缺点，无法避免 \u003Cb\u003E联级中止（cascading aborts）\u003C\u002Fb\u003E：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e1564b88e99c6697fb693c69dd80add9_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1671\" data-rawheight=\"965\" class=\"origin_image zh-lightbox-thumb\" width=\"1671\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e1564b88e99c6697fb693c69dd80add9_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1671&#39; height=&#39;965&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1671\" data-rawheight=\"965\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1671\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e1564b88e99c6697fb693c69dd80add9_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e1564b88e99c6697fb693c69dd80add9_b.jpg\" data-original-token=\"v2-e1564b88e99c6697fb693c69dd80add9\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"IDP1_RbW\"\u003E因为T1的X（A）锁，在最终提交（或撤销）前的一段时间就释放了，释放完到T1事务结束这段时间里，别的事物也会访问A，从而导致如果T1撤销了，其余涉及了A的事务也必须撤销。\u003C\u002Fp\u003E\u003Cp data-pid=\"bjvlLTtq\"\u003E为了避免联级中止，我们可以用严格二阶段锁（strict 2pl）：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-29d7da07d43b54ae9212298400ec887c_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1677\" data-rawheight=\"625\" class=\"origin_image zh-lightbox-thumb\" width=\"1677\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-29d7da07d43b54ae9212298400ec887c_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1677&#39; height=&#39;625&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1677\" data-rawheight=\"625\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1677\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-29d7da07d43b54ae9212298400ec887c_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-29d7da07d43b54ae9212298400ec887c_b.jpg\" data-original-token=\"v2-29d7da07d43b54ae9212298400ec887c\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"YtF99RR6\"\u003E在事务最终结束的时候，才一次性释放所有的锁。 \u003C\u002Fp\u003E\u003Cp data-pid=\"gqSXeqs2\"\u003E这就让T1结束前，T2,T3都不能访问对象A了。\u003C\u002Fp\u003E\u003Cp data-pid=\"3RFJFThg\"\u003E不过严格2pl降低了并发性。 \u003C\u002Fp\u003E\u003Ch3\u003E12.4 dead lock  \u003C\u002Fh3\u003E\u003Cp data-pid=\"B7wwuvkr\"\u003E死锁 。\u003C\u002Fp\u003E\u003Cp data-pid=\"tELMuEfs\"\u003E当事务T1请求一个锁，该请求需要等待T2释放一个锁，而T2此时也在等待T1，那么就构成了一个死锁。\u003C\u002Fp\u003E\u003Cp data-pid=\"GOYfjQ4e\"\u003E如何避免死锁呢？一是通过策略预防死锁(avoidence)，二是定期地check一下，检查有无死锁产生，并处理(detect)。\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"oj9O6ohs\"\u003Eavoidence 有两种策略：\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-d70de32935384325a0400270a39c2b24_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1807\" data-rawheight=\"832\" class=\"origin_image zh-lightbox-thumb\" width=\"1807\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-d70de32935384325a0400270a39c2b24_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1807&#39; height=&#39;832&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1807\" data-rawheight=\"832\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1807\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-d70de32935384325a0400270a39c2b24_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-d70de32935384325a0400270a39c2b24_b.jpg\" data-original-token=\"v2-d70de32935384325a0400270a39c2b24\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cul\u003E\u003Cli data-pid=\"rhOxyhyD\"\u003Ewait-die: 事务只会等待比自己优先度低的事务，所以不会产生环\u003C\u002Fli\u003E\u003Cli data-pid=\"tHIZFt5U\"\u003Ewound-wait:事务只会等待比自己优先度高的事务，所以不会产生环\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-6d39ba61e6d461f2ad99277b6160688f_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1793\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb\" width=\"1793\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-6d39ba61e6d461f2ad99277b6160688f_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1793&#39; height=&#39;482&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1793\" data-rawheight=\"482\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1793\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-6d39ba61e6d461f2ad99277b6160688f_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-6d39ba61e6d461f2ad99277b6160688f_b.jpg\" data-original-token=\"v2-6d39ba61e6d461f2ad99277b6160688f\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cul\u003E\u003Cli data-pid=\"LjIzdbu7\"\u003Edetect : \u003Cb\u003E通过wait-for graph图来检查死锁，如果事务i请求一个锁，需要等待事务j释放，那么有一条有向边&lt;i,j&gt;, 如果图没有环，说明无死锁，否则，杀死一个事务解环。 \u003C\u002Fb\u003E\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp data-pid=\"regkS5jq\"\u003Ewait-for graph例子：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-7d3ddb3cd4cb24572430e7fb4c1ac385_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1739\" data-rawheight=\"977\" class=\"origin_image zh-lightbox-thumb\" width=\"1739\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-7d3ddb3cd4cb24572430e7fb4c1ac385_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1739&#39; height=&#39;977&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1739\" data-rawheight=\"977\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1739\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-7d3ddb3cd4cb24572430e7fb4c1ac385_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-7d3ddb3cd4cb24572430e7fb4c1ac385_b.jpg\" data-original-token=\"v2-7d3ddb3cd4cb24572430e7fb4c1ac385\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003E12.5 lock management\u003C\u002Fh3\u003E\u003Cp data-pid=\"6N6Wm5XV\"\u003E锁的管理系统是如何处理锁的请求和释放的呢？ \u003C\u002Fp\u003E\u003Cp data-pid=\"qmSVXzr8\"\u003ELM有一个hash表来存储一些信息：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-4a6b7733ed58d58321703bc98432bf67_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1109\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb\" width=\"1109\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-4a6b7733ed58d58321703bc98432bf67_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1109&#39; height=&#39;228&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1109\" data-rawheight=\"228\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1109\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-4a6b7733ed58d58321703bc98432bf67_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-4a6b7733ed58d58321703bc98432bf67_b.jpg\" data-original-token=\"v2-4a6b7733ed58d58321703bc98432bf67\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"fCDdGVVN\"\u003E第一列是resource对象，第二列是该对象授予的锁的集合，第三列是锁的类型，第四列的wait queue。 \u003C\u002Fp\u003E\u003Cp data-pid=\"Eeyx1i9W\"\u003E当一个锁的请求发出，假设是请求一个A的锁，LM先检查wait queue是否为空，如果不为空就加入队尾，否则检查请求的锁与被授予的锁是否兼容（兼容即：都是share锁），不兼容的话加入等待队列，兼容的话授予该锁。 \u003C\u002Fp\u003E\u003Cp data-pid=\"F5ay4smQ\"\u003E当一个锁要释放，将他释放后，从等待队列的队首开始遍历，如果队首请求的锁兼容，加入，否则就中止遍历。\u003C\u002Fp\u003E\u003Cp data-pid=\"6gFuZ6u4\"\u003E伪代码：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-f6d46fb34105a6d8757b36687bf9ffd6_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1892\" data-rawheight=\"1008\" class=\"origin_image zh-lightbox-thumb\" width=\"1892\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-f6d46fb34105a6d8757b36687bf9ffd6_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1892&#39; height=&#39;1008&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1892\" data-rawheight=\"1008\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1892\" data-original=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-f6d46fb34105a6d8757b36687bf9ffd6_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic3.zhimg.com\u002Fv2-f6d46fb34105a6d8757b36687bf9ffd6_b.jpg\" data-original-token=\"v2-f6d46fb34105a6d8757b36687bf9ffd6\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"nCToHCfK\"\u003E当然还有一种做法是：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-3aec0ee66269a519150cdce25fe3c408_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1918\" data-rawheight=\"1005\" class=\"origin_image zh-lightbox-thumb\" width=\"1918\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-3aec0ee66269a519150cdce25fe3c408_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1918&#39; height=&#39;1005&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1918\" data-rawheight=\"1005\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1918\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-3aec0ee66269a519150cdce25fe3c408_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-3aec0ee66269a519150cdce25fe3c408_b.jpg\" data-original-token=\"v2-3aec0ee66269a519150cdce25fe3c408\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Ch3\u003E12.6 锁的粒度 与 多粒度锁(Multi-granularity Locking)\u003C\u002Fh3\u003E\u003Cp data-pid=\"5HJHaEd3\"\u003E我们讨论了什么是锁，但是锁究竟锁住的是什么呢？我们只是笼统地用了resource来表示，其实锁在不同资源层面拥有不同的粒度：\u003C\u002Fp\u003E\u003Cul\u003E\u003Cli data-pid=\"kV5ETHW1\"\u003E元组层面的锁：每个tuple一个锁，粒度精细，并发性高，但锁的开销大\u003C\u002Fli\u003E\u003Cli data-pid=\"wmpbKvQy\"\u003E表层面的锁：每个表一个锁，粒度大，低并发，锁的开销小\u003C\u002Fli\u003E\u003C\u002Ful\u003E\u003Cp data-pid=\"0f1QMRAs\"\u003E我们使用多粒度锁，即：不同的场景采用不同粒度的锁，读取一个表采用table-level lock,修改一条数据采用tuple-level lock \u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-0f33af7b5a7ce46af55692849f0c89b8_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1775\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb\" width=\"1775\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-0f33af7b5a7ce46af55692849f0c89b8_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1775&#39; height=&#39;342&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1775\" data-rawheight=\"342\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1775\" data-original=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-0f33af7b5a7ce46af55692849f0c89b8_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic1.zhimg.com\u002Fv2-0f33af7b5a7ce46af55692849f0c89b8_b.jpg\" data-original-token=\"v2-0f33af7b5a7ce46af55692849f0c89b8\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"XdFTacuq\"\u003E数据库系统层次结构是一棵树:\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e0589bc59a7449f1da9875ab046f860d_b.jpg\" data-size=\"normal\" data-rawwidth=\"1641\" data-rawheight=\"707\" class=\"origin_image zh-lightbox-thumb\" width=\"1641\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e0589bc59a7449f1da9875ab046f860d_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1641&#39; height=&#39;707&#39;&gt;&lt;\u002Fsvg&gt;\" data-size=\"normal\" data-rawwidth=\"1641\" data-rawheight=\"707\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1641\" data-original=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e0589bc59a7449f1da9875ab046f860d_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic2.zhimg.com\u002Fv2-e0589bc59a7449f1da9875ab046f860d_b.jpg\" data-original-token=\"v2-e0589bc59a7449f1da9875ab046f860d\"\u002F\u003E\u003Cfigcaption\u003ET1:table1，Pa：page a\u003C\u002Ffigcaption\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"hTJ4d4I7\"\u003E事务T拥有了节点Pa的X锁，那么隐式地拥有Pa子树所有节点的X锁。 Pa的所有祖先节点都不能拥有X\u002FS锁，为了方便知道这个信息，我们可以给所有祖先节点打上标记 IX， （intend to get X at finer granularity）. \u003C\u002Fp\u003E\u003Cp data-pid=\"LaetopCE\"\u003EIS : intend to get S at finer granularity \u003C\u002Fp\u003E\u003Cp data-pid=\"9A1jJMsT\"\u003EIX:  intend to get X at finer granularity \u003C\u002Fp\u003E\u003Cp data-pid=\"gqQktejS\"\u003ESIX: grasnted S， and intend to get X at finer granularity\u003C\u002Fp\u003E\u003Cp data-pid=\"Ro9sScVM\"\u003E前两种锁只是一种标记，并非真正意义上的锁，表示这个对象子树内有对应锁。\u003C\u002Fp\u003E\u003Cp data-pid=\"Y_3YLmLj\"\u003E第三种锁是为了修改一个表：我们需要表的share 锁，tuple层面的exclusive锁。 \u003C\u002Fp\u003E\u003Cp data-pid=\"mg3rmNhm\"\u003E兼容矩阵：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-5d57c4d03bb7b1356982671b85264253_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1163\" data-rawheight=\"854\" class=\"origin_image zh-lightbox-thumb\" width=\"1163\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-5d57c4d03bb7b1356982671b85264253_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;1163&#39; height=&#39;854&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1163\" data-rawheight=\"854\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"1163\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-5d57c4d03bb7b1356982671b85264253_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-5d57c4d03bb7b1356982671b85264253_b.jpg\" data-original-token=\"v2-5d57c4d03bb7b1356982671b85264253\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp data-pid=\"m7fC_3aV\"\u003E多粒度锁的协议：\u003C\u002Fp\u003E\u003Cfigure data-size=\"normal\"\u003E\u003Cnoscript\u003E\u003Cimg src=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-26545054885afc68d947e03a2a62a1d3_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2036\" data-rawheight=\"728\" class=\"origin_image zh-lightbox-thumb\" width=\"2036\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-26545054885afc68d947e03a2a62a1d3_r.jpg\"\u002F\u003E\u003C\u002Fnoscript\u003E\u003Cimg src=\"data:image\u002Fsvg+xml;utf8,&lt;svg xmlns=&#39;http:\u002F\u002Fwww.w3.org\u002F2000\u002Fsvg&#39; width=&#39;2036&#39; height=&#39;728&#39;&gt;&lt;\u002Fsvg&gt;\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"2036\" data-rawheight=\"728\" class=\"origin_image zh-lightbox-thumb lazy\" width=\"2036\" data-original=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-26545054885afc68d947e03a2a62a1d3_r.jpg\" data-actualsrc=\"https:\u002F\u002Fpic4.zhimg.com\u002Fv2-26545054885afc68d947e03a2a62a1d3_b.jpg\" data-original-token=\"v2-26545054885afc68d947e03a2a62a1d3\"\u002F\u003E\u003C\u002Ffigure\u003E\u003Cp\u003E\u003C\u002Fp\u003E","adminClosedComment":false,"topics":[{"url":"https:\u002F\u002Fwww.zhihu.com\u002Fapi\u002Fv4\u002Ftopics\u002F19614808","type":"topic","id":"19614808","name":"数据库设计"}],"voteupCount":21,"voting":0,"heavyUpStatus":"allow_heavy_up","commentCount":4,"contributions":[],"isTitleImageFullScreen":false,"upvotedFollowees":[],"commercialInfo":{"isCommercial":false,"plugin":{}},"suggestEdit":{"status":false,"reason":"","tip":"","url":"","title":""},"reason":"","annotationAction":[],"canTip":false,"tipjarorsCount":0,"isLabeled":false,"hasPublishingDraft":false,"isFavorited":false,"favlistsCount":40,"isNormal":true,"status":0,"activityToppingInfo":{"state":"untopped"},"shareText":"CS186 2022 spring 个人笔记 - 来自知乎专栏，作者: 湖心亭 https:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F504749706 （想看更多？下载 @知乎 App：http:\u002F\u002Fweibo.com\u002Fp\u002F100404711598 ）","canComment":{"status":true,"reason":""},"mcnFpShow":-1,"isVisible":true,"isLiked":false,"likedCount":4,"hasColumn":false,"republishers":[],"isNewLinkCard":true,"emojiReaction":{"likeCount":4,"likeHasSet":false},"abParam":{"qaHiddenVoteup":"1","rsInterest1":""},"attachedInfo":"kgIkCgkyMDAyOTgyODISCTUwNDc0OTcwNhgHIgpJTUFHRV9URVhU","shareGuide":{"hasPositiveBubble":false,"hasTimeBubble":false,"hitShareGuideCluster":false},"settings":{"tableOfContents":{"enabled":true}},"canReference":false,"reactionInstruction":{}}},"columns":{},"topics":{},"roundtables":{},"favlists":{},"comments":{},"notifications":{},"ebooks":{},"activities":{},"feeds":{},"pins":{},"promotions":{},"drafts":{},"chats":{},"posts":{},"zvideos":{},"zvideoContributions":{},"briefs":{},"eduCourses":{}},"currentUser":"","account":{"unlockTicketStatus":false,"unlockTicket":null,"challenge":[],"errorStatus":false,"message":"","isFetching":false,"accountInfo":{},"urlToken":{"loading":false},"cardUserInfo":{"vipInfo":{}},"handleWidget":{},"widgetList":[],"userWidgetId":""},"settings":{"socialBind":null,"inboxMsg":null,"notification":{},"email":{},"privacyFlag":null,"blockedUsers":{"isFetching":false,"paging":{"pageNo":1,"pageSize":6},"data":[]},"blockedFollowees":{"isFetching":false,"paging":{"pageNo":1,"pageSize":6},"data":[]},"ignoredTopics":{"isFetching":false,"paging":{"pageNo":1,"pageSize":6},"data":[]},"restrictedTopics":null,"laboratory":{}},"notification":{},"people":{"profileStatus":{},"activitiesByUser":{},"answersByUser":{},"answersSortByVotesByUser":{},"answersIncludedByUser":{},"votedAnswersByUser":{},"thankedAnswersByUser":{},"voteAnswersByUser":{},"thankAnswersByUser":{},"topicAnswersByUser":{},"zvideosByUser":{},"articlesByUser":{},"articlesSortByVotesByUser":{},"articlesIncludedByUser":{},"pinsByUser":{},"questionsByUser":{},"commercialQuestionsByUser":{},"favlistsByUser":{},"followingByUser":{},"followersByUser":{},"mutualsByUser":{},"followingColumnsByUser":{},"followingQuestionsByUser":{},"followingFavlistsByUser":{},"followingTopicsByUser":{},"publicationsByUser":{},"columnsByUser":{},"allFavlistsByUser":{},"brands":null,"creationsByUser":{},"creationsSortByVotesByUser":{},"creationsFeed":{},"infinity":{},"batchUsers":{},"profileInfinity":null},"env":{"ab":{"config":{},"triggers":{}},"abV2":{"config":{"paramMap":{"in_editor_title":{"value":"0"},"pc_mou_cre_remove":{"value":"0"},"ws_platform_new":{"value":"0"},"ws_pin_contentpub":{"value":"0"}},"abMap":{}},"triggers":{}},"userAgent":{"Edge":false,"IE":false,"Wechat":false,"Weibo":false,"QQ":false,"MQQBrowser":false,"Qzone":false,"Mobile":false,"Android":false,"iOS":false,"isAppleDevice":false,"Zhihu":false,"ZhihuHybrid":false,"isBot":false,"Tablet":false,"UC":false,"Quark":false,"Sogou":false,"Qihoo":false,"Baidu":false,"BaiduApp":false,"Safari":false,"GoogleBot":false,"AndroidDaily":false,"iOSDaily":false,"WxMiniProgram":false,"BaiduMiniProgram":false,"QQMiniProgram":false,"JDMiniProgram":false,"isWebView":false,"isMiniProgram":false,"origin":"Typora\u002F7007 CFNetwork\u002F1474.1 Darwin\u002F23.0.0"},"appViewConfig":{},"ctx":{"path":"\u002Fp\u002F504749706","query":{},"href":"http:\u002F\u002Fzhuanlan.zhihu.com\u002Fp\u002F504749706","host":"zhuanlan.zhihu.com"},"trafficSource":"production","edition":{"beijing":false,"baidu":false,"sogou":false,"baiduBeijing":false,"sogouBeijing":false,"sogouInput":false,"oppoSearch":false,"baiduSearch":false,"googleSearch":false,"shenma":false,"miniProgram":false,"xiaomi":false,"huaweiSearch":false},"theme":"light","appHeaderTheme":{"current":"normal","disable":true,"normal":{"bgColor":"GBK99A"},"custom":{"bgColor":"GBK99A"}},"enableShortcut":true,"referer":"","xUDId":"","mode":"ssr","conf":{},"xTrafficFreeOrigin":"","ipInfo":{"cityName":"","countryName":"日本","regionName":"日本","countryCode":"JP"},"logged":false,"vars":{"passThroughHeaders":{}}},"me":{"columnContributions":[]},"label":{},"ecommerce":{},"comments":{"pagination":{},"collapsed":{},"reverse":{},"reviewing":{},"conversation":{},"parent":{}},"commentsV2":{"stickers":[],"commentWithPicPermission":{},"notificationsComments":{},"pagination":{},"collapsed":{},"reverse":{},"reviewing":{},"conversation":{},"conversationMore":{},"parent":{}},"pushNotifications":{"default":{"isFetching":false,"isDrained":false,"ids":[]},"follow":{"isFetching":false,"isDrained":false,"ids":[]},"vote_thank":{"isFetching":false,"isDrained":false,"ids":[]},"currentTab":"default","notificationsCount":{"default":0,"follow":0,"vote_thank":0}},"messages":{"data":{},"currentTab":"common","messageCount":0},"register":{"registerValidateSucceeded":null,"registerValidateErrors":{},"registerConfirmError":null,"sendDigitsError":null,"registerConfirmSucceeded":null},"login":{"loginUnregisteredError":false,"loginBindWechatError":false,"loginConfirmError":null,"sendDigitsError":null,"needSMSIdentify":false,"validateDigitsError":false,"loginConfirmSucceeded":null,"qrcodeLoginToken":"","qrcodeLoginScanStatus":0,"qrcodeLoginError":null,"qrcodeLoginReturnNewToken":false},"switches":{},"captcha":{"captchaNeeded":false,"captchaValidated":false},"sms":{"supportedCountries":[]},"chat":{"chats":{},"inbox":{"recents":{"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null},"strangers":{"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null},"friends":{"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null},"search":{"isFetching":false,"isDrained":false,"isPrevDrained":false,"result":[],"next":null,"key":null},"config":{"newCount":0,"strangerMessageSwitch":false,"strangerMessageUnread":false,"friendCount":0}},"global":{"isChatMqttExisted":false}},"emoticons":{"emoticonGroupList":[],"emoticonGroupDetail":{}},"creator":{"tools":{"question":{"invitationCount":{"questionFolloweeCount":0,"questionTotalCount":0}},"recommend":{"recommendTimes":{}}},"explore":{},"levelUpperLimit":10,"mcn":{},"mcnManage":{},"tasks":{},"announcement":{},"creatorsRecommendInfo":{}},"creators":{"common":{"applyStatus":{},"rightsStatus":{}},"bayesDomains":{"status":{},"options":{"topDomains":null,"allDomains":null,"editable":0},"contents":null},"school":{"tabs":[],"contents":[],"banner":null,"entities":{}},"faq":{"tabs":[],"article":{}},"knowledgeIncome":{},"safeguardRights":{},"analytics":{"all":{},"answer":{},"zvideo":{},"article":{},"pin":{},"singleContent":{}},"account":{"growthLevel":{}},"KMResource":{},"training":{},"ToolsQuestion":{"goodatTopics":[]},"ToolsHotspot":{"domains":[]},"ToolsRecommend":{},"ToolsCustomPromotion":{"itemLists":{},"baseInfo":{}},"ToolsSearchQuestion":{},"editorSetting":{},"MCNManage":{},"knowledgeTasks":{},"incomeAnalysis":{"income":{"aggregation":{}}},"creationManage":{"editModal":{"status":false}},"activity":{},"announcement":{},"home":{"currentCreatorUrlToken":null,"rights":[],"newRights":[],"scoreInfo":{},"menusShowControlByServer":{"bVipRecomend":false,"creationRelationship":false},"newTasks":{"creatorTask":{"tasks":[],"des":[]}},"bannerList":[],"recentlyCreated":[],"homecard":{}},"videoSupport":{"textBenefit":{}},"videoDistribution":{},"profilePoster":{"creatorPosterConfig":{},"creatorPosterData":{}}},"answers":{"voters":{},"copyrightApplicants":{},"favlists":{},"newAnswer":{},"entityWords":{},"paidContent":{},"settings":{},"relationEndorsement":{}},"recommendation":{"homeRecommendations":[]},"shareTexts":{},"articles":{"voters":{},"relationEndorsement":{}},"previewPost":{},"favlists":{"relations":{}},"columns":{"voters":{}},"reward":{"answer":{},"article":{},"question":{}},"video":{"data":{},"shareVideoDetail":{},"last":{}},"topstory":{"recommend":{"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null},"follow":{"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null},"followWonderful":{"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null},"sidebar":null,"announcement":{},"hotList":[],"hotListHeadZone":[],"guestFeeds":{"isFetching":false,"isDrained":false,"afterId":0,"items":[],"next":null},"followExtra":{"isNewUser":null,"isFetched":false,"followCount":0,"followers":[]},"hotDaily":{"data":[],"paging":{}},"hotHighlight":{"isFetching":false,"isDrained":false,"data":[],"paging":{}},"banner":{},"commercialBanner":{"show":false,"banner":{},"trackData":{}},"video":{"items":[],"next":null,"isLoading":false,"isDrained":false}},"readStatus":{},"column":{},"requestColumn":{"categories":[],"error":null},"articleContribution":{"contributeRequests":[],"deleteContributeIdList":[],"handledContributeIdList":[],"recommendedColumns":[],"pinnedColumns":[],"sentContributeRequestsIdList":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]},"columnContribution":{"contributeRequests":[],"autoInviteEnabled":false,"recommendedContributors":[]},"draftHistory":{"history":{},"drafts":{}},"upload":{},"articleDraft":{"titleImage":"","titleImageSize":{},"isTitleImageFullScreen":false,"canTitleImageFullScreen":false,"title":"","titleImageUploading":false,"error":"","content":"","draftLoading":false,"updating":false,"globalLoading":false,"pendingVideo":{"resource":null,"error":null},"deleteFail":{"fail":false},"recommendTopics":[],"selectedColumn":0,"articleDisclaimers":[]},"articleDrafts":{"isDrained":false,"isLoading":false,"items":[]},"columnAutocomplete":{"users":[],"friends":[]},"columnCollection":{},"userProfit":{"permission":{"permissionStatus":{"zhiZixuan":0,"recommend":-1,"task":0,"plugin":0,"infinity":0},"visible":false},"linkCardLimit":0},"mcn":{"bindInfo":{},"memberCategoryList":[],"producerList":[],"categoryList":[],"lists":{},"banners":{},"protocolStatus":{"isAgreedNew":true,"isAgreedOld":true},"probationCountdownDays":0},"zvideos":{"campaignVideoList":{},"campaigns":{},"tagoreCategory":[],"recommendations":{},"insertable":{},"recruit":{"form":{"platform":"","nickname":"","followerCount":"","domain":"","contact":""},"submited":false,"ranking":[]},"qyActivityData":{},"talkActivityData":{},"party2022ActivityData":{},"batchVideos":{},"contribution":{"selectedContribution":null,"campaign":null,"configs":{},"contributionLists":{},"recommendQuestions":{"isLoading":true,"paging":{"isEnd":false,"isStart":true,"totals":0},"data":[]},"questionSearchResults":{"isLoading":true,"paging":{"isEnd":false,"isStart":true,"totals":0},"data":[]}},"creationReferences":{},"zvideoCollection":{},"zvideoGrant":{},"collectData":{"isFetching":false,"list":[]},"videoSource":{"isLoaded":false}},"republish":{},"commentPermission":{},"creatorRightStatus":{"list":[]},"adPromotion":{"answer":{},"article":{}}},"fetchHost":"www.zhihu.com","subAppName":"column","spanName":"Post","canaryConfig":{"test_canary":"0","use_new_player":"0","player_vendor":"0","use_hevc":"0","upload_use_signature":"0","use_backdrop_blur":"0","article_title_imagex":"0","play_station":"0","use_qrcode_login_v2":"0"}}</script><script crossorigin="" src="https://static.zhihu.com/heifetz/vendor.5f3e51e68d56265eb628.js"></script><script crossorigin="" src="https://static.zhihu.com/event/react@17.0.2/umd/react.production.min.js"></script><script crossorigin="" src="https://static.zhihu.com/event/react-dom@17.0.2/umd/react-dom.production.min.js"></script><script crossorigin="" src="https://static.zhihu.com/event/react-dom@17.0.2/umd/react-dom-server.browser.production.min.js"></script><script crossorigin="" src="https://static.zhihu.com/heifetz/runtime.app.ac423143619fd690bc72.js"></script><script crossorigin="" src="https://static.zhihu.com/heifetz/lib-75fc9c18.app.3db651c252e14ef6658e.js"></script><script crossorigin="" src="https://static.zhihu.com/heifetz/lib-29107295.app.42d07f814b7b05187671.js"></script><script crossorigin="" src="https://static.zhihu.com/heifetz/lib-79b5cf47.app.8b6b6bf4b6d894db9b07.js"></script><script crossorigin="" src="https://static.zhihu.com/heifetz/lib-330004dc.app.7437cf54ac28fca0e302.js"></script><script crossorigin="" src="https://static.zhihu.com/heifetz/lib-0e5ce61e.app.bfc97c459473d6bbad05.js"></script><script crossorigin="" src="https://static.zhihu.com/heifetz/lib-83b0f42f.app.6bcd41e130a7cc845dab.js"></script><script crossorigin="" src="https://static.zhihu.com/heifetz/lib-38cf5c11.app.a59df9edceb3cc75ed79.js"></script><script crossorigin="" src="https://static.zhihu.com/heifetz/lib-2ec050f6.app.ec43b8d1f8a812e064d3.js"></script><script crossorigin="" src="https://static.zhihu.com/heifetz/2629.app.013145019dad2860154c.js"></script><script crossorigin="" src="https://static.zhihu.com/heifetz/column.app.f592ea48e27b3f9a8102.js"></script><script defer="" src="https://static.zhihu.com/event/wza/4613/aria.js?appid=a3637ace5dc3a347f6863b0bac487599" id="ariascripts" wapForceOldFixed="false" loadData="false"></script></body><script src="https://hm.baidu.com/hm.js?98beee57fd2ef70ccdd5ca52b9740c49" async=""></script></html>